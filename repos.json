[
    {
        "compliant_cli": true,
        "files": {
            "Dockerfile": null,
            "README.md": "[![CircleCI](https://circleci.com/gh/ASVLeipzig/cor-asv-ann.svg?style=svg)](https://circleci.com/gh/ASVLeipzig/cor-asv-ann)\n[![PyPI version](https://badge.fury.io/py/ocrd-cor-asv-ann.svg)](https://badge.fury.io/py/ocrd-cor-asv-ann)\n\n# cor-asv-ann\n    OCR post-correction with encoder-attention-decoder LSTMs\n\nContents:\n  * [Introduction](#introduction)\n     * [Architecture](#architecture)\n     * [Multi-OCR input](#multi-ocr-input)\n     * [Decoder feedback](#decoder-feedback)\n     * [Decoder modes](#decoder-modes)\n        * [<em>fast</em>](#fast)\n        * [<em>greedy</em>](#greedy)\n        * [<em>beamed</em>](#default)\n     * [Rejection](#rejection)\n     * [Underspecification and gap](#underspecification-and-gap)\n     * [Training](#training)\n     * [Processing PAGE annotations](#processing-page-annotations)\n     * [Evaluation](#evaluation)\n  * [Installation](#installation)\n  * [Usage](#usage)\n     * [command line interface cor-asv-ann-train](#command-line-interface-cor-asv-ann-train)\n     * [command line interface cor-asv-ann-repl](#command-line-interface-cor-asv-ann-repl)\n     * [command line interface cor-asv-ann-proc](#command-line-interface-cor-asv-ann-proc)\n     * [command line interface cor-asv-ann-eval](#command-line-interface-cor-asv-ann-eval)\n     * [command line interface cor-asv-ann-compare](#command-line-interface-cor-asv-ann-compare)\n     * [OCR-D processor interface ocrd-cor-asv-ann-process](#ocr-d-processor-interface-ocrd-cor-asv-ann-process)\n     * [OCR-D processor interface ocrd-cor-asv-ann-evaluate](#ocr-d-processor-interface-ocrd-cor-asv-ann-evaluate)\n     * [OCR-D processor interface ocrd-cor-asv-ann-align](#ocr-d-processor-interface-ocrd-cor-asv-ann-align)\n  * [Testing](#testing)\n\n\n## Introduction\n\nThis is a tool for automatic OCR _post-correction_ (reducing optical character recognition errors) with recurrent neural networks. It uses sequence-to-sequence transduction on the _character level_ with a model architecture akin to neural machine translation, i.e. a stacked **encoder-decoder** network with attention mechanism. \n\n### Architecture\n\nThe **attention model** always applies to full lines (in a _local, monotonic_ configuration), and uses a linear _additive_ alignment model. (This transfers information between the encoder and decoder hidden layer states, and calculates a _soft alignment_ between input and output characters. It is imperative for character-level processing, because with a simple final-initial transfer, models tend to start \"forgetting\" the input altogether at some point in the line and behave like unconditional LM generators. Local alignment is necessary to prevent snapping back to earlier states during long sequences.)\n\nThe **network architecture** is as follows: \n\n![network architecture](https://asvleipzig.github.io/cor-asv-ann/scheme.svg?sanitize=true \"topology for depth=1 width=3\")\n\n0. The input characters are represented as unit vectors (or as a probability distribution in case of uncertainty and ambiguity). These enter a dense projection layer to be picked up by the encoder.\n1. The bottom hidden layer of the encoder is a bi-directional LSTM. \n2. The next encoder layers are forward LSTMs stacked on top of each other. \n3. The outputs of the top layer enter the attention model as constants (both in raw form to be weighted with the decoder state recurrently, and in a pre-calculated dense projection).\n4. The hidden layers of the decoder are forward LSTMs stacked on top of each other.\n5. The top hidden layer of the decoder has double width and contains the attention model:\n   - It reads the attention constants from 3. and uses the alignment as attention state (to be input as initial and output as final state). \n   - The attention model masks a window around the center of the previous alignment plus 1 character, calculates a new alignment between encoder outputs and current decoder state, and superimposes this with the encoder outputs to yield a context vector.\n   - The context vector is concatenated to the previous layers output and enters the LSTM.\n6. The decoder outputs enter a dense projection and get normalized to a probability distribution (softmax) for each character. (The output projection weights are the transpose of the input projection weights in 0. \u2013 weight tying.)\n7. Depending on the decoder mode, the decoder output is fed back directly (greedy) or indirectly (beamed) into the decoder input. (The first position is fed with a start symbol. Decoding ends on receiving a stop symbol.)\n8. The result is the character sequences corresponding to the argmax probabilities of the decoder outputs.\n\nHL depth and width, as well as many other topology and training options can be configured:\n- residual connections between layers in encoder and decoder?\n- deep bidirectional encoder (with fw/bw cross-summarization)?\n- LM loss/prediction as secondary output (multi-task learning, dual scoring)?\n\n(cf. [training options](#Training))\n\n### Multi-OCR input\n\nnot yet!\n\n### Decoder feedback\n\nOne important empirical finding is that the softmax output (full probability distribution) of the decoder can carry important information for the next state when input directly. This greatly improves the accuracy of both alignments and predictions. (This is in part attributable to exposure bias.) Therefore, instead of following the usual convention of feeding back argmax unit vectors, this implementation feeds back the softmax output directly.\n\nThis can even be done for beam search (which normally splits up the full distribution into a few select explicit candidates, represented as unit vectors) by simply resetting maximum outputs for lower-scoring candidates successively.\n\n### Decoder modes\n\nWhile the _encoder_ can always be run in parallel over a batch of lines and by passing the full sequence of characters in one tensor (padded to the longest line in the batch), which is very efficient with Keras backends like Tensorflow, a **beam-search** _decoder_ requires passing initial/final states character-by-character, with parallelism employed to capture multiple history hypotheses of a single line. However, one can also **greedily** use the best output only for each position (without beam search). This latter option also allows to run in parallel over lines, which is much faster \u2013 consuming up to ten times less CPU time.\n\nThererfore, the backend function can operate the decoder network in either of the following modes:\n\n#### _fast_\n\nDecode greedily, but feeding back the full softmax distribution in batch mode (lines-parallel).\n\n#### _greedy_\n\nDecode greedily, but feeding back the full softmax distribution for each line separately.\n\n#### _default_\n\nDecode beamed, selecting the best output candidates of the best history hypotheses for each line and feeding back their (successively reset) partial softmax distributions in batch mode (hypotheses-parallel). More specifically:\n\n> Start decoder with start-of-sequence, then keep decoding until\n> end-of-sequence is found or output length is way off, repeatedly.\n> Decode by using the best predicted output characters and several next-best\n> alternatives (up to some degradation threshold) as next input.\n> Follow-up on the N best overall candidates (estimated by accumulated\n> score, normalized by length and prospective cost), i.e. do A*-like\n> breadth-first search, with N equal `batch_size`.\n> Pass decoder initial/final states from character to character,\n> for each candidate respectively.\n\n### Rejection\n\nDuring beam search (default decoder mode), whenever the input and output is in good alignment (i.e. the attention model yields an alignment approximately 1 character after their predecessor's alignment on average), it is possible to estimate the current position in the source string. This input character's predicted output score, when smaller than a given (i.e. variable) probability threshold can be clipped to that minimum. This effectively adds a candidate which _rejects_ correction at that position (keeping the input unchanged).\n\n![rejection example](./rejection.png \"soft alignment and probabilities, greedy and beamed (red is the rejection candidate)\")\n\nThat probability is called _rejection threshold_ as a runtime parameter. But while 0.0 _will_ disable rejection completely (i.e. the input hypothesis, if at all identifiable, will keep its predicted score), 1.0 will _not_ disable correction completely (because the input hypothesis might not be found if alignment is too bad). \n\n### Underspecification and gap\n\nInput characters that have not been seen during training must be well-behaved at inference time: They must be represented by a reserved index, and should behave like **neutral/unknown** characters instead of spoiling HL states and predictions in a longer follow-up context. This is achieved by dedicated leave-one-out training and regularization to optimize for interpolation of all known characters. At runtime, the encoder merely shows a warning of the previously unseen character.\n\nThe same device is useful to fill a known **gap** in the input (the only difference being that no warning is shown).\n\nAs an additional facility, characters that are known in advance to not fit well with the model can be mapped prior to correction with the `charmap` parameter.\n\n### Training\n\nPossibilities:\n- incremental training and pretraining (on clean-only text)\n- scheduled sampling (mixed teacher forcing and decoder feedback)\n- LM transfer (initialization of the decoder weights from a language model of the same topology)\n- shallow transfer (initialization of encoder/decoder weights from a model of lesser depth)\n\nFor existing models, cf. [models subrepository](https://github.com/ASVLeipzig/cor-asv-ann-models/).\n\nFor tools and datasets, cf. [data processing subrepository](https://github.com/ASVLeipzig/cor-asv-ann-data-processing/).\n\n### Processing PAGE annotations\n\nWhen applied on [PAGE-XML](https://github.com/PRImA-Research-Lab/PAGE-XML) (as [OCR-D workspace processor](https://ocr-d.github.io/cli), cf. [usage](#ocr-d-processor-interface-ocrd-cor-asv-ann-process)), this component also allows processing below the `TextLine` hierarchy level, i.e. on `Word` or `Glyph` level.\n\nFor that one needs to distribute the line-level transduction onto the lower level elements (keeping their coordinates and other meta-data), while changing Word segmentation if necessary (i.e. merging and splitting tokens). To calculate an optimal **hard alignment** path for characters, we _could_ use the soft alignment scores \u2013 but in practise, the quality of an independent, a-posteriori string alignment (i.e. Needleman-Wunsch algorithm) is better.\n\n### Evaluation\n\nText lines can be compared (by aligning and computing a distance under some metric) across multiple inputs. (This would typically be GT and OCR vs post-correction.) This can be done both on plain text files (`cor-asv-ann-eval`) and PAGE-XML annotations (`ocrd-cor-asv-ann-evaluate`). \n\nDistances are accumulated (as micro-averages) as character error rate (CER) mean and stddev, but only on the character level.\n\nThere are a number of distance metrics available (all but the first operating on grapheme clusters, not mere codepoints, and using the alignment path length as denominator, not just the maximum string length):\n- `Levenshtein-fast`:  \n  simple unweighted edit distance (fastest, standard; GT level 3; no regard for combining sequences; max-length norm)\n- `Levenshtein`:  \n  simple unweighted edit distance (GT level 3)\n- `NFC`:  \n  like `Levenshtein`, but apply Unicode normal form with canonical composition before (i.e. less than GT level 2)\n- `NFKC`:  \n  like `Levenshtein`, but apply Unicode normal form with compatibility composition before (i.e. less than GT level 2, except for `\u017f`, which is already normalized to `s`)\n- `historic_latin`:  \n  like `Levenshtein`, but decomposing non-vocalic ligatures before and treating as equivalent (i.e. zero distances) confusions of certain semantically close characters often found in historic texts (e.g. umlauts with combining letter `e` as in `Wu\u0364\u017fte` instead of  to `W\u00fc\u017fte`, `\u017f` vs `s`, or quotation/citation marks; GT level 1)\n\n...perplexity measurement...\n\n## Installation\n\nBesides [OCR-D](https://github.com/OCR-D/core), this builds on Keras/Tensorflow.\n\nRequired Ubuntu packages:\n\n* Python (`python` or `python3`)\n* pip (`python-pip` or `python3-pip`)\n* venv (`python-venv` or `python3-venv`)\n\nCreate and activate a virtual environment as usual.\n\nTo install Python dependencies:\n\n    make deps\n\nWhich is the equivalent of:\n\n    pip install -r requirements.txt\n\n\nTo install this module, then do:\n\n    make install\n\nWhich is the equivalent of:\n\n    pip install .\n\n\nThe module can use CUDA-enabled GPUs (when sufficiently installed), but can also run on CPU only. Models are always interchangable.\n\n> Note: Models and code are still based on Keras 2.3 / Tensorflow 1.15, which are already end-of-life. You might need an extra venv just for this module to avoid conflicts with other packages. Also, Python >= 3.8 and CUDA toolkit >= 11.0 might not work with prebuilt Tensorflow versions (but see [installation](./INSTALL.md) in that case).\n\n## Usage\n\nThis packages has the following user interfaces:\n\n### command line interface `cor-asv-ann-train`\n\nTo be used with TSV files (tab-delimited source-target lines),\nor pickle dump files (source-target tuple lists).\n\n```\nUsage: cor-asv-ann-train [OPTIONS] [DATA]...\n\n  Train a correction model on GT files.\n\n  Configure a sequence-to-sequence model with the given parameters.\n\n  If given `load_model`, and its configuration matches the current\n  parameters, then load its weights. If given `init_model`, then transfer\n  its mapping and matching layer weights. (Also, if its configuration has 1\n  less hidden layers, then fixate the loaded weights afterwards.) If given\n  `reset_encoder`, re-initialise the encoder weights afterwards.\n\n  Then, regardless, train on the `data` files using early stopping.\n\n  (Supported file formats are:\n   - * (tab-separated values), with source-target lines\n   - *.pkl (pickle dumps), with source-target lines, where source is either\n     - a single string, or\n     - a sequence of character-probability tuples.)\n\n  If no `valdata` were given, split off a random fraction of lines for\n  validation. Otherwise, use only those files for validation.\n\n  If the training has been successful, save the model under `save_model`.\n\nOptions:\n  -m, --save-model FILE      model file for saving\n  --load-model FILE          model file for loading (incremental/pre-training)\n  --init-model FILE          model file for initialisation (transfer from LM\n                             or shallower model)\n  --reset-encoder            reset encoder weights after load/init\n  -w, --width INTEGER RANGE  number of nodes per hidden layer\n  -d, --depth INTEGER RANGE  number of stacked hidden layers\n  -v, --valdata FILE         file to use for validation (instead of random\n                             split)\n  -h, --help                 Show this message and exit.\n```\n\n### command line interface `cor-asv-ann-proc`\n\nTo be used with plain-text files, TSV files (tab-delimited source-target lines\n\u2013 where target is ignored), or pickle dump files (source-target tuple lists \u2013\nwhere target is ignored).\n\n```\nUsage: cor-asv-ann-proc [OPTIONS] [DATA]...\n\n  Apply a correction model on GT or text files.\n\n  Load a sequence-to-sequence model from the given path.\n\n  Then open the `data` files, (ignoring target side strings, if any) and\n  apply the model to its (source side) strings in batches, accounting for\n  input file names line by line.\n\n  (Supported file formats are:\n   - * (plain-text), with source lines,\n   - * (tab-separated values), with source-target lines,\n   - *.pkl (pickle dumps), with source-target lines, where source is either\n     - a single string, or\n     - a sequence of character-probability tuples.)\n\n  For each input file, open a new output file derived from its file name by\n  removing `old_suffix` (or the last extension) and appending `new_suffix`.\n  Write the resulting lines to that output file.\n\nOptions:\n  -m, --load-model FILE        model file to load\n  -f, --fast                   only decode greedily\n  -r, --rejection FLOAT RANGE  probability of the input characters in all\n                               hypotheses (set 0 to use raw predictions)\n  -C, --charmap TEXT           mapping for input characters before passing to\n                               correction; can be used to adapt to character\n                               set mismatch between input and model (without\n                               relying on underspecification alone)\n  -S, --old-suffix TEXT        Suffix to remove from input files for output\n                               files\n  -s, --new-suffix TEXT        Suffix to append to input files for output\n                               files\n  -h, --help                   Show this message and exit.\n```\n\n### command line interface `cor-asv-ann-eval`\n\nTo be used with TSV files (tab-delimited source-target lines),\nor pickle dump files (source-target tuple lists).\n\n```\nUsage: cor-asv-ann-eval [OPTIONS] [DATA]...\n\n  Evaluate a correction model on GT files.\n\n  Load a sequence-to-sequence model from the given path.\n\n  Then apply on the file paths `data`, comparing predictions (both greedy\n  and beamed) with GT target, and measuring error rates.\n\n  (Supported file formats are:\n   - * (tab-separated values), with source-target lines\n   - *.pkl (pickle dumps), with source-target lines, where source is either\n     - a single string, or\n     - a sequence of character-probability tuples.)\n\nOptions:\n  -m, --load-model FILE           model file to load\n  -f, --fast                      only decode greedily\n  -r, --rejection FLOAT RANGE     probability of the input characters in all\n                                  hypotheses (set 0 to use raw predictions)\n  -n, --normalization [Levenshtein|NFC|NFKC|historic_latin]\n                                  normalize character sequences before\n                                  alignment/comparison (set Levenshtein for\n                                  none)\n  -C, --charmap TEXT              mapping for input characters before passing\n                                  to correction; can be used to adapt to\n                                  character set mismatch between input and\n                                  model (without relying on underspecification\n                                  alone)\n  -l, --gt-level INTEGER RANGE    GT transcription level to use for\n                                  historic_latin normlization (1: strongest,\n                                  3: none)\n  -c, --confusion INTEGER RANGE   show this number of most frequent (non-\n                                  identity) edits (set 0 for none)\n  -H, --histogram                 aggregate and compare character histograms\n  -h, --help                      Show this message and exit.\n```\n\n### command line interface `cor-asv-ann-compare`\n\nTo be used with PAGE-XML files, plain-text files, or plain-text file lists\n(of PAGE-XML or plain-text files), 1 for GT and N for predictions (OCR or COR).\n\n```\nUsage: cor-asv-ann-compare [OPTIONS] GT_FILE [OCR_FILES]...\n\n  Compare text lines by aligning and computing the textual distance and\n  character error rate.\n\n  This compares 1:n given PAGE-XML or plain text files.\n\n  If `--file-lists` is given and files are plain text, then they will be\n  interpreted as (newline-separated) lists of path names for single-line\n  text files (for Ocropus convention).\n\n  Writes a JSON report file to `--output-file`. (No error aggregation across\n  files in this CLI.)\n\nOptions:\n  -o, --output-file FILE          path name of generated report (default:\n                                  stdout)\n  -n, --normalization [Levenshtein-fast|Levenshtein|NFC|NFKC|historic_latin]\n                                  normalize character sequences before\n                                  alignment/comparison (set Levenshtein for\n                                  none)\n  -l, --gt-level INTEGER RANGE    GT transcription level to use for\n                                  historic_latin normlization (1: strongest,\n                                  3: none)\n  -c, --confusion INTEGER RANGE   show this number of most frequent (non-\n                                  identity) edits (set 0 for none)\n  -H, --histogram                 aggregate and compare character histograms\n  -F, --file-lists                interpret files as plain text files with one\n                                  file path per line\n  -h, --help                      Show this message and exit.\n```\n\n\n### command line interface `cor-asv-ann-repl`\n\nThis tool provides a Python read-eval-print-loop for interactive usage (including some visualization):\n\n```\nUsage: cor-asv-ann-repl [OPTIONS]\n\n  Try a correction model interactively.\n\n  Import Sequence2Sequence, instantiate `s2s`, then enter REPL. Also,\n  provide function `transcode_line` for single line correction.\n\nOptions:\n  --help  Show this message and exit.\n```\n\nHere is what you see after starting up the interpreter:\n```\nusage example:\n>>> s2s.load_config('model')\n>>> s2s.configure()\n>>> s2s.load_weights('model')\n>>> s2s.evaluate(['filename'])\n\n>>> transcode_line('hello world!')\nnow entering REPL...\n\nPython 3.6.7 (default, Oct 22 2018, 11:32:17) \n[GCC 8.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n```\n\n\n### [OCR-D processor](https://ocr-d.de/en/spec/cli) interface `ocrd-cor-asv-ann-process`\n\nTo be used with [PAGE-XML](https://github.com/PRImA-Research-Lab/PAGE-XML) documents in an [OCR-D](https://ocr-d.de/about/) annotation workflow. \n\nInput could be anything with a textual annotation (`TextEquiv` on the given `textequiv_level`). \n\nPretrained model files are contained in the [models subrepository](https://github.com/ASVLeipzig/cor-asv-ann-models/). At runtime, you can use both absolute and relative paths for model files. The latter are searched for in the installation directory, under the path in the environment variable `CORASVANN_DATA` (if given), and in the default paths of the OCR-D resource manager (i.e. you can do `ocrd resmgr download -na ocrd-cor-asv-ann-process https://github.com/ASVLeipzig/cor-asv-ann-models/blob/master/s2s.dta19.Fraktur4.d2.w0512.adam.attention.stateless.variational-dropout.char.pretrained+retrained-conf.h5` and then `ocrd resmgr list-installed -e ocrd-cor-asv-ann-process` tells you that `s2s.dta19.Fraktur4.d2.w0512.adam.attention.stateless.variational-dropout.char.pretrained+retrained-conf.h5` will resolve as `model_file`).\n\n\n```\nUsage: ocrd-cor-asv-ann-process [OPTIONS]\n\n  Improve text annotation by character-level encoder-attention-decoder ANN model\n\n  > Perform OCR post-correction with encoder-attention-decoder ANN on\n  > the workspace.\n\n  > Open and deserialise PAGE input files, then iterate over the element\n  > hierarchy down to the requested `textequiv_level`, making sequences\n  > of TextEquiv objects as lists of lines. Concatenate their string\n  > values, obeying rules of implicit whitespace, and map the string\n  > positions where the objects start.\n\n  > Next, transcode the input lines into output lines in parallel, and\n  > use the retrieved soft alignment scores to calculate hard alignment\n  > paths between input and output string via Viterbi decoding. Then use\n  > those to map back the start positions and overwrite each TextEquiv\n  > with its new content, paying special attention to whitespace:\n\n  > Distribute edits such that whitespace objects cannot become more\n  > than whitespace (or be deleted) and that non-whitespace objects must\n  > not start or end with whitespace (but may contain new whitespace in\n  > the middle).\n\n  > Subsequently, unless processing on the `line` level, make the Word\n  > segmentation consistent with that result again: merge around deleted\n  > whitespace tokens and split at whitespace inside non-whitespace\n  > tokens.\n\n  > Finally, make the levels above `textequiv_level` consistent with\n  > that textual result (via concatenation joined by whitespace).\n\n  > Produce new output files by serialising the resulting hierarchy.\n\nOptions:\n  -I, --input-file-grp USE        File group(s) used as input\n  -O, --output-file-grp USE       File group(s) used as output\n  -g, --page-id ID                Physical page ID(s) to process\n  --overwrite                     Remove existing output pages/images\n                                  (with --page-id, remove only those)\n  -p, --parameter JSON-PATH       Parameters, either verbatim JSON string\n                                  or JSON file path\n  -P, --param-override KEY VAL    Override a single JSON object key-value pair,\n                                  taking precedence over --parameter\n  -m, --mets URL-PATH             URL or file path of METS to process\n  -w, --working-dir PATH          Working directory of local workspace\n  -l, --log-level [OFF|ERROR|WARN|INFO|DEBUG|TRACE]\n                                  Log level\n  -C, --show-resource RESNAME     Dump the content of processor resource RESNAME\n  -L, --list-resources            List names of processor resources\n  -J, --dump-json                 Dump tool description as JSON and exit\n  -h, --help                      This help message\n  -V, --version                   Show version\n\nParameters:\n   \"model_file\" [string - REQUIRED]\n    path of h5py weight/config file for model trained with cor-asv-ann-\n    train\n   \"textequiv_level\" [string - \"glyph\"]\n    PAGE XML hierarchy level to read/write TextEquiv input/output on\n    Possible values: [\"line\", \"word\", \"glyph\"]\n   \"charmap\" [object - {}]\n    mapping for input characters before passing to correction; can be\n    used to adapt to character set mismatch between input and model\n    (without relying on underspecification alone)\n   \"rejection_threshold\" [number - 0.5]\n    minimum probability of the candidate corresponding to the input\n    character in each hypothesis during beam search, helps balance\n    precision/recall trade-off; set to 0 to disable rejection (max\n    recall) or 1 to disable correction (max precision)\n   \"relative_beam_width\" [number - 0.2]\n    minimum fraction of the best candidate's probability required to\n    enter the beam in each hypothesis; controls the quality/performance\n    trade-off\n   \"fixed_beam_width\" [number - 15]\n    maximum number of candidates allowed to enter the beam in each\n    hypothesis; controls the quality/performance trade-off\n   \"fast_mode\" [boolean - false]\n    decode greedy instead of beamed, with batches of parallel lines\n    instead of parallel alternatives; also disables rejection and beam\n    parameters; enable if performance is far more important than quality\n```\n\n### [OCR-D processor](https://ocr-d.de/en/spec/cli) interface `ocrd-cor-asv-ann-evaluate`\n\nTo be used with [PAGE-XML](https://github.com/PRImA-Research-Lab/PAGE-XML) documents in an [OCR-D](https://ocr-d.de/about/) annotation workflow.\n\nInputs could be anything with a textual annotation (`TextEquiv` on the line level), but at least 2. The first in the list of input file groups will be regarded as reference/GT.\n\nThere are various evaluation [metrics](#Evaluation) available.\n\nThe tool can also aggregate and show the most frequent character confusions.\n\n```\nUsage: ocrd-cor-asv-ann-evaluate [OPTIONS]\n\n  Align different textline annotations and compute distance\n\n  > Align textlines of multiple file groups and calculate distances.\n\n  > Find files in all input file groups of the workspace for the same\n  > pageIds. The first file group serves as reference annotation (ground\n  > truth).\n\n  > Open and deserialise PAGE input files, then iterate over the element\n  > hierarchy down to the TextLine level, looking at each first\n  > TextEquiv. Align character sequences in all pairs of lines for the\n  > same TextLine IDs, and calculate the distances using the error\n  > metric `metric`. Accumulate distances and sequence lengths per file\n  > group globally and per file, and show each fraction as a CER rate in\n  > the log.\n\nOptions:\n  -I, --input-file-grp USE        File group(s) used as input\n  -O, --output-file-grp USE       File group(s) used as output\n  -g, --page-id ID                Physical page ID(s) to process\n  --overwrite                     Remove existing output pages/images\n                                  (with --page-id, remove only those)\n  -p, --parameter JSON-PATH       Parameters, either verbatim JSON string\n                                  or JSON file path\n  -P, --param-override KEY VAL    Override a single JSON object key-value pair,\n                                  taking precedence over --parameter\n  -m, --mets URL-PATH             URL or file path of METS to process\n  -w, --working-dir PATH          Working directory of local workspace\n  -l, --log-level [OFF|ERROR|WARN|INFO|DEBUG|TRACE]\n                                  Log level\n  -C, --show-resource RESNAME     Dump the content of processor resource RESNAME\n  -L, --list-resources            List names of processor resources\n  -J, --dump-json                 Dump tool description as JSON and exit\n  -h, --help                      This help message\n  -V, --version                   Show version\n\nParameters:\n   \"metric\" [string - \"Levenshtein-fast\"]\n    Distance metric to calculate and aggregate: `historic_latin` for GT\n    level 1-3, `NFKC` for roughly GT level 2 (but including reduction of\n    `\u017f/s` and superscript numerals etc), `Levenshtein` for GT level 3\n    (or `Levenshtein-fast` for faster alignment but using maximum\n    sequence length instead of path length as CER denominator).\n    Possible values: [\"Levenshtein-fast\", \"Levenshtein\", \"NFC\", \"NFKC\",\n    \"historic_latin\"]\n   \"gt_level\" [number - 1]\n    When `metric=historic_latin`, normalize and equate at this GT\n    transcription level.\n    Possible values: [1, 2, 3]\n   \"confusion\" [number - 0]\n    Count edits and show that number of most frequent confusions (non-\n    identity) in the end.\n   \"histogram\" [boolean - false]\n    Aggregate and show mutual character histograms.\n```\n\nThe output file group for the evaluation tool will contain a JSON report of the CER distances of each text line per page, and an aggregated JSON report with the totals and the confusion table. It also makes extensive use of logging.\n\n### [OCR-D processor](https://ocr-d.de/en/spec/cli) interface `ocrd-cor-asv-ann-align`\n\nTo be used with [PAGE-XML](https://github.com/PRImA-Research-Lab/PAGE-XML) documents in an [OCR-D](https://ocr-d.de/about/) annotation workflow.\n\nInputs could be anything with a textual annotation (`TextEquiv` on the line level), but at least 2 (or 3 for `method=majority`). No input will be priviledged regarding text content, but the first input fileGrp will serve as the base annotation for the output.\n\n```\nUsage: ocrd-cor-asv-ann-align [OPTIONS]\n\n  Align different textline annotations and pick best\n\n  > Align textlines of multiple file groups and choose the 'best'\n  > characters.\n\n  > Find files in all input file groups of the workspace for the same\n  > pageIds.\n\n  > Open and deserialise PAGE input files, then iterate over the element\n  > hierarchy down to the TextLine level, looking at each first\n  > TextEquiv. Align character sequences in all pairs of lines for the\n  > same TextLine IDs, and for each position pick the 'best' character\n  > hypothesis among the inputs.\n\n  > Choice depends on ``method``:\n  > - if `majority`, then use a majority rule over the inputs\n  >   (requires at least 3 input fileGrps),\n  > - if `confidence`, then use the candidate with the highest confidence\n  >   (requires input with per-character or per-line confidence annotations),\n  > - if `combined`, then try a heuristic combination of both approaches\n  >   (requires both conditions).\n\n  > Then concatenate those character choices to new TextLines (without\n  > segmentation at lower levels).\n\n  > Finally, make the parent regions (higher levels) consistent with\n  > that textual result (via concatenation joined by whitespace).\n\n  > Produce new output files by serialising the resulting hierarchy.\n\nOptions:\n  -I, --input-file-grp USE        File group(s) used as input\n  -O, --output-file-grp USE       File group(s) used as output\n  -g, --page-id ID                Physical page ID(s) to process\n  --overwrite                     Remove existing output pages/images\n                                  (with --page-id, remove only those)\n  -p, --parameter JSON-PATH       Parameters, either verbatim JSON string\n                                  or JSON file path\n  -P, --param-override KEY VAL    Override a single JSON object key-value pair,\n                                  taking precedence over --parameter\n  -m, --mets URL-PATH             URL or file path of METS to process\n  -w, --working-dir PATH          Working directory of local workspace\n  -l, --log-level [OFF|ERROR|WARN|INFO|DEBUG|TRACE]\n                                  Log level\n  -C, --show-resource RESNAME     Dump the content of processor resource RESNAME\n  -L, --list-resources            List names of processor resources\n  -J, --dump-json                 Dump tool description as JSON and exit\n  -h, --help                      This help message\n  -V, --version                   Show version\n\nParameters:\n   \"method\" [string - \"majority\"]\n    decide by majority of OCR hypotheses, by highest confidence of OCRs\n    or by a combination thereof\n    Possible values: [\"majority\", \"confidence\", \"combined\"]\n```\n\n## Testing\n\nnot yet!\n...\n",
            "ocrd-tool.json": "{\n  \"git_url\": \"https://github.com/ASVLeipzig/cor-asv-ann\",\n  \"version\": \"0.1.13\",\n  \"tools\": {\n    \"ocrd-cor-asv-ann-process\": {\n      \"executable\": \"ocrd-cor-asv-ann-process\",\n      \"categories\": [\n        \"Text recognition and optimization\"\n      ],\n      \"steps\": [\n        \"recognition/post-correction\"\n      ],\n      \"description\": \"Improve text annotation by character-level encoder-attention-decoder ANN model\",\n      \"input_file_grp\": [\n        \"OCR-D-OCR-TESS\",\n        \"OCR-D-OCR-KRAK\",\n        \"OCR-D-OCR-OCRO\",\n        \"OCR-D-OCR-CALA\",\n        \"OCR-D-OCR-ANY\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-COR-ASV\"\n      ],\n      \"parameters\": {\n        \"model_file\": {\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"content-type\": \"application/x-hdf;subtype=bag\",\n          \"description\": \"path of h5py weight/config file for model trained with cor-asv-ann-train\",\n          \"required\": true,\n          \"cacheable\": true\n        },\n        \"textequiv_level\": {\n          \"type\": \"string\",\n          \"enum\": [\"line\", \"word\", \"glyph\"],\n          \"default\": \"glyph\",\n          \"description\": \"PAGE XML hierarchy level to read/write TextEquiv input/output on\"\n        },\n        \"charmap\": {\n          \"type\": \"object\",\n          \"default\": {},\n          \"description\": \"mapping for input characters before passing to correction; can be used to adapt to character set mismatch between input and model (without relying on underspecification alone)\"\n        },\n        \"rejection_threshold\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"default\": 0.5,\n          \"description\": \"minimum probability of the candidate corresponding to the input character in each hypothesis during beam search, helps balance precision/recall trade-off; set to 0 to disable rejection (max recall) or 1 to disable correction (max precision)\"\n        },\n        \"relative_beam_width\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"default\": 0.2,\n          \"description\": \"minimum fraction of the best candidate's probability required to enter the beam in each hypothesis; controls the quality/performance trade-off\"\n        },\n        \"fixed_beam_width\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"default\": 15,\n          \"description\": \"maximum number of candidates allowed to enter the beam in each hypothesis; controls the quality/performance trade-off\"\n        },\n        \"fast_mode\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"decode greedy instead of beamed, with batches of parallel lines instead of parallel alternatives; also disables rejection and beam parameters; enable if performance is far more important than quality\"\n        }\n      }\n    },\n    \"ocrd-cor-asv-ann-evaluate\": {\n      \"executable\": \"ocrd-cor-asv-ann-evaluate\",\n      \"categories\": [\n        \"Text recognition and optimization\"\n      ],\n      \"steps\": [\n        \"recognition/evaluation\"\n      ],\n      \"description\": \"Align different textline annotations and compute distance\",\n      \"input_file_grp\": [\n        \"OCR-D-GT-SEG-LINE\",\n        \"OCR-D-OCR-TESS\",\n        \"OCR-D-OCR-KRAK\",\n        \"OCR-D-OCR-OCRO\",\n        \"OCR-D-OCR-CALA\",\n        \"OCR-D-OCR-ANY\",\n        \"OCR-D-COR-ASV\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-EVAL-CER\"\n      ],\n      \"parameters\": {\n        \"metric\": {\n          \"type\": \"string\",\n          \"enum\": [\"Levenshtein-fast\", \"Levenshtein\", \"NFC\", \"NFKC\", \"historic_latin\"],\n          \"default\": \"Levenshtein-fast\",\n          \"description\": \"Distance metric to calculate and aggregate: `historic_latin` for GT level 1-3, `NFKC` for roughly GT level 2 (but including reduction of `\u017f/s` and superscript numerals etc), `Levenshtein` for GT level 3 (or `Levenshtein-fast` for faster alignment - but using maximum sequence length instead of path length as CER denominator, and without confusion statistics).\"\n        },\n        \"gt_level\": {\n          \"type\": \"number\",\n          \"enum\": [1, 2, 3],\n          \"default\": 1,\n          \"description\": \"When `metric=historic_latin`, normalize and equate at this GT transcription level.\"\n        },\n        \"confusion\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"minimum\": 0,\n          \"default\": 0,\n          \"description\": \"Count edits and show that number of most frequent confusions (non-identity) in the end.\"\n        },\n        \"histogram\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"Aggregate and show mutual character histograms.\"\n        }\n      }\n    },\n    \"ocrd-cor-asv-ann-align\": {\n      \"executable\": \"ocrd-cor-asv-ann-align\",\n      \"categories\": [\n        \"Text recognition and optimization\"\n      ],\n      \"steps\": [\n        \"recognition/post-correction\"\n      ],\n      \"description\": \"Align different textline annotations and pick best\",\n      \"input_file_grp\": [\n        \"OCR-D-GT-SEG-LINE\",\n        \"OCR-D-OCR-TESS\",\n        \"OCR-D-OCR-KRAK\",\n        \"OCR-D-OCR-OCRO\",\n        \"OCR-D-OCR-CALA\",\n        \"OCR-D-OCR-ANY\",\n        \"OCR-D-COR-ASV\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-OCR-MULTI\"\n      ],\n      \"parameters\": {\n        \"method\": {\n          \"type\": \"string\",\n          \"enum\": [\"majority\", \"confidence\", \"combined\"],\n          \"default\": \"majority\",\n          \"description\": \"decide by majority of OCR hypotheses, by highest confidence of OCRs or by a combination thereof\"\n        }\n      }\n    }    \n  }\n}\n",
            "setup.py": "# -*- coding: utf-8 -*-\n\"\"\"\nInstalls:\n    - cor-asv-ann-compare\n    - cor-asv-ann-eval\n    - cor-asv-ann-proc\n    - cor-asv-ann-train\n    - cor-asv-ann-repl\n    - ocrd-cor-asv-ann-process\n    - ocrd-cor-asv-ann-evaluate\n    - ocrd-cor-asv-ann-align\n\"\"\"\nimport codecs\n\nfrom setuptools import setup, find_packages\nimport json\n\ninstall_requires = open('requirements.txt').read().split('\\n')\n\nwith codecs.open('README.md', encoding='utf-8') as f:\n    README = f.read()\n\nwith open('./ocrd-tool.json', 'r') as f:\n    version = json.load(f)['version']\n\nsetup(\n    name='ocrd_cor_asv_ann',\n    version=version,\n    description='sequence-to-sequence translator for noisy channel error correction',\n    long_description=README,\n    long_description_content_type='text/markdown',\n    author='Robert Sachunsky',\n    author_email='sachunsky@informatik.uni-leipzig.de',\n    url='https://github.com/ASVLeipzig/cor-asv-ann',\n    license='Apache License 2.0',\n    packages=find_packages(exclude=('tests', 'docs')),\n    install_requires=install_requires,\n    package_data={\n        '': ['*.json', '*.yml', '*.yaml'],\n    },\n    entry_points={\n        'console_scripts': [\n            'cor-asv-ann-compare=ocrd_cor_asv_ann.scripts.compare:cli',\n            'cor-asv-ann-train=ocrd_cor_asv_ann.scripts.train:cli',\n            'cor-asv-ann-eval=ocrd_cor_asv_ann.scripts.eval:cli',\n            'cor-asv-ann-proc=ocrd_cor_asv_ann.scripts.proc:cli',\n            'cor-asv-ann-repl=ocrd_cor_asv_ann.scripts.repl:cli',\n            'ocrd-cor-asv-ann-process=ocrd_cor_asv_ann.wrapper.transcode:ocrd_cor_asv_ann_process',\n            'ocrd-cor-asv-ann-evaluate=ocrd_cor_asv_ann.wrapper.evaluate:ocrd_cor_asv_ann_evaluate',\n            'ocrd-cor-asv-ann-align=ocrd_cor_asv_ann.wrapper.align:ocrd_cor_asv_ann_align',\n        ]\n    },\n)\n"
        },
        "git": {
            "last_commit": "Thu Mar 24 23:13:53 2022 +0100",
            "latest_tag": "v0.1.12",
            "number_of_commits": "144",
            "url": "https://github.com/ASVLeipzig/cor-asv-ann"
        },
        "name": "cor-asv-ann",
        "ocrd_tool": {
            "git_url": "https://github.com/ASVLeipzig/cor-asv-ann",
            "tools": {
                "ocrd-cor-asv-ann-align": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "Align different textline annotations and pick best",
                    "executable": "ocrd-cor-asv-ann-align",
                    "input_file_grp": [
                        "OCR-D-GT-SEG-LINE",
                        "OCR-D-OCR-TESS",
                        "OCR-D-OCR-KRAK",
                        "OCR-D-OCR-OCRO",
                        "OCR-D-OCR-CALA",
                        "OCR-D-OCR-ANY",
                        "OCR-D-COR-ASV"
                    ],
                    "output_file_grp": [
                        "OCR-D-OCR-MULTI"
                    ],
                    "parameters": {
                        "method": {
                            "default": "majority",
                            "description": "decide by majority of OCR hypotheses, by highest confidence of OCRs or by a combination thereof",
                            "enum": [
                                "majority",
                                "confidence",
                                "combined"
                            ],
                            "type": "string"
                        }
                    },
                    "steps": [
                        "recognition/post-correction"
                    ]
                },
                "ocrd-cor-asv-ann-evaluate": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "Align different textline annotations and compute distance",
                    "executable": "ocrd-cor-asv-ann-evaluate",
                    "input_file_grp": [
                        "OCR-D-GT-SEG-LINE",
                        "OCR-D-OCR-TESS",
                        "OCR-D-OCR-KRAK",
                        "OCR-D-OCR-OCRO",
                        "OCR-D-OCR-CALA",
                        "OCR-D-OCR-ANY",
                        "OCR-D-COR-ASV"
                    ],
                    "output_file_grp": [
                        "OCR-D-EVAL-CER"
                    ],
                    "parameters": {
                        "confusion": {
                            "default": 0,
                            "description": "Count edits and show that number of most frequent confusions (non-identity) in the end.",
                            "format": "integer",
                            "minimum": 0,
                            "type": "number"
                        },
                        "gt_level": {
                            "default": 1,
                            "description": "When `metric=historic_latin`, normalize and equate at this GT transcription level.",
                            "enum": [
                                1,
                                2,
                                3
                            ],
                            "type": "number"
                        },
                        "histogram": {
                            "default": false,
                            "description": "Aggregate and show mutual character histograms.",
                            "type": "boolean"
                        },
                        "metric": {
                            "default": "Levenshtein-fast",
                            "description": "Distance metric to calculate and aggregate: `historic_latin` for GT level 1-3, `NFKC` for roughly GT level 2 (but including reduction of `\u017f/s` and superscript numerals etc), `Levenshtein` for GT level 3 (or `Levenshtein-fast` for faster alignment - but using maximum sequence length instead of path length as CER denominator, and without confusion statistics).",
                            "enum": [
                                "Levenshtein-fast",
                                "Levenshtein",
                                "NFC",
                                "NFKC",
                                "historic_latin"
                            ],
                            "type": "string"
                        }
                    },
                    "steps": [
                        "recognition/evaluation"
                    ]
                },
                "ocrd-cor-asv-ann-process": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "Improve text annotation by character-level encoder-attention-decoder ANN model",
                    "executable": "ocrd-cor-asv-ann-process",
                    "input_file_grp": [
                        "OCR-D-OCR-TESS",
                        "OCR-D-OCR-KRAK",
                        "OCR-D-OCR-OCRO",
                        "OCR-D-OCR-CALA",
                        "OCR-D-OCR-ANY"
                    ],
                    "output_file_grp": [
                        "OCR-D-COR-ASV"
                    ],
                    "parameters": {
                        "charmap": {
                            "default": {},
                            "description": "mapping for input characters before passing to correction; can be used to adapt to character set mismatch between input and model (without relying on underspecification alone)",
                            "type": "object"
                        },
                        "fast_mode": {
                            "default": false,
                            "description": "decode greedy instead of beamed, with batches of parallel lines instead of parallel alternatives; also disables rejection and beam parameters; enable if performance is far more important than quality",
                            "type": "boolean"
                        },
                        "fixed_beam_width": {
                            "default": 15,
                            "description": "maximum number of candidates allowed to enter the beam in each hypothesis; controls the quality/performance trade-off",
                            "format": "integer",
                            "type": "number"
                        },
                        "model_file": {
                            "cacheable": true,
                            "content-type": "application/x-hdf;subtype=bag",
                            "description": "path of h5py weight/config file for model trained with cor-asv-ann-train",
                            "format": "uri",
                            "required": true,
                            "type": "string"
                        },
                        "rejection_threshold": {
                            "default": 0.5,
                            "description": "minimum probability of the candidate corresponding to the input character in each hypothesis during beam search, helps balance precision/recall trade-off; set to 0 to disable rejection (max recall) or 1 to disable correction (max precision)",
                            "format": "float",
                            "type": "number"
                        },
                        "relative_beam_width": {
                            "default": 0.2,
                            "description": "minimum fraction of the best candidate's probability required to enter the beam in each hypothesis; controls the quality/performance trade-off",
                            "format": "float",
                            "type": "number"
                        },
                        "textequiv_level": {
                            "default": "glyph",
                            "description": "PAGE XML hierarchy level to read/write TextEquiv input/output on",
                            "enum": [
                                "line",
                                "word",
                                "glyph"
                            ],
                            "type": "string"
                        }
                    },
                    "steps": [
                        "recognition/post-correction"
                    ]
                }
            },
            "version": "0.1.13"
        },
        "ocrd_tool_validate": "<report valid=\"false\">\n  <error>[tools.ocrd-cor-asv-ann-evaluate.parameters.confusion] Additional properties are not allowed ('minimum' was unexpected)</error>\n  <error>[tools.ocrd-cor-asv-ann-evaluate.steps.0] 'recognition/evaluation' is not one of ['preprocessing/characterization', 'preprocessing/optimization', 'preprocessing/optimization/cropping', 'preprocessing/optimization/deskewing', 'preprocessing/optimization/despeckling', 'preprocessing/optimization/dewarping', 'preprocessing/optimization/binarization', 'preprocessing/optimization/grayscale_normalization', 'recognition/text-recognition', 'recognition/font-identification', 'recognition/post-correction', 'layout/segmentation', 'layout/segmentation/text-nontext', 'layout/segmentation/region', 'layout/segmentation/line', 'layout/segmentation/word', 'layout/segmentation/classification', 'layout/analysis']</error>\n</report>",
        "official": true,
        "org_plus_name": "ASVLeipzig/cor-asv-ann",
        "python": {
            "author": "Robert Sachunsky",
            "author-email": "sachunsky@informatik.uni-leipzig.de",
            "name": "ocrd_cor_asv_ann",
            "pypi": {
                "info": {
                    "author": "Robert Sachunsky",
                    "author_email": "sachunsky@informatik.uni-leipzig.de",
                    "bugtrack_url": null,
                    "classifiers": [],
                    "description": "[![CircleCI](https://circleci.com/gh/ASVLeipzig/cor-asv-ann.svg?style=svg)](https://circleci.com/gh/ASVLeipzig/cor-asv-ann)\n[![PyPI version](https://badge.fury.io/py/ocrd-cor-asv-ann.svg)](https://badge.fury.io/py/ocrd-cor-asv-ann)\n\n# cor-asv-ann\n    OCR post-correction with encoder-attention-decoder LSTMs\n\nContents:\n  * [Introduction](#introduction)\n     * [Architecture](#architecture)\n     * [Multi-OCR input](#multi-ocr-input)\n     * [Decoder feedback](#decoder-feedback)\n     * [Decoder modes](#decoder-modes)\n        * [<em>fast</em>](#fast)\n        * [<em>greedy</em>](#greedy)\n        * [<em>beamed</em>](#default)\n     * [Rejection](#rejection)\n     * [Underspecification and gap](#underspecification-and-gap)\n     * [Training](#training)\n     * [Processing PAGE annotations](#processing-page-annotations)\n     * [Evaluation](#evaluation)\n  * [Installation](#installation)\n  * [Usage](#usage)\n     * [command line interface cor-asv-ann-train](#command-line-interface-cor-asv-ann-train)\n     * [command line interface cor-asv-ann-repl](#command-line-interface-cor-asv-ann-repl)\n     * [command line interface cor-asv-ann-proc](#command-line-interface-cor-asv-ann-proc)\n     * [command line interface cor-asv-ann-eval](#command-line-interface-cor-asv-ann-eval)\n     * [command line interface cor-asv-ann-compare](#command-line-interface-cor-asv-ann-compare)\n     * [OCR-D processor interface ocrd-cor-asv-ann-process](#ocr-d-processor-interface-ocrd-cor-asv-ann-process)\n     * [OCR-D processor interface ocrd-cor-asv-ann-evaluate](#ocr-d-processor-interface-ocrd-cor-asv-ann-evaluate)\n     * [OCR-D processor interface ocrd-cor-asv-ann-align](#ocr-d-processor-interface-ocrd-cor-asv-ann-align)\n  * [Testing](#testing)\n\n\n## Introduction\n\nThis is a tool for automatic OCR _post-correction_ (reducing optical character recognition errors) with recurrent neural networks. It uses sequence-to-sequence transduction on the _character level_ with a model architecture akin to neural machine translation, i.e. a stacked **encoder-decoder** network with attention mechanism. \n\n### Architecture\n\nThe **attention model** always applies to full lines (in a _local, monotonic_ configuration), and uses a linear _additive_ alignment model. (This transfers information between the encoder and decoder hidden layer states, and calculates a _soft alignment_ between input and output characters. It is imperative for character-level processing, because with a simple final-initial transfer, models tend to start \"forgetting\" the input altogether at some point in the line and behave like unconditional LM generators. Local alignment is necessary to prevent snapping back to earlier states during long sequences.)\n\nThe **network architecture** is as follows: \n\n![network architecture](https://asvleipzig.github.io/cor-asv-ann/scheme.svg?sanitize=true \"topology for depth=1 width=3\")\n\n0. The input characters are represented as unit vectors (or as a probability distribution in case of uncertainty and ambiguity). These enter a dense projection layer to be picked up by the encoder.\n1. The bottom hidden layer of the encoder is a bi-directional LSTM. \n2. The next encoder layers are forward LSTMs stacked on top of each other. \n3. The outputs of the top layer enter the attention model as constants (both in raw form to be weighted with the decoder state recurrently, and in a pre-calculated dense projection).\n4. The hidden layers of the decoder are forward LSTMs stacked on top of each other.\n5. The top hidden layer of the decoder has double width and contains the attention model:\n   - It reads the attention constants from 3. and uses the alignment as attention state (to be input as initial and output as final state). \n   - The attention model masks a window around the center of the previous alignment plus 1 character, calculates a new alignment between encoder outputs and current decoder state, and superimposes this with the encoder outputs to yield a context vector.\n   - The context vector is concatenated to the previous layers output and enters the LSTM.\n6. The decoder outputs enter a dense projection and get normalized to a probability distribution (softmax) for each character. (The output projection weights are the transpose of the input projection weights in 0. \u2013 weight tying.)\n7. Depending on the decoder mode, the decoder output is fed back directly (greedy) or indirectly (beamed) into the decoder input. (The first position is fed with a start symbol. Decoding ends on receiving a stop symbol.)\n8. The result is the character sequences corresponding to the argmax probabilities of the decoder outputs.\n\nHL depth and width, as well as many other topology and training options can be configured:\n- residual connections between layers in encoder and decoder?\n- deep bidirectional encoder (with fw/bw cross-summarization)?\n- LM loss/prediction as secondary output (multi-task learning, dual scoring)?\n\n(cf. [training options](#Training))\n\n### Multi-OCR input\n\nnot yet!\n\n### Decoder feedback\n\nOne important empirical finding is that the softmax output (full probability distribution) of the decoder can carry important information for the next state when input directly. This greatly improves the accuracy of both alignments and predictions. (This is in part attributable to exposure bias.) Therefore, instead of following the usual convention of feeding back argmax unit vectors, this implementation feeds back the softmax output directly.\n\nThis can even be done for beam search (which normally splits up the full distribution into a few select explicit candidates, represented as unit vectors) by simply resetting maximum outputs for lower-scoring candidates successively.\n\n### Decoder modes\n\nWhile the _encoder_ can always be run in parallel over a batch of lines and by passing the full sequence of characters in one tensor (padded to the longest line in the batch), which is very efficient with Keras backends like Tensorflow, a **beam-search** _decoder_ requires passing initial/final states character-by-character, with parallelism employed to capture multiple history hypotheses of a single line. However, one can also **greedily** use the best output only for each position (without beam search). This latter option also allows to run in parallel over lines, which is much faster \u2013 consuming up to ten times less CPU time.\n\nThererfore, the backend function can operate the decoder network in either of the following modes:\n\n#### _fast_\n\nDecode greedily, but feeding back the full softmax distribution in batch mode (lines-parallel).\n\n#### _greedy_\n\nDecode greedily, but feeding back the full softmax distribution for each line separately.\n\n#### _default_\n\nDecode beamed, selecting the best output candidates of the best history hypotheses for each line and feeding back their (successively reset) partial softmax distributions in batch mode (hypotheses-parallel). More specifically:\n\n> Start decoder with start-of-sequence, then keep decoding until\n> end-of-sequence is found or output length is way off, repeatedly.\n> Decode by using the best predicted output characters and several next-best\n> alternatives (up to some degradation threshold) as next input.\n> Follow-up on the N best overall candidates (estimated by accumulated\n> score, normalized by length and prospective cost), i.e. do A*-like\n> breadth-first search, with N equal `batch_size`.\n> Pass decoder initial/final states from character to character,\n> for each candidate respectively.\n\n### Rejection\n\nDuring beam search (default decoder mode), whenever the input and output is in good alignment (i.e. the attention model yields an alignment approximately 1 character after their predecessor's alignment on average), it is possible to estimate the current position in the source string. This input character's predicted output score, when smaller than a given (i.e. variable) probability threshold can be clipped to that minimum. This effectively adds a candidate which _rejects_ correction at that position (keeping the input unchanged).\n\n![rejection example](./rejection.png \"soft alignment and probabilities, greedy and beamed (red is the rejection candidate)\")\n\nThat probability is called _rejection threshold_ as a runtime parameter. But while 0.0 _will_ disable rejection completely (i.e. the input hypothesis, if at all identifiable, will keep its predicted score), 1.0 will _not_ disable correction completely (because the input hypothesis might not be found if alignment is too bad). \n\n### Underspecification and gap\n\nInput characters that have not been seen during training must be well-behaved at inference time: They must be represented by a reserved index, and should behave like **neutral/unknown** characters instead of spoiling HL states and predictions in a longer follow-up context. This is achieved by dedicated leave-one-out training and regularization to optimize for interpolation of all known characters. At runtime, the encoder merely shows a warning of the previously unseen character.\n\nThe same device is useful to fill a known **gap** in the input (the only difference being that no warning is shown).\n\nAs an additional facility, characters that are known in advance to not fit well with the model can be mapped prior to correction with the `charmap` parameter.\n\n### Training\n\nPossibilities:\n- incremental training and pretraining (on clean-only text)\n- scheduled sampling (mixed teacher forcing and decoder feedback)\n- LM transfer (initialization of the decoder weights from a language model of the same topology)\n- shallow transfer (initialization of encoder/decoder weights from a model of lesser depth)\n\nFor existing models, cf. [models subrepository](https://github.com/ASVLeipzig/cor-asv-ann-models/).\n\nFor tools and datasets, cf. [data processing subrepository](https://github.com/ASVLeipzig/cor-asv-ann-data-processing/).\n\n### Processing PAGE annotations\n\nWhen applied on [PAGE-XML](https://github.com/PRImA-Research-Lab/PAGE-XML) (as [OCR-D workspace processor](https://ocr-d.github.io/cli), cf. [usage](#ocr-d-processor-interface-ocrd-cor-asv-ann-process)), this component also allows processing below the `TextLine` hierarchy level, i.e. on `Word` or `Glyph` level.\n\nFor that one needs to distribute the line-level transduction onto the lower level elements (keeping their coordinates and other meta-data), while changing Word segmentation if necessary (i.e. merging and splitting tokens). To calculate an optimal **hard alignment** path for characters, we _could_ use the soft alignment scores \u2013 but in practise, the quality of an independent, a-posteriori string alignment (i.e. Needleman-Wunsch algorithm) is better.\n\n### Evaluation\n\nText lines can be compared (by aligning and computing a distance under some metric) across multiple inputs. (This would typically be GT and OCR vs post-correction.) This can be done both on plain text files (`cor-asv-ann-eval`) and PAGE-XML annotations (`ocrd-cor-asv-ann-evaluate`). \n\nDistances are accumulated (as micro-averages) as character error rate (CER) mean and stddev, but only on the character level.\n\nThere are a number of distance metrics available (all but the first operating on grapheme clusters, not mere codepoints, and using the alignment path length as denominator, not just the maximum string length):\n- `Levenshtein-fast`:  \n  simple unweighted edit distance (fastest, standard; GT level 3; no regard for combining sequences; max-length norm)\n- `Levenshtein`:  \n  simple unweighted edit distance (GT level 3)\n- `NFC`:  \n  like `Levenshtein`, but apply Unicode normal form with canonical composition before (i.e. less than GT level 2)\n- `NFKC`:  \n  like `Levenshtein`, but apply Unicode normal form with compatibility composition before (i.e. less than GT level 2, except for `\u017f`, which is already normalized to `s`)\n- `historic_latin`:  \n  like `Levenshtein`, but decomposing non-vocalic ligatures before and treating as equivalent (i.e. zero distances) confusions of certain semantically close characters often found in historic texts (e.g. umlauts with combining letter `e` as in `Wu\u0364\u017fte` instead of  to `W\u00fc\u017fte`, `\u017f` vs `s`, or quotation/citation marks; GT level 1)\n\n...perplexity measurement...\n\n## Installation\n\nBesides [OCR-D](https://github.com/OCR-D/core), this builds on Keras/Tensorflow.\n\nRequired Ubuntu packages:\n\n* Python (`python` or `python3`)\n* pip (`python-pip` or `python3-pip`)\n* venv (`python-venv` or `python3-venv`)\n\nCreate and activate a virtual environment as usual.\n\nTo install Python dependencies:\n\n    make deps\n\nWhich is the equivalent of:\n\n    pip install -r requirements.txt\n\n\nTo install this module, then do:\n\n    make install\n\nWhich is the equivalent of:\n\n    pip install .\n\n\nThe module can use CUDA-enabled GPUs (when sufficiently installed), but can also run on CPU only. Models are always interchangable.\n\n> Note: Models and code are still based on Keras 2.3 / Tensorflow 1.15, which are already end-of-life. You might need an extra venv just for this module to avoid conflicts with other packages. Also, Python >= 3.8 and CUDA toolkit >= 11.0 might not work with prebuilt Tensorflow versions (but see [installation](./INSTALL.md) in that case).\n\n## Usage\n\nThis packages has the following user interfaces:\n\n### command line interface `cor-asv-ann-train`\n\nTo be used with TSV files (tab-delimited source-target lines),\nor pickle dump files (source-target tuple lists).\n\n```\nUsage: cor-asv-ann-train [OPTIONS] [DATA]...\n\n  Train a correction model on GT files.\n\n  Configure a sequence-to-sequence model with the given parameters.\n\n  If given `load_model`, and its configuration matches the current\n  parameters, then load its weights. If given `init_model`, then transfer\n  its mapping and matching layer weights. (Also, if its configuration has 1\n  less hidden layers, then fixate the loaded weights afterwards.) If given\n  `reset_encoder`, re-initialise the encoder weights afterwards.\n\n  Then, regardless, train on the `data` files using early stopping.\n\n  (Supported file formats are:\n   - * (tab-separated values), with source-target lines\n   - *.pkl (pickle dumps), with source-target lines, where source is either\n     - a single string, or\n     - a sequence of character-probability tuples.)\n\n  If no `valdata` were given, split off a random fraction of lines for\n  validation. Otherwise, use only those files for validation.\n\n  If the training has been successful, save the model under `save_model`.\n\nOptions:\n  -m, --save-model FILE      model file for saving\n  --load-model FILE          model file for loading (incremental/pre-training)\n  --init-model FILE          model file for initialisation (transfer from LM\n                             or shallower model)\n  --reset-encoder            reset encoder weights after load/init\n  -w, --width INTEGER RANGE  number of nodes per hidden layer\n  -d, --depth INTEGER RANGE  number of stacked hidden layers\n  -v, --valdata FILE         file to use for validation (instead of random\n                             split)\n  -h, --help                 Show this message and exit.\n```\n\n### command line interface `cor-asv-ann-proc`\n\nTo be used with plain-text files, TSV files (tab-delimited source-target lines\n\u2013 where target is ignored), or pickle dump files (source-target tuple lists \u2013\nwhere target is ignored).\n\n```\nUsage: cor-asv-ann-proc [OPTIONS] [DATA]...\n\n  Apply a correction model on GT or text files.\n\n  Load a sequence-to-sequence model from the given path.\n\n  Then open the `data` files, (ignoring target side strings, if any) and\n  apply the model to its (source side) strings in batches, accounting for\n  input file names line by line.\n\n  (Supported file formats are:\n   - * (plain-text), with source lines,\n   - * (tab-separated values), with source-target lines,\n   - *.pkl (pickle dumps), with source-target lines, where source is either\n     - a single string, or\n     - a sequence of character-probability tuples.)\n\n  For each input file, open a new output file derived from its file name by\n  removing `old_suffix` (or the last extension) and appending `new_suffix`.\n  Write the resulting lines to that output file.\n\nOptions:\n  -m, --load-model FILE        model file to load\n  -f, --fast                   only decode greedily\n  -r, --rejection FLOAT RANGE  probability of the input characters in all\n                               hypotheses (set 0 to use raw predictions)\n  -C, --charmap TEXT           mapping for input characters before passing to\n                               correction; can be used to adapt to character\n                               set mismatch between input and model (without\n                               relying on underspecification alone)\n  -S, --old-suffix TEXT        Suffix to remove from input files for output\n                               files\n  -s, --new-suffix TEXT        Suffix to append to input files for output\n                               files\n  -h, --help                   Show this message and exit.\n```\n\n### command line interface `cor-asv-ann-eval`\n\nTo be used with TSV files (tab-delimited source-target lines),\nor pickle dump files (source-target tuple lists).\n\n```\nUsage: cor-asv-ann-eval [OPTIONS] [DATA]...\n\n  Evaluate a correction model on GT files.\n\n  Load a sequence-to-sequence model from the given path.\n\n  Then apply on the file paths `data`, comparing predictions (both greedy\n  and beamed) with GT target, and measuring error rates.\n\n  (Supported file formats are:\n   - * (tab-separated values), with source-target lines\n   - *.pkl (pickle dumps), with source-target lines, where source is either\n     - a single string, or\n     - a sequence of character-probability tuples.)\n\nOptions:\n  -m, --load-model FILE           model file to load\n  -f, --fast                      only decode greedily\n  -r, --rejection FLOAT RANGE     probability of the input characters in all\n                                  hypotheses (set 0 to use raw predictions)\n  -n, --normalization [Levenshtein|NFC|NFKC|historic_latin]\n                                  normalize character sequences before\n                                  alignment/comparison (set Levenshtein for\n                                  none)\n  -C, --charmap TEXT              mapping for input characters before passing\n                                  to correction; can be used to adapt to\n                                  character set mismatch between input and\n                                  model (without relying on underspecification\n                                  alone)\n  -l, --gt-level INTEGER RANGE    GT transcription level to use for\n                                  historic_latin normlization (1: strongest,\n                                  3: none)\n  -c, --confusion INTEGER RANGE   show this number of most frequent (non-\n                                  identity) edits (set 0 for none)\n  -H, --histogram                 aggregate and compare character histograms\n  -h, --help                      Show this message and exit.\n```\n\n### command line interface `cor-asv-ann-compare`\n\nTo be used with PAGE-XML files, plain-text files, or plain-text file lists\n(of PAGE-XML or plain-text files), 1 for GT and N for predictions (OCR or COR).\n\n```\nUsage: cor-asv-ann-compare [OPTIONS] GT_FILE [OCR_FILES]...\n\n  Compare text lines by aligning and computing the textual distance and\n  character error rate.\n\n  This compares 1:n given PAGE-XML or plain text files.\n\n  If `--file-lists` is given and files are plain text, then they will be\n  interpreted as (newline-separated) lists of path names for single-line\n  text files (for Ocropus convention).\n\n  Writes a JSON report file to `--output-file`. (No error aggregation across\n  files in this CLI.)\n\nOptions:\n  -o, --output-file FILE          path name of generated report (default:\n                                  stdout)\n  -n, --normalization [Levenshtein-fast|Levenshtein|NFC|NFKC|historic_latin]\n                                  normalize character sequences before\n                                  alignment/comparison (set Levenshtein for\n                                  none)\n  -l, --gt-level INTEGER RANGE    GT transcription level to use for\n                                  historic_latin normlization (1: strongest,\n                                  3: none)\n  -c, --confusion INTEGER RANGE   show this number of most frequent (non-\n                                  identity) edits (set 0 for none)\n  -H, --histogram                 aggregate and compare character histograms\n  -F, --file-lists                interpret files as plain text files with one\n                                  file path per line\n  -h, --help                      Show this message and exit.\n```\n\n\n### command line interface `cor-asv-ann-repl`\n\nThis tool provides a Python read-eval-print-loop for interactive usage (including some visualization):\n\n```\nUsage: cor-asv-ann-repl [OPTIONS]\n\n  Try a correction model interactively.\n\n  Import Sequence2Sequence, instantiate `s2s`, then enter REPL. Also,\n  provide function `transcode_line` for single line correction.\n\nOptions:\n  --help  Show this message and exit.\n```\n\nHere is what you see after starting up the interpreter:\n```\nusage example:\n>>> s2s.load_config('model')\n>>> s2s.configure()\n>>> s2s.load_weights('model')\n>>> s2s.evaluate(['filename'])\n\n>>> transcode_line('hello world!')\nnow entering REPL...\n\nPython 3.6.7 (default, Oct 22 2018, 11:32:17) \n[GCC 8.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n```\n\n\n### [OCR-D processor](https://ocr-d.de/en/spec/cli) interface `ocrd-cor-asv-ann-process`\n\nTo be used with [PAGE-XML](https://github.com/PRImA-Research-Lab/PAGE-XML) documents in an [OCR-D](https://ocr-d.de/about/) annotation workflow. \n\nInput could be anything with a textual annotation (`TextEquiv` on the given `textequiv_level`). \n\nPretrained model files are contained in the [models subrepository](https://github.com/ASVLeipzig/cor-asv-ann-models/). At runtime, you can use both absolute and relative paths for model files. The latter are searched for in the installation directory, under the path in the environment variable `CORASVANN_DATA` (if given), and in the default paths of the OCR-D resource manager (i.e. you can do `ocrd resmgr download -na ocrd-cor-asv-ann-process https://github.com/ASVLeipzig/cor-asv-ann-models/blob/master/s2s.dta19.Fraktur4.d2.w0512.adam.attention.stateless.variational-dropout.char.pretrained+retrained-conf.h5` and then `ocrd resmgr list-installed -e ocrd-cor-asv-ann-process` tells you that `s2s.dta19.Fraktur4.d2.w0512.adam.attention.stateless.variational-dropout.char.pretrained+retrained-conf.h5` will resolve as `model_file`).\n\n\n```\nUsage: ocrd-cor-asv-ann-process [OPTIONS]\n\n  Improve text annotation by character-level encoder-attention-decoder ANN model\n\n  > Perform OCR post-correction with encoder-attention-decoder ANN on\n  > the workspace.\n\n  > Open and deserialise PAGE input files, then iterate over the element\n  > hierarchy down to the requested `textequiv_level`, making sequences\n  > of TextEquiv objects as lists of lines. Concatenate their string\n  > values, obeying rules of implicit whitespace, and map the string\n  > positions where the objects start.\n\n  > Next, transcode the input lines into output lines in parallel, and\n  > use the retrieved soft alignment scores to calculate hard alignment\n  > paths between input and output string via Viterbi decoding. Then use\n  > those to map back the start positions and overwrite each TextEquiv\n  > with its new content, paying special attention to whitespace:\n\n  > Distribute edits such that whitespace objects cannot become more\n  > than whitespace (or be deleted) and that non-whitespace objects must\n  > not start or end with whitespace (but may contain new whitespace in\n  > the middle).\n\n  > Subsequently, unless processing on the `line` level, make the Word\n  > segmentation consistent with that result again: merge around deleted\n  > whitespace tokens and split at whitespace inside non-whitespace\n  > tokens.\n\n  > Finally, make the levels above `textequiv_level` consistent with\n  > that textual result (via concatenation joined by whitespace).\n\n  > Produce new output files by serialising the resulting hierarchy.\n\nOptions:\n  -I, --input-file-grp USE        File group(s) used as input\n  -O, --output-file-grp USE       File group(s) used as output\n  -g, --page-id ID                Physical page ID(s) to process\n  --overwrite                     Remove existing output pages/images\n                                  (with --page-id, remove only those)\n  -p, --parameter JSON-PATH       Parameters, either verbatim JSON string\n                                  or JSON file path\n  -P, --param-override KEY VAL    Override a single JSON object key-value pair,\n                                  taking precedence over --parameter\n  -m, --mets URL-PATH             URL or file path of METS to process\n  -w, --working-dir PATH          Working directory of local workspace\n  -l, --log-level [OFF|ERROR|WARN|INFO|DEBUG|TRACE]\n                                  Log level\n  -C, --show-resource RESNAME     Dump the content of processor resource RESNAME\n  -L, --list-resources            List names of processor resources\n  -J, --dump-json                 Dump tool description as JSON and exit\n  -h, --help                      This help message\n  -V, --version                   Show version\n\nParameters:\n   \"model_file\" [string - REQUIRED]\n    path of h5py weight/config file for model trained with cor-asv-ann-\n    train\n   \"textequiv_level\" [string - \"glyph\"]\n    PAGE XML hierarchy level to read/write TextEquiv input/output on\n    Possible values: [\"line\", \"word\", \"glyph\"]\n   \"charmap\" [object - {}]\n    mapping for input characters before passing to correction; can be\n    used to adapt to character set mismatch between input and model\n    (without relying on underspecification alone)\n   \"rejection_threshold\" [number - 0.5]\n    minimum probability of the candidate corresponding to the input\n    character in each hypothesis during beam search, helps balance\n    precision/recall trade-off; set to 0 to disable rejection (max\n    recall) or 1 to disable correction (max precision)\n   \"relative_beam_width\" [number - 0.2]\n    minimum fraction of the best candidate's probability required to\n    enter the beam in each hypothesis; controls the quality/performance\n    trade-off\n   \"fixed_beam_width\" [number - 15]\n    maximum number of candidates allowed to enter the beam in each\n    hypothesis; controls the quality/performance trade-off\n   \"fast_mode\" [boolean - false]\n    decode greedy instead of beamed, with batches of parallel lines\n    instead of parallel alternatives; also disables rejection and beam\n    parameters; enable if performance is far more important than quality\n```\n\n### [OCR-D processor](https://ocr-d.de/en/spec/cli) interface `ocrd-cor-asv-ann-evaluate`\n\nTo be used with [PAGE-XML](https://github.com/PRImA-Research-Lab/PAGE-XML) documents in an [OCR-D](https://ocr-d.de/about/) annotation workflow.\n\nInputs could be anything with a textual annotation (`TextEquiv` on the line level), but at least 2. The first in the list of input file groups will be regarded as reference/GT.\n\nThere are various evaluation [metrics](#Evaluation) available.\n\nThe tool can also aggregate and show the most frequent character confusions.\n\n```\nUsage: ocrd-cor-asv-ann-evaluate [OPTIONS]\n\n  Align different textline annotations and compute distance\n\n  > Align textlines of multiple file groups and calculate distances.\n\n  > Find files in all input file groups of the workspace for the same\n  > pageIds. The first file group serves as reference annotation (ground\n  > truth).\n\n  > Open and deserialise PAGE input files, then iterate over the element\n  > hierarchy down to the TextLine level, looking at each first\n  > TextEquiv. Align character sequences in all pairs of lines for the\n  > same TextLine IDs, and calculate the distances using the error\n  > metric `metric`. Accumulate distances and sequence lengths per file\n  > group globally and per file, and show each fraction as a CER rate in\n  > the log.\n\nOptions:\n  -I, --input-file-grp USE        File group(s) used as input\n  -O, --output-file-grp USE       File group(s) used as output\n  -g, --page-id ID                Physical page ID(s) to process\n  --overwrite                     Remove existing output pages/images\n                                  (with --page-id, remove only those)\n  -p, --parameter JSON-PATH       Parameters, either verbatim JSON string\n                                  or JSON file path\n  -P, --param-override KEY VAL    Override a single JSON object key-value pair,\n                                  taking precedence over --parameter\n  -m, --mets URL-PATH             URL or file path of METS to process\n  -w, --working-dir PATH          Working directory of local workspace\n  -l, --log-level [OFF|ERROR|WARN|INFO|DEBUG|TRACE]\n                                  Log level\n  -C, --show-resource RESNAME     Dump the content of processor resource RESNAME\n  -L, --list-resources            List names of processor resources\n  -J, --dump-json                 Dump tool description as JSON and exit\n  -h, --help                      This help message\n  -V, --version                   Show version\n\nParameters:\n   \"metric\" [string - \"Levenshtein-fast\"]\n    Distance metric to calculate and aggregate: `historic_latin` for GT\n    level 1-3, `NFKC` for roughly GT level 2 (but including reduction of\n    `\u017f/s` and superscript numerals etc), `Levenshtein` for GT level 3\n    (or `Levenshtein-fast` for faster alignment but using maximum\n    sequence length instead of path length as CER denominator).\n    Possible values: [\"Levenshtein-fast\", \"Levenshtein\", \"NFC\", \"NFKC\",\n    \"historic_latin\"]\n   \"gt_level\" [number - 1]\n    When `metric=historic_latin`, normalize and equate at this GT\n    transcription level.\n    Possible values: [1, 2, 3]\n   \"confusion\" [number - 0]\n    Count edits and show that number of most frequent confusions (non-\n    identity) in the end.\n   \"histogram\" [boolean - false]\n    Aggregate and show mutual character histograms.\n```\n\nThe output file group for the evaluation tool will contain a JSON report of the CER distances of each text line per page, and an aggregated JSON report with the totals and the confusion table. It also makes extensive use of logging.\n\n### [OCR-D processor](https://ocr-d.de/en/spec/cli) interface `ocrd-cor-asv-ann-align`\n\nTo be used with [PAGE-XML](https://github.com/PRImA-Research-Lab/PAGE-XML) documents in an [OCR-D](https://ocr-d.de/about/) annotation workflow.\n\nInputs could be anything with a textual annotation (`TextEquiv` on the line level), but at least 2 (or 3 for `method=majority`). No input will be priviledged regarding text content, but the first input fileGrp will serve as the base annotation for the output.\n\n```\nUsage: ocrd-cor-asv-ann-align [OPTIONS]\n\n  Align different textline annotations and pick best\n\n  > Align textlines of multiple file groups and choose the 'best'\n  > characters.\n\n  > Find files in all input file groups of the workspace for the same\n  > pageIds.\n\n  > Open and deserialise PAGE input files, then iterate over the element\n  > hierarchy down to the TextLine level, looking at each first\n  > TextEquiv. Align character sequences in all pairs of lines for the\n  > same TextLine IDs, and for each position pick the 'best' character\n  > hypothesis among the inputs.\n\n  > Choice depends on ``method``:\n  > - if `majority`, then use a majority rule over the inputs\n  >   (requires at least 3 input fileGrps),\n  > - if `confidence`, then use the candidate with the highest confidence\n  >   (requires input with per-character or per-line confidence annotations),\n  > - if `combined`, then try a heuristic combination of both approaches\n  >   (requires both conditions).\n\n  > Then concatenate those character choices to new TextLines (without\n  > segmentation at lower levels).\n\n  > Finally, make the parent regions (higher levels) consistent with\n  > that textual result (via concatenation joined by whitespace).\n\n  > Produce new output files by serialising the resulting hierarchy.\n\nOptions:\n  -I, --input-file-grp USE        File group(s) used as input\n  -O, --output-file-grp USE       File group(s) used as output\n  -g, --page-id ID                Physical page ID(s) to process\n  --overwrite                     Remove existing output pages/images\n                                  (with --page-id, remove only those)\n  -p, --parameter JSON-PATH       Parameters, either verbatim JSON string\n                                  or JSON file path\n  -P, --param-override KEY VAL    Override a single JSON object key-value pair,\n                                  taking precedence over --parameter\n  -m, --mets URL-PATH             URL or file path of METS to process\n  -w, --working-dir PATH          Working directory of local workspace\n  -l, --log-level [OFF|ERROR|WARN|INFO|DEBUG|TRACE]\n                                  Log level\n  -C, --show-resource RESNAME     Dump the content of processor resource RESNAME\n  -L, --list-resources            List names of processor resources\n  -J, --dump-json                 Dump tool description as JSON and exit\n  -h, --help                      This help message\n  -V, --version                   Show version\n\nParameters:\n   \"method\" [string - \"majority\"]\n    decide by majority of OCR hypotheses, by highest confidence of OCRs\n    or by a combination thereof\n    Possible values: [\"majority\", \"confidence\", \"combined\"]\n```\n\n## Testing\n\nnot yet!\n...\n\n\n",
                    "description_content_type": "text/markdown",
                    "docs_url": null,
                    "download_url": "",
                    "downloads": {
                        "last_day": -1,
                        "last_month": -1,
                        "last_week": -1
                    },
                    "home_page": "https://github.com/ASVLeipzig/cor-asv-ann",
                    "keywords": "",
                    "license": "Apache License 2.0",
                    "maintainer": "",
                    "maintainer_email": "",
                    "name": "ocrd-cor-asv-ann",
                    "package_url": "https://pypi.org/project/ocrd-cor-asv-ann/",
                    "platform": "",
                    "project_url": "https://pypi.org/project/ocrd-cor-asv-ann/",
                    "project_urls": {
                        "Homepage": "https://github.com/ASVLeipzig/cor-asv-ann"
                    },
                    "release_url": "https://pypi.org/project/ocrd-cor-asv-ann/0.1.13/",
                    "requires_dist": [
                        "ocrd (>=2.22.0)",
                        "click",
                        "keras (==2.3.*)",
                        "numpy",
                        "tensorflow-gpu (==1.15.*)",
                        "h5py (<3.0.0)",
                        "editdistance",
                        "matplotlib"
                    ],
                    "requires_python": "",
                    "summary": "sequence-to-sequence translator for noisy channel error correction",
                    "version": "0.1.13",
                    "yanked": false,
                    "yanked_reason": null
                },
                "last_serial": 12370440,
                "releases": {
                    "0.1.10": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "8b7751e10b4bb7705bce8a9a17b02d80",
                                "sha256": "9cd3499164ffc87e3a6796d943100ac0125d69563dee34af454fb16c02a558dd"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.10-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "8b7751e10b4bb7705bce8a9a17b02d80",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 81566,
                            "upload_time": "2021-05-20T16:40:51",
                            "upload_time_iso_8601": "2021-05-20T16:40:51.268848Z",
                            "url": "https://files.pythonhosted.org/packages/65/94/94195f6dbd29f3c5c7d0de25308af60cfe09be63a2eb7b3df07ab2c59a22/ocrd_cor_asv_ann-0.1.10-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "97dd6c4da542f640236a83b1f6fbad98",
                                "sha256": "ebd79df84bfa23f23790256ac5b14632913de79ae0c3c344d9bb0c50db9bb3fa"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.10.tar.gz",
                            "has_sig": false,
                            "md5_digest": "97dd6c4da542f640236a83b1f6fbad98",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 75296,
                            "upload_time": "2021-05-20T16:40:53",
                            "upload_time_iso_8601": "2021-05-20T16:40:53.490396Z",
                            "url": "https://files.pythonhosted.org/packages/f2/56/a1251e1559c1d451c0f52ed3628a91ab1c619a20c8ad7c1ad166ae53047c/ocrd_cor_asv_ann-0.1.10.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.11": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "d893375168f4c20b2c1129b2d18f8072",
                                "sha256": "4e05582dd6b9132a1fda8790ab76374423e715002acc4e7276baf020d2879f5b"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.11-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "d893375168f4c20b2c1129b2d18f8072",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 83160,
                            "upload_time": "2021-05-31T12:17:22",
                            "upload_time_iso_8601": "2021-05-31T12:17:22.441244Z",
                            "url": "https://files.pythonhosted.org/packages/db/11/ea3fea74a8551e386ad858e15bb69a3754001bcaf4d44c7df1a33feeb41e/ocrd_cor_asv_ann-0.1.11-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "f75e6a74deaecbee4c7fa010e19fe0c7",
                                "sha256": "d55de3bfbbd46eecbb6927a44a834d197cac6330e626e4223d8bc9718784b61c"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.11.tar.gz",
                            "has_sig": false,
                            "md5_digest": "f75e6a74deaecbee4c7fa010e19fe0c7",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 83347,
                            "upload_time": "2021-05-31T12:17:24",
                            "upload_time_iso_8601": "2021-05-31T12:17:24.470782Z",
                            "url": "https://files.pythonhosted.org/packages/76/59/593b3bb847929246adc0664fdfd6c3ce5d2b12cbeffc08f44cdc77d7f7ac/ocrd_cor_asv_ann-0.1.11.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.12": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "87b03f942943139f963520bd02915289",
                                "sha256": "f85fe010b14f37518e3a72703b9da87c669b2657388079ef6517fbfee6f4b6b7"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.12-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "87b03f942943139f963520bd02915289",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 84095,
                            "upload_time": "2021-06-23T23:10:45",
                            "upload_time_iso_8601": "2021-06-23T23:10:45.878327Z",
                            "url": "https://files.pythonhosted.org/packages/69/fd/b8efd7b0639e649ab4e2ad90932271892657d41efb5e24a3b8f9639a6e3e/ocrd_cor_asv_ann-0.1.12-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "676675c5345021c5e84f1b3dc00c98fe",
                                "sha256": "266e6d9780ea3ab2b07eaffb347b9d171ba99019c0890275b638ec85d7e2e09f"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.12.tar.gz",
                            "has_sig": false,
                            "md5_digest": "676675c5345021c5e84f1b3dc00c98fe",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 88030,
                            "upload_time": "2021-06-23T23:10:47",
                            "upload_time_iso_8601": "2021-06-23T23:10:47.943801Z",
                            "url": "https://files.pythonhosted.org/packages/98/9b/53869e14661488a1572fa6ea028e4e1a244c8019544627aba9b149b9a3ea/ocrd_cor_asv_ann-0.1.12.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.13": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "6cab105a21a6ba5a050e899f0580286a",
                                "sha256": "f516dc6ed1af37ed197a636caca87f155d2bf4c71b7467294d9640fbc87cdad4"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.13-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "6cab105a21a6ba5a050e899f0580286a",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 92564,
                            "upload_time": "2021-12-21T12:18:30",
                            "upload_time_iso_8601": "2021-12-21T12:18:30.920936Z",
                            "url": "https://files.pythonhosted.org/packages/bb/73/f5e80c2fc7a718e52c29d8be2b819c224eda833354f97a678aae33bb1207/ocrd_cor_asv_ann-0.1.13-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "83fbcd8744c181182014a42ef2a389f8",
                                "sha256": "b5cc2b24458e82d2e7b140a1177b6d7c755562c9d9f31f27048e1effa90b88ad"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.13.tar.gz",
                            "has_sig": false,
                            "md5_digest": "83fbcd8744c181182014a42ef2a389f8",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 98077,
                            "upload_time": "2021-12-21T12:18:33",
                            "upload_time_iso_8601": "2021-12-21T12:18:33.195484Z",
                            "url": "https://files.pythonhosted.org/packages/b3/37/e966bee44aedc2019baa1bbc3fde3be390775eb826d482eed73fd4082c8d/ocrd_cor_asv_ann-0.1.13.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.2": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "af3ad3baf28e72b896b83470a267fef0",
                                "sha256": "4dc1d1aa49be07730ca788f2ce060f43f9e266badf4f30dbd2faa08f608fc912"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.2-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "af3ad3baf28e72b896b83470a267fef0",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 74568,
                            "upload_time": "2020-02-10T23:42:06",
                            "upload_time_iso_8601": "2020-02-10T23:42:06.515439Z",
                            "url": "https://files.pythonhosted.org/packages/65/92/3c23e6ec93846cb3c7da6c789ebf4f861dfe7c7a5c75b98d55f02ece3443/ocrd_cor_asv_ann-0.1.2-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "76f75131ba098c9807c65ea5c5a69200",
                                "sha256": "c10bbd76c64d4f2e155b220a8ecd58dbed9fd8e040b8763d176d139215e02569"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.2.tar.gz",
                            "has_sig": false,
                            "md5_digest": "76f75131ba098c9807c65ea5c5a69200",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 66983,
                            "upload_time": "2020-02-10T23:42:09",
                            "upload_time_iso_8601": "2020-02-10T23:42:09.311626Z",
                            "url": "https://files.pythonhosted.org/packages/8e/28/3db473a5a1ad65930633f7fb05e9519ca0fc971035b7488ddec1f5787837/ocrd_cor_asv_ann-0.1.2.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.3": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "bbbf7133609da87137b356f48d31498a",
                                "sha256": "7e001009c102e4183951f44f8d546af882008e3e03076691aa65718055a660b8"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.3-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "bbbf7133609da87137b356f48d31498a",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 76302,
                            "upload_time": "2020-08-22T12:48:37",
                            "upload_time_iso_8601": "2020-08-22T12:48:37.989141Z",
                            "url": "https://files.pythonhosted.org/packages/10/d8/2693513d9048d18f4ad8fe25f9ba27dab589ba1da41c1f0c3e350fdefee6/ocrd_cor_asv_ann-0.1.3-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "dbe9a2c03cbcac0df4a51fea7c2dfa82",
                                "sha256": "7183b8e44a784546c6b8a75ff15326fdd6fb6f337b442a28ffb6a6e7f86dabc6"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.3.tar.gz",
                            "has_sig": false,
                            "md5_digest": "dbe9a2c03cbcac0df4a51fea7c2dfa82",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 70782,
                            "upload_time": "2020-08-22T12:48:39",
                            "upload_time_iso_8601": "2020-08-22T12:48:39.751730Z",
                            "url": "https://files.pythonhosted.org/packages/13/fc/ad6e66bf574121908bc058dc77e833293a456c0305a806ab9c95c8f7a29e/ocrd_cor_asv_ann-0.1.3.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.4": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "215e19962eb17f41021bc30b82de0696",
                                "sha256": "e6071794ef90cf71865f4f5a150e680ac0fbc7cfc9bbcd834e29ba0c9a4816d4"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.4-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "215e19962eb17f41021bc30b82de0696",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 76148,
                            "upload_time": "2020-08-22T20:55:55",
                            "upload_time_iso_8601": "2020-08-22T20:55:55.967479Z",
                            "url": "https://files.pythonhosted.org/packages/9a/8d/b72a92f8efab91a8de5d83b4ba076be95d3e948f0487b28d9ee71f637364/ocrd_cor_asv_ann-0.1.4-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "965a1d7ca6a22fb0e4c84e9410a124e0",
                                "sha256": "32023caf5db51aa9e98e9e16d1ce0216cda41c5ec1c235c26fb15fddf021ef21"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.4.tar.gz",
                            "has_sig": false,
                            "md5_digest": "965a1d7ca6a22fb0e4c84e9410a124e0",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 70637,
                            "upload_time": "2020-08-22T20:55:57",
                            "upload_time_iso_8601": "2020-08-22T20:55:57.865926Z",
                            "url": "https://files.pythonhosted.org/packages/e9/f9/b3a591f635be850d644b9e31acce65f1d0ba6651bdf297464bfd25d07691/ocrd_cor_asv_ann-0.1.4.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.5": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "8539d5a9ebceb5871f96ef38b849a5ac",
                                "sha256": "173d65f3be3e6b52a200bcaf33bac53e2d6bfbfe151975e0094781a846c37a4c"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.5-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "8539d5a9ebceb5871f96ef38b849a5ac",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 76170,
                            "upload_time": "2020-10-22T07:31:11",
                            "upload_time_iso_8601": "2020-10-22T07:31:11.015192Z",
                            "url": "https://files.pythonhosted.org/packages/6c/ab/235e1c540bee94b7831086ebb92b68104ef5daae59e7a1038463711aec76/ocrd_cor_asv_ann-0.1.5-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "6da5e11d54ba25a67ab7685dabb466ae",
                                "sha256": "4f34299136a2f47b2be1f3b5e5b2d26c0ab9a686f3bde2728eba3118e02bcc96"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.5.tar.gz",
                            "has_sig": false,
                            "md5_digest": "6da5e11d54ba25a67ab7685dabb466ae",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 70660,
                            "upload_time": "2020-10-22T07:31:13",
                            "upload_time_iso_8601": "2020-10-22T07:31:13.264087Z",
                            "url": "https://files.pythonhosted.org/packages/5c/47/cd74f0eefdf8d41fcea9b242b10700a80ab100ed9d2f996076b13ead6775/ocrd_cor_asv_ann-0.1.5.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.6": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "244fcdc2f717079af4897d0f7992a461",
                                "sha256": "0db0fb146b72a4b66376e7b16022f2dbf9a2943411edb2b2bcb35773353d3639"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.6-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "244fcdc2f717079af4897d0f7992a461",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 76033,
                            "upload_time": "2020-10-22T07:32:14",
                            "upload_time_iso_8601": "2020-10-22T07:32:14.601432Z",
                            "url": "https://files.pythonhosted.org/packages/3e/c4/bd6e9f55511084f8a033968b58e1b9e405e3a8f8398fd3457008c53b5e79/ocrd_cor_asv_ann-0.1.6-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "5ab3ebd0eb69a6909091dcbff34ac03e",
                                "sha256": "be38445d1167611a86c7b1ac84f2da5e9c8a4d4fa94746197f73aa4797eaaf75"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.6.tar.gz",
                            "has_sig": false,
                            "md5_digest": "5ab3ebd0eb69a6909091dcbff34ac03e",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 70557,
                            "upload_time": "2020-10-22T07:32:16",
                            "upload_time_iso_8601": "2020-10-22T07:32:16.450017Z",
                            "url": "https://files.pythonhosted.org/packages/ae/21/9e5c6f654519d13845bfb261483497d53fc7b0720c98f816c92196874ae1/ocrd_cor_asv_ann-0.1.6.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.7": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "b44d45a6b9ada4dabad6f0885b7af55e",
                                "sha256": "d8340d9b0a11d1a21f3795cc8a7503c37c307cfdc11916a3f1ff21e1927c8887"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.7-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "b44d45a6b9ada4dabad6f0885b7af55e",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 79130,
                            "upload_time": "2021-05-12T00:46:50",
                            "upload_time_iso_8601": "2021-05-12T00:46:50.129346Z",
                            "url": "https://files.pythonhosted.org/packages/9d/c3/98965170e2253559014e493bda315db3bc97e46d44e7fd3bbe833905815a/ocrd_cor_asv_ann-0.1.7-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "a7c254c5cf7d2b74bc04c5d87e2fd7d2",
                                "sha256": "0d7d0e7da42f72611325d41f632bb94b5c6d7d5844f572b6d19ec9f67270c85a"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.7.tar.gz",
                            "has_sig": false,
                            "md5_digest": "a7c254c5cf7d2b74bc04c5d87e2fd7d2",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 73047,
                            "upload_time": "2021-05-12T00:46:52",
                            "upload_time_iso_8601": "2021-05-12T00:46:52.406081Z",
                            "url": "https://files.pythonhosted.org/packages/e9/2f/13b23d44727d92224bf87db7be48d5b38b8f1a75db88e3dff2f4ef17bf93/ocrd_cor_asv_ann-0.1.7.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.8": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "2f23cf050a810eb4b227091f9ceba674",
                                "sha256": "d2dd35d211625c9ae3bf24c9cdd9af42d582ca081455d4edb78885726dd36b18"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.8-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "2f23cf050a810eb4b227091f9ceba674",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 80930,
                            "upload_time": "2021-05-19T10:03:32",
                            "upload_time_iso_8601": "2021-05-19T10:03:32.431846Z",
                            "url": "https://files.pythonhosted.org/packages/70/12/46e1945b68fa77b34f2206b885685d1808000f8db0dbafafc95c8915927c/ocrd_cor_asv_ann-0.1.8-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "468f02efca38e364b0a2df907b3f073c",
                                "sha256": "2ed1ff704fa16d2098dc20c76581bf51f3ed090d593378fe576819fbb7cd8771"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.8.tar.gz",
                            "has_sig": false,
                            "md5_digest": "468f02efca38e364b0a2df907b3f073c",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 74879,
                            "upload_time": "2021-05-19T10:03:34",
                            "upload_time_iso_8601": "2021-05-19T10:03:34.637588Z",
                            "url": "https://files.pythonhosted.org/packages/1c/57/9523891d3e03f9b9fd6377475b3caedf3f68e271d4e8bc436ce9cf8896ea/ocrd_cor_asv_ann-0.1.8.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.9": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "a763cafea97dc440448d158277a94fe5",
                                "sha256": "930cea2320ddca3b0363f8d28d2d1187ed0b8532547818edbeb07991cb3ac9bd"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.9-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "a763cafea97dc440448d158277a94fe5",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 81558,
                            "upload_time": "2021-05-20T09:50:39",
                            "upload_time_iso_8601": "2021-05-20T09:50:39.610714Z",
                            "url": "https://files.pythonhosted.org/packages/17/15/214ff1824004992b0484fa6f9d22b19653ddb28b2cbf219fb3f1b52f2d53/ocrd_cor_asv_ann-0.1.9-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "763b4536cb7b922fd99a59cea66f58cf",
                                "sha256": "8c62197303ecc7cfb80ec4d67a47517ebe264564767a42972f990cbbc1b12728"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cor_asv_ann-0.1.9.tar.gz",
                            "has_sig": false,
                            "md5_digest": "763b4536cb7b922fd99a59cea66f58cf",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 75291,
                            "upload_time": "2021-05-20T09:50:41",
                            "upload_time_iso_8601": "2021-05-20T09:50:41.803858Z",
                            "url": "https://files.pythonhosted.org/packages/70/2d/c2cd1390ffa91a2bd2f32ac713c11c5f431f7fb1caf585f22ca80d744c1c/ocrd_cor_asv_ann-0.1.9.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ]
                },
                "urls": [
                    {
                        "comment_text": "",
                        "digests": {
                            "md5": "6cab105a21a6ba5a050e899f0580286a",
                            "sha256": "f516dc6ed1af37ed197a636caca87f155d2bf4c71b7467294d9640fbc87cdad4"
                        },
                        "downloads": -1,
                        "filename": "ocrd_cor_asv_ann-0.1.13-py3-none-any.whl",
                        "has_sig": false,
                        "md5_digest": "6cab105a21a6ba5a050e899f0580286a",
                        "packagetype": "bdist_wheel",
                        "python_version": "py3",
                        "requires_python": null,
                        "size": 92564,
                        "upload_time": "2021-12-21T12:18:30",
                        "upload_time_iso_8601": "2021-12-21T12:18:30.920936Z",
                        "url": "https://files.pythonhosted.org/packages/bb/73/f5e80c2fc7a718e52c29d8be2b819c224eda833354f97a678aae33bb1207/ocrd_cor_asv_ann-0.1.13-py3-none-any.whl",
                        "yanked": false,
                        "yanked_reason": null
                    },
                    {
                        "comment_text": "",
                        "digests": {
                            "md5": "83fbcd8744c181182014a42ef2a389f8",
                            "sha256": "b5cc2b24458e82d2e7b140a1177b6d7c755562c9d9f31f27048e1effa90b88ad"
                        },
                        "downloads": -1,
                        "filename": "ocrd_cor_asv_ann-0.1.13.tar.gz",
                        "has_sig": false,
                        "md5_digest": "83fbcd8744c181182014a42ef2a389f8",
                        "packagetype": "sdist",
                        "python_version": "source",
                        "requires_python": null,
                        "size": 98077,
                        "upload_time": "2021-12-21T12:18:33",
                        "upload_time_iso_8601": "2021-12-21T12:18:33.195484Z",
                        "url": "https://files.pythonhosted.org/packages/b3/37/e966bee44aedc2019baa1bbc3fde3be390775eb826d482eed73fd4082c8d/ocrd_cor_asv_ann-0.1.13.tar.gz",
                        "yanked": false,
                        "yanked_reason": null
                    }
                ],
                "vulnerabilities": []
            },
            "url": "https://github.com/ASVLeipzig/cor-asv-ann"
        },
        "url": "https://github.com/ASVLeipzig/cor-asv-ann"
    },
    {
        "compliant_cli": true,
        "files": {
            "Dockerfile": null,
            "README.md": "# cor-asv-fst\n    OCR post-correction with error/lexicon Finite State Transducers and\n    chararacter-level LSTM language models\n\n## Introduction\n\n\n## Installation\n\nRequired Ubuntu packages:\n\n* Python (``python`` or ``python3``)\n* pip (``python-pip`` or ``python3-pip``)\n* virtualenv (``python-virtualenv`` or ``python3-virtualenv``)\n\nCreate and activate a virtualenv as usual.\n\nTo install Python dependencies and this module, then do:\n```shell\nmake deps install\n```\nWhich is the equivalent of:\n```shell\npip install -r requirements.txt\npip install -e .\n```\n\nIn addition to the requirements listed in `requirements.txt`, the tool\nrequires the\n[pynini](http://www.opengrm.org/twiki/bin/view/GRM/Pynini)\nlibrary, which has to be installed from source.\n\n## Usage\n\nThe package has two user interfaces:\n\n### Command Line Interface\n\nThe package contains a suite of CLI tools to work with plaintext data (prefix:\n`cor-asv-fst-*`). The minimal working examples and data formats are described\nbelow. Additionally, each tool has further optional parameters - for a detailed\ndescription, call the tool with the `--help` option.\n\n#### `cor-asv-fst-train`\n\nTrain FST models. The basic invocation is as follows:\n\n```shell\ncor-asv-fst-train -l LEXICON_FILE -e ERROR_MODEL_FILE -t TRAINING_FILE\n```\n\nThis will create two transducers, which will be stored in `LEXICON_FILE` and\n`ERROR_MODEL_FILE`, respectively. As the training of the lexicon and the error\nmodel is done independently, any of them can be skipped by omitting the\nrespective parameter.\n\n`TRAINING_FILE` is a plain text file in tab-separated, two-column format\ncontaining a line of OCR-output and the corresponding ground truth line:\n\n```\n\u00bb Bergebt mir, da\u00df ih niht wei\u00df, wie\t\u00bbVergebt mir, da\u00df ich nicht wei\u00df, wie\naus dem (Gei\u017fte aller Nationen Mahrunq\taus dem Gei\u017fte aller Nationen Nahrung\nKann\u017ft Du mir die re<h\u00e9e Bahn nich\u00e9 zeigen ?\tKann\u017ft Du mir die rechte Bahn nicht zeigen?\nfrag zu bringen. \u2014\ttrag zu bringen. \u2014\n\u017fie ins irdij<he Leben hinein, Mit leichtem,\t\u017fie ins irdi\u017fche Leben hinein. Mit leichtem,\n```\n\nEach line is treated independently. Alternatively to the above, the training\ndata may also be supplied as two files:\n\n```shell\ncor-asv-fst-train -l LEXICON_FILE -e ERROR_MODEL_FILE -i INPUT_FILE -g GT_FILE\n```\n\nIn this variant, `INPUT_FILE` and `GT_FILE` are both in tab-separated,\ntwo-column format, in which the first column is the line ID and the second the\nline:\n\n```\n>=== INPUT_FILE ===<\nalexis_ruhe01_1852_0018_022     ih denke. Aber was die \u017felige Frau Geheimr\u00e4th1n\nalexis_ruhe01_1852_0035_019     \u201eDas fann ich niht, c\u2019esl absolument impos-\nalexis_ruhe01_1852_0087_027     rend. In dem Augenbli> war 1hr niht wohl zu\nalexis_ruhe01_1852_0099_012     \u00fcr die fle \u017fich \u017fchlugen.\u201c\nalexis_ruhe01_1852_0147_009     \u017follte. Nur \u00dcber die Familien, wo man \u017fie einf\u00fchren\n\n>=== GT_FILE ===<\nalexis_ruhe01_1852_0018_022     ich denke. Aber was die \u017felige Frau Geheimr\u00e4thin\nalexis_ruhe01_1852_0035_019     \u201eDas kann ich nicht, c'est absolument impos\u2014\nalexis_ruhe01_1852_0087_027     rend. Jn dem Augenblick war ihr nicht wohl zu\nalexis_ruhe01_1852_0099_012     f\u00fcr die \u017fie \u017fich \u017fchlugen.\u201c\nalexis_ruhe01_1852_0147_009     \u017follte. Nur \u00fcber die Familien, wo man \u017fie einf\u00fchren\n```\n\n#### `cor-asv-fst-process`\n\nThis tool applies a trained model to correct plaintext data on a line basis.\nThe basic invocation is:\n\n```shell\ncor-asv-fst-process -i INPUT_FILE -o OUTPUT_FILE -l LEXICON_FILE -e ERROR_MODEL_FILE (-m LM_FILE)\n```\n\n`INPUT_FILE` is in the same format as for the training procedure. `OUTPUT_FILE`\ncontains the post-correction results in the same format.\n\n`LM_FILE` is a `ocrd_keraslm` language model - if supplied, it is used for\nrescoring.\n\n#### `cor-asv-fst-evaluate`\n\nThis tool can be used to evaluate the post-correction results. The minimal\nworking invocation is:\n\n```shell\ncor-asv-fst-evaluate -i INPUT_FILE -o OUTPUT_FILE -g GT_FILE\n```\n\nAdditionally, the parameter `-M` can be used to select the evaluation measure\n(`Levenshtein` by default). The files should be in the same two-column format\nas described above.\n\n### [OCR-D processor](https://ocr-d.github.io/cli) interface `ocrd-cor-asv-fst-process`\n\nTo be used with [PageXML](https://github.com/PRImA-Research-Lab/PAGE-XML)\ndocuments in an [OCR-D](https://ocr-d.github.io) annotation workflow.\nInput files need a textual annotation (`TextEquiv`) on the given\n`textequiv_level` (currently _only_ `word`!).\n\n...\n\n```json\n  \"tools\": {\n    \"cor-asv-fst-process\": {\n      \"executable\": \"cor-asv-fst-process\",\n      \"categories\": [\n        \"Text recognition and optimization\"\n      ],\n      \"steps\": [\n        \"recognition/post-correction\"\n      ],\n      \"description\": \"Improve text annotation by FST error and lexicon model with character-level LSTM language model\",\n      \"input_file_grp\": [\n        \"OCR-D-OCR-TESS\",\n        \"OCR-D-OCR-KRAK\",\n        \"OCR-D-OCR-OCRO\",\n        \"OCR-D-OCR-CALA\",\n        \"OCR-D-OCR-ANY\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-COR-ASV\"\n      ],\n      \"parameters\": {\n        \"textequiv_level\": {\n          \"type\": \"string\",\n          \"enum\": [\"word\"],\n          \"default\": \"word\",\n          \"description\": \"PAGE XML hierarchy level to read TextEquiv input on (output will always be word level)\"\n        },\n        \"errorfst_file\": {\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"content-type\": \"application/vnd.openfst\",\n          \"description\": \"path of FST file for error model\",\n          \"required\": true,\n          \"cacheable\": true\n        },\n        \"lexiconfst_file\": {\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"content-type\": \"application/vnd.openfst\",\n          \"description\": \"path of FST file for lexicon model\",\n          \"required\": true,\n          \"cacheable\": true\n        },\n        \"pruning_weight\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"description\": \"transition weight for pruning the hypotheses in each word window FST\",\n          \"default\": 5.0\n        },\n        \"rejection_weight\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"description\": \"transition weight (per character) for unchanged input in each word window FST\",\n          \"default\": 1.5\n        },\n        \"keraslm_file\": {\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"content-type\": \"application/x-hdf;subtype=bag\",\n          \"description\": \"path of h5py weight/config file for language model trained with keraslm\",\n          \"required\": true,\n          \"cacheable\": true\n        },\n        \"beam_width\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"description\": \"maximum number of best partial paths to consider during beam search in language modelling\",\n          \"default\": 100\n        },\n        \"lm_weight\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"description\": \"share of the LM scores over the FST output confidences\",\n          \"default\": 0.5\n        }\n      }\n    }\n  }\n```\n\n...\n\n## Testing\n\n...\n",
            "ocrd-tool.json": "{\n  \"git_url\": \"https://github.com/ASVLeipzig/cor-asv-fst\",\n  \"version\": \"0.2.2\",\n  \"tools\": {\n    \"ocrd-cor-asv-fst-process\": {\n      \"executable\": \"ocrd-cor-asv-fst-process\",\n      \"categories\": [\n        \"Text recognition and optimization\"\n      ],\n      \"steps\": [\n        \"recognition/post-correction\"\n      ],\n      \"description\": \"Improve text annotation by FST error and lexicon model with character-level LSTM language model\",\n      \"input_file_grp\": [\n        \"OCR-D-OCR-TESS\",\n        \"OCR-D-OCR-KRAK\",\n        \"OCR-D-OCR-OCRO\",\n        \"OCR-D-OCR-CALA\",\n        \"OCR-D-OCR-ANY\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-COR-ASV\"\n      ],\n      \"parameters\": {\n        \"textequiv_level\": {\n          \"type\": \"string\",\n          \"enum\": [\"word\"],\n          \"default\": \"word\",\n          \"description\": \"PAGE XML hierarchy level to read TextEquiv input on (output will always be word level)\"\n        },\n        \"errorfst_file\": {\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"content-type\": \"application/vnd.openfst\",\n          \"description\": \"path of FST file for error model\",\n          \"required\": true,\n          \"cacheable\": true\n        },\n        \"lexiconfst_file\": {\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"content-type\": \"application/vnd.openfst\",\n          \"description\": \"path of FST file for lexicon model\",\n          \"required\": true,\n          \"cacheable\": true\n        },\n        \"pruning_weight\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"description\": \"transition weight for pruning the hypotheses in each word window FST\",\n          \"default\": 5.0\n        },\n        \"rejection_weight\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"description\": \"transition weight (per character) for unchanged input in each word window FST\",\n          \"default\": 1.5\n        },\n        \"keraslm_file\": {\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"content-type\": \"application/x-hdf;subtype=bag\",\n          \"description\": \"path of h5py weight/config file for language model trained with keraslm\",\n          \"required\": true,\n          \"cacheable\": true\n        },\n        \"beam_width\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"description\": \"maximum number of best partial paths to consider during beam search in language modelling\",\n          \"default\": 100\n        },\n        \"lm_weight\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"description\": \"share of the LM scores over the FST output confidences\",\n          \"default\": 0.5\n        }\n      }\n    }\n  }\n}\n",
            "setup.py": "# -*- coding: utf-8 -*-\n\"\"\"\nInstalls:\n    - cor-asv-fst-train\n    - cor-asv-fst-process\n    - cor-asv-fst-evaluate\n    - ocrd-cor-asv-fst-process\n\"\"\"\nimport codecs\n\nfrom setuptools import setup, find_packages\nimport json\n\ninstall_requires = open('requirements.txt').read().split('\\n')\n\nwith codecs.open('README.md', encoding='utf-8') as f:\n    README = f.read()\n\nwith open('./ocrd-tool.json', 'r') as f:\n    version = json.load(f)['version']\n\nsetup(\n    name='ocrd_cor_asv_fst',\n    version=version,\n    description='OCR post-correction with error/lexicon Finite State '\n                'Transducers and character-level LSTMs',\n    long_description=README,\n    long_description_content_type='text/markdown',\n    author='Maciej Sumalvico, Robert Sachunsky',\n    author_email='sumalvico@informatik.uni-leipzig.de, '\n                 'sachunsky@informatik.uni-leipzig.de',\n    url='https://github.com/ASVLeipzig/cor-asv-fst',\n    license='Apache License 2.0',\n    packages=find_packages(exclude=('tests', 'docs')),\n    install_requires=install_requires,\n    package_data={\n        '': ['*.json', '*.yml', '*.yaml'],\n    },\n    test_suite='tests',\n    entry_points={\n        'console_scripts': [\n            'cor-asv-fst-train=ocrd_cor_asv_fst.scripts.train:main',\n            'cor-asv-fst-process=ocrd_cor_asv_fst.scripts.process:main',\n            'cor-asv-fst-evaluate=ocrd_cor_asv_fst.scripts.evaluate:main',\n            'ocrd-cor-asv-fst-process=ocrd_cor_asv_fst.wrapper.cli:ocrd_cor_asv_fst',\n        ]\n    }\n)\n"
        },
        "git": {
            "last_commit": "Thu Sep 24 22:50:05 2020 +0200",
            "latest_tag": "",
            "number_of_commits": "188",
            "url": "https://github.com/ASVLeipzig/cor-asv-fst"
        },
        "name": "cor-asv-fst",
        "ocrd_tool": {
            "git_url": "https://github.com/ASVLeipzig/cor-asv-fst",
            "tools": {
                "ocrd-cor-asv-fst-process": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "Improve text annotation by FST error and lexicon model with character-level LSTM language model",
                    "executable": "ocrd-cor-asv-fst-process",
                    "input_file_grp": [
                        "OCR-D-OCR-TESS",
                        "OCR-D-OCR-KRAK",
                        "OCR-D-OCR-OCRO",
                        "OCR-D-OCR-CALA",
                        "OCR-D-OCR-ANY"
                    ],
                    "output_file_grp": [
                        "OCR-D-COR-ASV"
                    ],
                    "parameters": {
                        "beam_width": {
                            "default": 100,
                            "description": "maximum number of best partial paths to consider during beam search in language modelling",
                            "format": "integer",
                            "type": "number"
                        },
                        "errorfst_file": {
                            "cacheable": true,
                            "content-type": "application/vnd.openfst",
                            "description": "path of FST file for error model",
                            "format": "uri",
                            "required": true,
                            "type": "string"
                        },
                        "keraslm_file": {
                            "cacheable": true,
                            "content-type": "application/x-hdf;subtype=bag",
                            "description": "path of h5py weight/config file for language model trained with keraslm",
                            "format": "uri",
                            "required": true,
                            "type": "string"
                        },
                        "lexiconfst_file": {
                            "cacheable": true,
                            "content-type": "application/vnd.openfst",
                            "description": "path of FST file for lexicon model",
                            "format": "uri",
                            "required": true,
                            "type": "string"
                        },
                        "lm_weight": {
                            "default": 0.5,
                            "description": "share of the LM scores over the FST output confidences",
                            "format": "float",
                            "type": "number"
                        },
                        "pruning_weight": {
                            "default": 5.0,
                            "description": "transition weight for pruning the hypotheses in each word window FST",
                            "format": "float",
                            "type": "number"
                        },
                        "rejection_weight": {
                            "default": 1.5,
                            "description": "transition weight (per character) for unchanged input in each word window FST",
                            "format": "float",
                            "type": "number"
                        },
                        "textequiv_level": {
                            "default": "word",
                            "description": "PAGE XML hierarchy level to read TextEquiv input on (output will always be word level)",
                            "enum": [
                                "word"
                            ],
                            "type": "string"
                        }
                    },
                    "steps": [
                        "recognition/post-correction"
                    ]
                }
            },
            "version": "0.2.2"
        },
        "ocrd_tool_validate": "<report valid=\"true\">\n</report>",
        "official": true,
        "org_plus_name": "ASVLeipzig/cor-asv-fst",
        "python": {
            "author": "Maciej Sumalvico, Robert Sachunsky",
            "author-email": "sumalvico@informatik.uni-leipzig.de, sachunsky@informatik.uni-leipzig.de",
            "name": "ocrd_cor_asv_fst",
            "pypi": null,
            "url": "https://github.com/ASVLeipzig/cor-asv-fst"
        },
        "url": "https://github.com/ASVLeipzig/cor-asv-fst"
    },
    {
        "compliant_cli": true,
        "files": {
            "Dockerfile": "FROM ocrd/core\nMAINTAINER OCR-D\nENV DEBIAN_FRONTEND noninteractive\nENV PYTHONIOENCODING utf8\nENV LC_ALL C.UTF-8\nENV LANG C.UTF-8\n\nWORKDIR /build\nCOPY Makefile .\nCOPY setup.py .\nCOPY ocrd-tool.json .\nCOPY requirements.txt .\nCOPY README.md .\nCOPY ocrd_calamari ocrd_calamari\n\nRUN pip3 install --upgrade pip && \\\n    pip3 install . && \\\n    pip3 check\n\nENTRYPOINT [\"/usr/local/bin/ocrd-calamari-recognize\"]\n\n",
            "README.md": "# ocrd_calamari\n\n> Recognize text using [Calamari OCR](https://github.com/Calamari-OCR/calamari).\n\n[![image](https://circleci.com/gh/OCR-D/ocrd_calamari.svg?style=svg)](https://circleci.com/gh/OCR-D/ocrd_calamari)\n[![image](https://img.shields.io/pypi/v/ocrd_calamari.svg)](https://pypi.org/project/ocrd_calamari/)\n[![image](https://codecov.io/gh/OCR-D/ocrd_calamari/branch/master/graph/badge.svg)](https://codecov.io/gh/OCR-D/ocrd_calamari)\n\n## Introduction\n\n**ocrd_calamari** offers a [OCR-D](https://ocr-d.de) compliant workspace processor for the functionality of Calamari OCR. It uses OCR-D workspaces (METS) with [PAGE XML](https://github.com/PRImA-Research-Lab/PAGE-XML) documents as input and output.\n\nThis processor only operates on the text line level and so needs a line segmentation (and by extension a binarized \nimage) as its input.\n\nIn addition to the line text it may also output word and glyph segmentation\nincluding per-glyph confidence values and per-glyph alternative predictions as\nprovided by the Calamari OCR engine, using a `textequiv_level` of `word` or\n`glyph`. Note that while Calamari does not provide word segmentation, this\nprocessor produces word segmentation inferred from text\nsegmentation and the glyph positions. The provided glyph and word segmentation\ncan be used for text extraction and highlighting, but is probably not useful for\nfurther image-based processing.\n\n![Example output as viewed in PAGE Viewer](https://github.com/OCR-D/ocrd_calamari/raw/screenshots/output-in-page-viewer.jpg)\n\n## Installation\n\n### From PyPI\n\n```\npip install ocrd_calamari\n```\n\n### From Repo\n\n```sh\npip install .\n```\n\n## Install models\n\nDownload models trained on GT4HistOCR data:\n\n```\nmake gt4histocr-calamari1\nls gt4histocr-calamari1\n```\n\nManual download: [model.tar.xz](https://qurator-data.de/calamari-models/GT4HistOCR/2019-12-11T11_10+0100/model.tar.xz)\n\n## Example Usage\nBefore using `ocrd-calamari-recognize` get some example data and model, and\nprepare the document for OCR:\n```\n# Download model and example data\nmake gt4histocr-calamari1\nmake actevedef_718448162\n\n# Create binarized images and line segmentation using other OCR-D projects\ncd actevedef_718448162\nocrd-olena-binarize -P impl sauvola-ms-split -I OCR-D-IMG -O OCR-D-IMG-BIN\nocrd-tesserocr-segment-region -I OCR-D-IMG-BIN -O OCR-D-SEG-REGION\nocrd-tesserocr-segment-line -I OCR-D-SEG-REGION -O OCR-D-SEG-LINE\n```\n\nFinally recognize the text using ocrd_calamari and the downloaded model:\n```\nocrd-calamari-recognize -P checkpoint \"../gt4histocr-calamari1/*.ckpt.json\" -I OCR-D-SEG-LINE -O OCR-D-OCR-CALAMARI\n```\n\nor\n\n```\nocrd-calamari-recognize -P checkpoint_dir \"../gt4histocr-calamari1\" -I OCR-D-SEG-LINE -O OCR-D-OCR-CALAMARI\n```\n\n\nYou may want to have a look at the [ocrd-tool.json](ocrd_calamari/ocrd-tool.json) descriptions\nfor additional parameters and default values.\n\n## Development & Testing\nFor information regarding development and testing, please see\n[README-DEV.md](README-DEV.md).\n",
            "ocrd-tool.json": "{\n  \"git_url\": \"https://github.com/OCR-D/ocrd_calamari\",\n  \"version\": \"1.0.3\",\n  \"tools\": {\n    \"ocrd-calamari-recognize\": {\n      \"executable\": \"ocrd-calamari-recognize\",\n      \"categories\": [\n        \"Text recognition and optimization\"\n      ],\n      \"steps\": [\n        \"recognition/text-recognition\"\n      ],\n      \"description\": \"Recognize lines with Calamari\",\n      \"input_file_grp\": [\n        \"OCR-D-SEG-LINE\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-OCR-CALAMARI\"\n      ],\n      \"parameters\": {\n        \"checkpoint_dir\": {\n          \"description\": \"The directory containing calamari model files (*.ckpt.json). Uses all checkpoints in that directory\",\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"content-type\": \"text/directory\",\n          \"cacheable\": true,\n          \"default\": \"qurator-gt4histocr-1.0\"\n        },\n        \"voter\": {\n          \"description\": \"The voting algorithm to use\",\n          \"type\": \"string\", \"default\": \"confidence_voter_default_ctc\"\n        },\n        \"textequiv_level\": {\n          \"type\": \"string\",\n          \"enum\": [\"line\", \"word\", \"glyph\"],\n          \"default\": \"line\",\n          \"description\": \"Deepest PAGE XML hierarchy level to include TextEquiv results for\"\n        },\n        \"glyph_conf_cutoff\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"default\": 0.001,\n          \"description\": \"Only include glyph alternatives with confidences above this threshold\"\n        }\n      }\n    }\n  }\n}\n",
            "setup.py": "# -*- coding: utf-8 -*-\nfrom pathlib import Path\nimport json\n\nfrom setuptools import setup, find_packages\n\nwith open('./ocrd-tool.json', 'r') as f:\n    version = json.load(f)['version']\n\nsetup(\n    name='ocrd_calamari',\n    version=version,\n    description='Calamari bindings',\n    long_description=Path('README.md').read_text(),\n    long_description_content_type='text/markdown',\n    author='Konstantin Baierer, Mike Gerber',\n    author_email='unixprog@gmail.com, mike.gerber@sbb.spk-berlin.de',\n    url='https://github.com/OCR-D/ocrd_calamari',\n    license='Apache License 2.0',\n    packages=find_packages(exclude=('test', 'docs')),\n    install_requires=Path('requirements.txt').read_text().split('\\n'),\n    package_data={\n        '': ['*.json', '*.yml', '*.yaml'],\n    },\n    entry_points={\n        'console_scripts': [\n            'ocrd-calamari-recognize=ocrd_calamari.cli:ocrd_calamari_recognize',\n        ]\n    },\n)\n"
        },
        "git": {
            "last_commit": "Thu Feb 24 18:41:21 2022 +0100",
            "latest_tag": "v1.0.3",
            "number_of_commits": "215",
            "url": "https://github.com/OCR-D/ocrd_calamari"
        },
        "name": "ocrd_calamari",
        "ocrd_tool": {
            "git_url": "https://github.com/OCR-D/ocrd_calamari",
            "tools": {
                "ocrd-calamari-recognize": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "Recognize lines with Calamari",
                    "executable": "ocrd-calamari-recognize",
                    "input_file_grp": [
                        "OCR-D-SEG-LINE"
                    ],
                    "output_file_grp": [
                        "OCR-D-OCR-CALAMARI"
                    ],
                    "parameters": {
                        "checkpoint_dir": {
                            "cacheable": true,
                            "content-type": "text/directory",
                            "default": "qurator-gt4histocr-1.0",
                            "description": "The directory containing calamari model files (*.ckpt.json). Uses all checkpoints in that directory",
                            "format": "uri",
                            "type": "string"
                        },
                        "glyph_conf_cutoff": {
                            "default": 0.001,
                            "description": "Only include glyph alternatives with confidences above this threshold",
                            "format": "float",
                            "type": "number"
                        },
                        "textequiv_level": {
                            "default": "line",
                            "description": "Deepest PAGE XML hierarchy level to include TextEquiv results for",
                            "enum": [
                                "line",
                                "word",
                                "glyph"
                            ],
                            "type": "string"
                        },
                        "voter": {
                            "default": "confidence_voter_default_ctc",
                            "description": "The voting algorithm to use",
                            "type": "string"
                        }
                    },
                    "steps": [
                        "recognition/text-recognition"
                    ]
                }
            },
            "version": "1.0.3"
        },
        "ocrd_tool_validate": "<report valid=\"true\">\n</report>",
        "official": false,
        "org_plus_name": "OCR-D/ocrd_calamari",
        "python": {
            "author": "Konstantin Baierer, Mike Gerber",
            "author-email": "unixprog@gmail.com, mike.gerber@sbb.spk-berlin.de",
            "name": "ocrd_calamari",
            "pypi": {
                "info": {
                    "author": "Konstantin Baierer, Mike Gerber",
                    "author_email": "unixprog@gmail.com, mike.gerber@sbb.spk-berlin.de",
                    "bugtrack_url": null,
                    "classifiers": [],
                    "description": "# ocrd_calamari\n\n> Recognize text using [Calamari OCR](https://github.com/Calamari-OCR/calamari).\n\n[![image](https://circleci.com/gh/OCR-D/ocrd_calamari.svg?style=svg)](https://circleci.com/gh/OCR-D/ocrd_calamari)\n[![image](https://img.shields.io/pypi/v/ocrd_calamari.svg)](https://pypi.org/project/ocrd_calamari/)\n[![image](https://codecov.io/gh/OCR-D/ocrd_calamari/branch/master/graph/badge.svg)](https://codecov.io/gh/OCR-D/ocrd_calamari)\n\n## Introduction\n\n**ocrd_calamari** offers a [OCR-D](https://ocr-d.de) compliant workspace processor for the functionality of Calamari OCR. It uses OCR-D workspaces (METS) with [PAGE XML](https://github.com/PRImA-Research-Lab/PAGE-XML) documents as input and output.\n\nThis processor only operates on the text line level and so needs a line segmentation (and by extension a binarized \nimage) as its input.\n\nIn addition to the line text it may also output word and glyph segmentation\nincluding per-glyph confidence values and per-glyph alternative predictions as\nprovided by the Calamari OCR engine, using a `textequiv_level` of `word` or\n`glyph`. Note that while Calamari does not provide word segmentation, this\nprocessor produces word segmentation inferred from text\nsegmentation and the glyph positions. The provided glyph and word segmentation\ncan be used for text extraction and highlighting, but is probably not useful for\nfurther image-based processing.\n\n![Example output as viewed in PAGE Viewer](https://github.com/OCR-D/ocrd_calamari/raw/screenshots/output-in-page-viewer.jpg)\n\n## Installation\n\n### From PyPI\n\n```\npip install ocrd_calamari\n```\n\n### From Repo\n\n```sh\npip install .\n```\n\n## Install models\n\nDownload models trained on GT4HistOCR data:\n\n```\nmake gt4histocr-calamari1\nls gt4histocr-calamari1\n```\n\nManual download: [model.tar.xz](https://qurator-data.de/calamari-models/GT4HistOCR/2019-12-11T11_10+0100/model.tar.xz)\n\n## Example Usage\nBefore using `ocrd-calamari-recognize` get some example data and model, and\nprepare the document for OCR:\n```\n# Download model and example data\nmake gt4histocr-calamari1\nmake actevedef_718448162\n\n# Create binarized images and line segmentation using other OCR-D projects\ncd actevedef_718448162\nocrd-olena-binarize -P impl sauvola-ms-split -I OCR-D-IMG -O OCR-D-IMG-BIN\nocrd-tesserocr-segment-region -I OCR-D-IMG-BIN -O OCR-D-SEG-REGION\nocrd-tesserocr-segment-line -I OCR-D-SEG-REGION -O OCR-D-SEG-LINE\n```\n\nFinally recognize the text using ocrd_calamari and the downloaded model:\n```\nocrd-calamari-recognize -P checkpoint \"../gt4histocr-calamari1/*.ckpt.json\" -I OCR-D-SEG-LINE -O OCR-D-OCR-CALAMARI\n```\n\nor\n\n```\nocrd-calamari-recognize -P checkpoint_dir \"../gt4histocr-calamari1\" -I OCR-D-SEG-LINE -O OCR-D-OCR-CALAMARI\n```\n\n\nYou may want to have a look at the [ocrd-tool.json](ocrd_calamari/ocrd-tool.json) descriptions\nfor additional parameters and default values.\n\n## Development & Testing\nFor information regarding development and testing, please see\n[README-DEV.md](README-DEV.md).\n\n\n",
                    "description_content_type": "text/markdown",
                    "docs_url": null,
                    "download_url": "",
                    "downloads": {
                        "last_day": -1,
                        "last_month": -1,
                        "last_week": -1
                    },
                    "home_page": "https://github.com/OCR-D/ocrd_calamari",
                    "keywords": "",
                    "license": "Apache License 2.0",
                    "maintainer": "",
                    "maintainer_email": "",
                    "name": "ocrd-calamari",
                    "package_url": "https://pypi.org/project/ocrd-calamari/",
                    "platform": "",
                    "project_url": "https://pypi.org/project/ocrd-calamari/",
                    "project_urls": {
                        "Homepage": "https://github.com/OCR-D/ocrd_calamari"
                    },
                    "release_url": "https://pypi.org/project/ocrd-calamari/1.0.3/",
                    "requires_dist": [
                        "tensorflow (>=2.5.0)",
                        "calamari-ocr (==1.0.*)",
                        "setuptools (>=41.0.0)",
                        "click",
                        "ocrd (>=2.22.0)"
                    ],
                    "requires_python": "",
                    "summary": "Calamari bindings",
                    "version": "1.0.3",
                    "yanked": false,
                    "yanked_reason": null
                },
                "last_serial": 10966165,
                "releases": {
                    "0.0.1": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "a247c6638d77f7590453855f8414a97b",
                                "sha256": "cf08ec027390519d465f6be861e5672b48e7b39b3d1f8e13e54cb401034355b6"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-0.0.1-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "a247c6638d77f7590453855f8414a97b",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 9320,
                            "upload_time": "2019-10-26T20:18:11",
                            "upload_time_iso_8601": "2019-10-26T20:18:11.044376Z",
                            "url": "https://files.pythonhosted.org/packages/30/62/d8efee35233443d444fc49f7f89792979234c1d735285d599f989e63cee1/ocrd_calamari-0.0.1-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "1daa1956ba64485b65d9d69a149dcb6a",
                                "sha256": "51a09088d677799258d8c796dbaba8a1b44a318d06c060314499f708fa37bdd4"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-0.0.1.tar.gz",
                            "has_sig": false,
                            "md5_digest": "1daa1956ba64485b65d9d69a149dcb6a",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 3884,
                            "upload_time": "2019-10-26T20:18:13",
                            "upload_time_iso_8601": "2019-10-26T20:18:13.643406Z",
                            "url": "https://files.pythonhosted.org/packages/46/1a/b5f02d113aa7810cb773f0b586d1202c254d22e4bf3c6b829d937da2c1b0/ocrd_calamari-0.0.1.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.0.2": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "24e8cab9e429576704a02890f6ebffb2",
                                "sha256": "454164c6b1c063b76c5189ae596115499bffd6e944c896dee3b03f08852f5680"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-0.0.2-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "24e8cab9e429576704a02890f6ebffb2",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 5247,
                            "upload_time": "2019-12-02T12:22:56",
                            "upload_time_iso_8601": "2019-12-02T12:22:56.460224Z",
                            "url": "https://files.pythonhosted.org/packages/39/53/c05186a309284a22d4f1f0399a5fb241d7b11fb0e5b94c33fa8ae229a6fc/ocrd_calamari-0.0.2-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "7a101d8f9626784f9e54af6dad37179d",
                                "sha256": "39e0f5b334a735fb8fa20e5490dcd07a96a620bc785c8e2b31f64a23fa13a6fe"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-0.0.2.tar.gz",
                            "has_sig": false,
                            "md5_digest": "7a101d8f9626784f9e54af6dad37179d",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 3952,
                            "upload_time": "2019-12-02T12:22:57",
                            "upload_time_iso_8601": "2019-12-02T12:22:57.972949Z",
                            "url": "https://files.pythonhosted.org/packages/9d/cc/de53bfd3c2b666cab5ef199c93902c85bb83ee03d923e9ef7abe87377857/ocrd_calamari-0.0.2.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.0.3": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "7bb2ae998a57e2301011073fd532445e",
                                "sha256": "4b6e0be66b0fdd9f64f5f02e8aac952c1e77f78b39fc4ed9c90f8c9f9a117967"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-0.0.3-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "7bb2ae998a57e2301011073fd532445e",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 9384,
                            "upload_time": "2019-12-02T17:28:38",
                            "upload_time_iso_8601": "2019-12-02T17:28:38.092102Z",
                            "url": "https://files.pythonhosted.org/packages/23/85/34b1b520bd8ad7688915d5844caf20e89435fd17a3489963ceec14c06f14/ocrd_calamari-0.0.3-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "8a435811e11f37b47eec5a5f8a433e99",
                                "sha256": "e57cea7935340bcf090e62642a38aa41b0bf68d31afe95ba9e42a18be53ca80d"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-0.0.3.tar.gz",
                            "has_sig": false,
                            "md5_digest": "8a435811e11f37b47eec5a5f8a433e99",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 3909,
                            "upload_time": "2019-12-02T17:28:39",
                            "upload_time_iso_8601": "2019-12-02T17:28:39.643369Z",
                            "url": "https://files.pythonhosted.org/packages/32/15/e01d70177d89e9d0c0ec07ea8a2a31194f46154758788af781724c5b3354/ocrd_calamari-0.0.3.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.0.4": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "8d138c149fb84d4715248607461bfe80",
                                "sha256": "cb3a367fbfcd31f79e87e0b21d9737732edce7cd274817fc09010c801718afc0"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-0.0.4-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "8d138c149fb84d4715248607461bfe80",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 14929,
                            "upload_time": "2020-02-05T17:02:54",
                            "upload_time_iso_8601": "2020-02-05T17:02:54.920438Z",
                            "url": "https://files.pythonhosted.org/packages/00/92/5b74e1c49cdfee8c34366e70283893de6126f84f41050f5f74c3962cb3c7/ocrd_calamari-0.0.4-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "5da43f9b92680b443f26817bc1dced9f",
                                "sha256": "f9ed1cdaead84c63950e6643d00731682eb586379f75975b13cc03c9e6b8ef29"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-0.0.4.tar.gz",
                            "has_sig": false,
                            "md5_digest": "5da43f9b92680b443f26817bc1dced9f",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 8226,
                            "upload_time": "2020-02-05T17:02:56",
                            "upload_time_iso_8601": "2020-02-05T17:02:56.922693Z",
                            "url": "https://files.pythonhosted.org/packages/8e/48/792f284a0fe91cef4b79e451841df109f75a0d339f1a014460d56b9d49de/ocrd_calamari-0.0.4.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.0.5": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "cd3c69a7cbcea705bf6f1f0cb8fa2689",
                                "sha256": "1e1e17d2df23ee699201b87915c5e03507a1a5f851fb66e885f464520e4e13e0"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-0.0.5-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "cd3c69a7cbcea705bf6f1f0cb8fa2689",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 15283,
                            "upload_time": "2020-02-12T12:36:20",
                            "upload_time_iso_8601": "2020-02-12T12:36:20.307321Z",
                            "url": "https://files.pythonhosted.org/packages/14/87/7120f948dcb21099d6341cabf4ecce088fd9420d60d5bf195dc27342d716/ocrd_calamari-0.0.5-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "83855954eb6c7eb27fe6000ff0b30590",
                                "sha256": "6e5881d83ad9897bdf85a425a26a84996fccdf4d7562bea2737eb13c4093a5f3"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-0.0.5.tar.gz",
                            "has_sig": false,
                            "md5_digest": "83855954eb6c7eb27fe6000ff0b30590",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 8635,
                            "upload_time": "2020-02-12T12:36:21",
                            "upload_time_iso_8601": "2020-02-12T12:36:21.494942Z",
                            "url": "https://files.pythonhosted.org/packages/ab/bf/f36a93868e61a40bfc0e3a0ae410ccb488a5b8168f23fe5996b59b2992f0/ocrd_calamari-0.0.5.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.0.6": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "14ffd0320576105f505060394f4ab59d",
                                "sha256": "e8da86bab758fe43367b081e6ea339dc95ba1f0ae3664c3e2883f8781f5a1140"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-0.0.6-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "14ffd0320576105f505060394f4ab59d",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 15313,
                            "upload_time": "2020-02-13T15:09:43",
                            "upload_time_iso_8601": "2020-02-13T15:09:43.554800Z",
                            "url": "https://files.pythonhosted.org/packages/ee/fb/e4ed7e48ca5891b6cf8befa18efdf32b7398e452b74b8618e9e34f94f276/ocrd_calamari-0.0.6-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "b76835abdbb64bc41ef312ef9bc2289a",
                                "sha256": "b88a9af9f5e28787e017347aea5c7baa953855795451b8e240945feccc99a1db"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-0.0.6.tar.gz",
                            "has_sig": false,
                            "md5_digest": "b76835abdbb64bc41ef312ef9bc2289a",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 8664,
                            "upload_time": "2020-02-13T15:09:44",
                            "upload_time_iso_8601": "2020-02-13T15:09:44.851441Z",
                            "url": "https://files.pythonhosted.org/packages/1a/6f/7cfeae6e0b90c157278b653e0cd78823fe602f5ff7e6d32d62f07b095173/ocrd_calamari-0.0.6.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.0.7": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "948f2153a07e22db04178e5dee246355",
                                "sha256": "710b4d4f73575abcc248ef1a311f6065e745586a8182841dc358bc188bef4e2d"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-0.0.7-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "948f2153a07e22db04178e5dee246355",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 15347,
                            "upload_time": "2020-08-06T10:43:12",
                            "upload_time_iso_8601": "2020-08-06T10:43:12.799617Z",
                            "url": "https://files.pythonhosted.org/packages/cd/4a/6f0d8437d6ff1f1a271619d5661c681a527b99028cb1a542131a5817c587/ocrd_calamari-0.0.7-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "9480ff5c0fbec0779a081fef3cf51598",
                                "sha256": "5833c2b8683d2ff29d7a5eacb9826b3d319ce7bebb92c19f90c3e617c938e580"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-0.0.7.tar.gz",
                            "has_sig": false,
                            "md5_digest": "9480ff5c0fbec0779a081fef3cf51598",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 8708,
                            "upload_time": "2020-08-06T10:43:14",
                            "upload_time_iso_8601": "2020-08-06T10:43:14.158778Z",
                            "url": "https://files.pythonhosted.org/packages/66/b3/d752b5ce422e3af2e564eb0918990ff39093377729bd91d3a2359fc092df/ocrd_calamari-0.0.7.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "1.0.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "ce02696e772865e63b62e0408f1d3412",
                                "sha256": "8ad32e8bacdd6c3f16a1e89b23019af9cc919d2500d8d91ce6ab09df229d3b35"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-1.0.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "ce02696e772865e63b62e0408f1d3412",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 13210,
                            "upload_time": "2020-11-25T18:04:09",
                            "upload_time_iso_8601": "2020-11-25T18:04:09.420042Z",
                            "url": "https://files.pythonhosted.org/packages/b5/97/f200637817a22f0952dfc11315b54acb833c703026dd357b5b22245e8273/ocrd_calamari-1.0.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "9f86c9c93cc89a59a42d981e0c0caa5f",
                                "sha256": "de7a4e7d4bc869726fbf0c614bdfa6034cfa736e188e3eebdc9ac25e12072651"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-1.0.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "9f86c9c93cc89a59a42d981e0c0caa5f",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 9684,
                            "upload_time": "2020-11-25T18:04:10",
                            "upload_time_iso_8601": "2020-11-25T18:04:10.926537Z",
                            "url": "https://files.pythonhosted.org/packages/31/1c/c48e0f5f0d33ced7fd0f7fc8f6b00e96fc08479787e541833438807efc08/ocrd_calamari-1.0.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "1.0.1": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "e3c5f363547cc36731b31d0b8e5ae5f3",
                                "sha256": "3c7c637245dcade84a8ed136de976124b61da0711e420f148ac610708b652279"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-1.0.1-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "e3c5f363547cc36731b31d0b8e5ae5f3",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 13424,
                            "upload_time": "2021-01-28T14:50:39",
                            "upload_time_iso_8601": "2021-01-28T14:50:39.092855Z",
                            "url": "https://files.pythonhosted.org/packages/95/69/29a489881645d0099b267c5935af7d168cce9ae368854c11541da322a14e/ocrd_calamari-1.0.1-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "765ebd35582c6d77e07ff812fb508315",
                                "sha256": "a37231e10342f8c7f30379ae84d52f170e62363dbf45cc283397c2d454b577e3"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-1.0.1.tar.gz",
                            "has_sig": false,
                            "md5_digest": "765ebd35582c6d77e07ff812fb508315",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 10786,
                            "upload_time": "2021-01-28T14:50:40",
                            "upload_time_iso_8601": "2021-01-28T14:50:40.727904Z",
                            "url": "https://files.pythonhosted.org/packages/3f/a4/3d89bc86d3bcce57f16dc87af562f3aaca34d1edbf98cc2e9183ba01f728/ocrd_calamari-1.0.1.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "1.0.2": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "161a45d27e0dc3a7cd9d7da2f23db492",
                                "sha256": "2d1bcd87e26d9bb8786873a5e0b356638d3c58fc8aa19b70072177786309b119"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-1.0.2-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "161a45d27e0dc3a7cd9d7da2f23db492",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 13747,
                            "upload_time": "2021-02-09T19:07:52",
                            "upload_time_iso_8601": "2021-02-09T19:07:52.513376Z",
                            "url": "https://files.pythonhosted.org/packages/ea/61/b26517f95d126e3697340b660f28d4b9afe25a61ed2191b04ec23c4cdbbc/ocrd_calamari-1.0.2-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "fa641c05ee2ef154f07614c6c5ca1994",
                                "sha256": "5c18a536581794bad1b395319594df10f29b77f0a57cebe268213de91bf8dcc6"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-1.0.2.tar.gz",
                            "has_sig": false,
                            "md5_digest": "fa641c05ee2ef154f07614c6c5ca1994",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 11346,
                            "upload_time": "2021-02-09T19:07:53",
                            "upload_time_iso_8601": "2021-02-09T19:07:53.936858Z",
                            "url": "https://files.pythonhosted.org/packages/52/0e/b1d392c9d6ead221152c33609ef0bc5f2254021b42e62a1e2d7bd2b912e7/ocrd_calamari-1.0.2.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "1.0.3": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "6f03cfd13926c2078bc78b440d89ccc4",
                                "sha256": "bfd213367028f3b2d5953935e4a0ba38899766cd39f4f305cf6c0cbcd39aff11"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-1.0.3-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "6f03cfd13926c2078bc78b440d89ccc4",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 13933,
                            "upload_time": "2021-07-21T12:14:12",
                            "upload_time_iso_8601": "2021-07-21T12:14:12.419719Z",
                            "url": "https://files.pythonhosted.org/packages/6b/4f/5256d717c32395561e704b54ca3aae73bb4d7c49697ed2a3e06ad29608b9/ocrd_calamari-1.0.3-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "08d0182dc9b00d1a00eba929d071ce74",
                                "sha256": "e96f0be0116a55f782dd856173d083c5637449bc148e4660afd9f608b5f453ca"
                            },
                            "downloads": -1,
                            "filename": "ocrd_calamari-1.0.3.tar.gz",
                            "has_sig": false,
                            "md5_digest": "08d0182dc9b00d1a00eba929d071ce74",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 9717,
                            "upload_time": "2021-07-21T12:14:13",
                            "upload_time_iso_8601": "2021-07-21T12:14:13.661786Z",
                            "url": "https://files.pythonhosted.org/packages/a1/8a/8a810d50f2c668ca2f9ac85100f7a70e1dd460c729f45d01ad86c3103ae7/ocrd_calamari-1.0.3.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ]
                },
                "urls": [
                    {
                        "comment_text": "",
                        "digests": {
                            "md5": "6f03cfd13926c2078bc78b440d89ccc4",
                            "sha256": "bfd213367028f3b2d5953935e4a0ba38899766cd39f4f305cf6c0cbcd39aff11"
                        },
                        "downloads": -1,
                        "filename": "ocrd_calamari-1.0.3-py3-none-any.whl",
                        "has_sig": false,
                        "md5_digest": "6f03cfd13926c2078bc78b440d89ccc4",
                        "packagetype": "bdist_wheel",
                        "python_version": "py3",
                        "requires_python": null,
                        "size": 13933,
                        "upload_time": "2021-07-21T12:14:12",
                        "upload_time_iso_8601": "2021-07-21T12:14:12.419719Z",
                        "url": "https://files.pythonhosted.org/packages/6b/4f/5256d717c32395561e704b54ca3aae73bb4d7c49697ed2a3e06ad29608b9/ocrd_calamari-1.0.3-py3-none-any.whl",
                        "yanked": false,
                        "yanked_reason": null
                    },
                    {
                        "comment_text": "",
                        "digests": {
                            "md5": "08d0182dc9b00d1a00eba929d071ce74",
                            "sha256": "e96f0be0116a55f782dd856173d083c5637449bc148e4660afd9f608b5f453ca"
                        },
                        "downloads": -1,
                        "filename": "ocrd_calamari-1.0.3.tar.gz",
                        "has_sig": false,
                        "md5_digest": "08d0182dc9b00d1a00eba929d071ce74",
                        "packagetype": "sdist",
                        "python_version": "source",
                        "requires_python": null,
                        "size": 9717,
                        "upload_time": "2021-07-21T12:14:13",
                        "upload_time_iso_8601": "2021-07-21T12:14:13.661786Z",
                        "url": "https://files.pythonhosted.org/packages/a1/8a/8a810d50f2c668ca2f9ac85100f7a70e1dd460c729f45d01ad86c3103ae7/ocrd_calamari-1.0.3.tar.gz",
                        "yanked": false,
                        "yanked_reason": null
                    }
                ],
                "vulnerabilities": []
            },
            "url": "https://github.com/OCR-D/ocrd_calamari"
        },
        "url": "https://github.com/OCR-D/ocrd_calamari"
    },
    {
        "compliant_cli": true,
        "files": {
            "Dockerfile": "FROM ocrd/core\nMAINTAINER OCR-D\nENV DEBIAN_FRONTEND noninteractive\n\nENV PREFIX=/usr/local\n\nWORKDIR /build\nCOPY ocrd-im6convert .\nCOPY ocrd-tool.json .\nCOPY Makefile .\n\nRUN apt-get update && \\\n    apt-get -y install apt-utils && \\\n    apt-get -y install --no-install-recommends \\\n    ca-certificates \\\n    make\n\nRUN make deps-ubuntu install\n\nENV DEBIAN_FRONTEND teletype\n\n# no fixed entrypoint (e.g. also allow `convert` etc)\nCMD [\"/usr/local/bin/ocrd-im6convert\", \"--help\"]\n",
            "README.md": "# ocrd_imageconvert\n\n> Thin wrapper around convert(1)\n\n## Introduction\n\n[ImageMagick's](https://imagemagick.org) `convert` CLI contains a treasure trove of image operations. This wrapper aims to provide much of that as an [OCR-D compliant processor](https://ocr-d.github.io/CLI).\n\n## Installation\n\nThis module requires GNU make (for installation) and the ImageMagick command line tools (at runtime). On Ubuntu 18.04 (or similar), you can install them by running:\n\n    sudo apt-get install make\n    sudo make deps-ubuntu # or: apt-get install imagemagick\n\nMoreover, an installation of [OCR-D core](https://github.com/OCR-D/core) is needed:\n\n    make deps # or: pip install ocrd\n\nThis will install the Python package `ocrd` in your current environment. (Setting up a [venv](https://ocr-d.github.io/docs/guide#python-setup) is strongly recommended.)\n\nLastly, the provided shell script `ocrd-im6convert` works best when copied into your `PATH`, referencing its ocrd-tool.json under a known path. This can be done by running:\n\n    make install\n\nThis will copy the binary and JSON file under `$PREFIX`, which variable you can override to your needs. The default value is to use `PREFIX=$VIRTUAL_ENV` if you have already activated a venv, or `PREFIX=$PWD/.local` (i.e. under the current working directory).\n\n## Usage\n\nThis package provides `ocrd-im6convert` as a [OCR-D processor](https://ocr-d.github.com/cli) (command line interface). It uses the following parameters:\n\n```JSON\n    \"ocrd-im6convert\": {\n      \"executable\": \"ocrd-im6convert\",\n      \"categories\": [\"Image preprocessing\"],\n      \"steps\": [\"preprocessing/optimization\"],\n      \"description\": \"Convert and transform images\",\n      \"input_file_grp\": [\n        \"OCR-D-IMG\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-IMG\"\n      ],\n      \"parameters\": {\n        \"input-options\": {\n          \"type\": \"string\",\n          \"description\": \"e.g. -density 600x600 -wavelet-denoise 1%x0.1\",\n          \"default\": \"\"\n        },\n        \"output-format\": {\n          \"type\": \"string\",\n          \"description\": \"Desired media type of output\",\n          \"required\": true,\n          \"enum\": [\"image/tiff\", \"image/jp2\", \"image/png\"]\n        },\n        \"output-options\": {\n          \"type\": \"string\",\n          \"description\": \"e.g. -resample 300x300 -alpha deactivate -normalize -despeckle -noise 2 -negate -morphology close diamond\",\n          \"default\": \"\"\n        }\n      }\n    }\n```\n\nCf. [IM documentation](https://imagemagick.org/script/command-line-options.php) or man-page `convert(1)` for formats and options.\n\n### Example\n\n    ocrd-im6convert -I OCR-D-IMG -O OCR-D-IMG-SMALL -p '{ \"output-format\": \"image/png\", \"output-options\": \"-resize 24%\" }'\n\n(This downscales the images in the input file group `OCR-D-IMG` to 24% and stores them as PNG files under the output file group `OCR-D-IMG-SMALL`.)\n\n## Testing\n\nNone yet\n",
            "ocrd-tool.json": "{\n  \"git_url\": \"https://github.com/OCR-D/ocrd_im6convert\",\n  \"version\": \"0.0.5\",\n  \"tools\": {\n\n    \"ocrd-im6convert\": {\n      \"executable\": \"ocrd-im6convert\",\n      \"categories\": [\"Image preprocessing\"],\n      \"steps\": [\"preprocessing/optimization\"],\n      \"description\": \"Convert and transform images\",\n      \"input_file_grp\": [\n        \"OCR-D-IMG\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-IMG\"\n      ],\n      \"parameters\": {\n        \"input-options\": {\n          \"type\": \"string\",\n          \"description\": \"e.g. -density 600x600 -wavelet-denoise 1%x0.1\",\n          \"default\": \"\"\n        },\n        \"output-format\": {\n          \"type\": \"string\",\n          \"description\": \"Desired media type of output\",\n          \"required\": true,\n          \"enum\": [\"image/tiff\", \"image/jp2\", \"image/png\"]\n        },\n        \"output-options\": {\n          \"type\": \"string\",\n          \"description\": \"e.g. -resample 300x300 -alpha deactivate -normalize -despeckle -noise 2 -negate -morphology close diamond\",\n          \"default\": \"\"\n        }\n      }\n    }\n\n  }\n}\n",
            "setup.py": null
        },
        "git": {
            "last_commit": "Fri Jan 29 17:52:15 2021 +0100",
            "latest_tag": "v0.0.5",
            "number_of_commits": "38",
            "url": "https://github.com/OCR-D/ocrd_im6convert"
        },
        "name": "ocrd_im6convert",
        "ocrd_tool": {
            "git_url": "https://github.com/OCR-D/ocrd_im6convert",
            "tools": {
                "ocrd-im6convert": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Convert and transform images",
                    "executable": "ocrd-im6convert",
                    "input_file_grp": [
                        "OCR-D-IMG"
                    ],
                    "output_file_grp": [
                        "OCR-D-IMG"
                    ],
                    "parameters": {
                        "input-options": {
                            "default": "",
                            "description": "e.g. -density 600x600 -wavelet-denoise 1%x0.1",
                            "type": "string"
                        },
                        "output-format": {
                            "description": "Desired media type of output",
                            "enum": [
                                "image/tiff",
                                "image/jp2",
                                "image/png"
                            ],
                            "required": true,
                            "type": "string"
                        },
                        "output-options": {
                            "default": "",
                            "description": "e.g. -resample 300x300 -alpha deactivate -normalize -despeckle -noise 2 -negate -morphology close diamond",
                            "type": "string"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization"
                    ]
                }
            },
            "version": "0.0.5"
        },
        "ocrd_tool_validate": "<report valid=\"true\">\n</report>",
        "official": false,
        "org_plus_name": "OCR-D/ocrd_im6convert",
        "url": "https://github.com/OCR-D/ocrd_im6convert"
    },
    {
        "compliant_cli": true,
        "files": {
            "Dockerfile": null,
            "README.md": "# ocrd_keraslm\n    character-level language modelling using Keras\n\n[![CircleCI](https://circleci.com/gh/OCR-D/ocrd_keraslm.svg?style=svg)](https://circleci.com/gh/OCR-D/ocrd_keraslm)\n\n## Introduction\n\nThis is a tool for statistical _language modelling_ (predicting text from context) with recurrent neural networks. It models probabilities not on the word level but the _character level_ so as to allow open vocabulary processing (avoiding morphology, historic orthography and word segmentation problems). It manages a vocabulary of mapped characters, which can be easily extended by training on more text. Above that, unmapped characters are treated with underspecification.\n\nIn addition to character sequences, (meta-data) context variables can be configured as extra input. \n\n### Architecture\n\nThe model consists of:\n\n0. an input layer: characters are represented as indexes from the vocabulary mapping, in windows of a number `length` of characters,\n1. a character embedding layer: window sequences are converted into dense vectors by looking up the indexes in an embedding weight matrix,\n2. a context embedding layer: context variables are converted into dense vectors by looking up the indexes in an embedding weight matrix, \n3. character and context vector sequences are concatenated,\n4. a number `depth` of hidden layers: each with a number `width` of hidden recurrent units of _LSTM cells_ (Long Short-term Memory) connected on top of each other,\n5. an output layer derived from the transposed character embedding matrix (weight tying): hidden activations are projected linearly to vectors of dimensionality equal to the character vocabulary size, then softmax is applied returning a probability for each possible value of the next character, respectively.\n\n![model graph depiction](model-graph.png \"graph with 1 context variable\")\n\nThe model is trained by feeding windows of text in index representation to the input layer, calculating output and comparing it to the same text shifted backward by 1 character, and represented as unit vectors (\"one-hot coding\") as target. The loss is calculated as the (unweighted) cross-entropy between target and output. Backpropagation yields error gradients for each layer, which is used to iteratively update the weights (stochastic gradient descent).\n\nThis is implemented in [Keras](https://keras.io) with [Tensorflow](https://www.tensorflow.org/) as backend. It automatically uses a fast CUDA-optimized LSTM implementation (Nividia GPU and Tensorflow installation with GPU support, see below), both in learning and in prediction phase, if available.\n\n\n### Modes of operation\n\nNotably, this model (by default) runs _statefully_, i.e. by implicitly passing hidden state from one window (batch of samples) to the next. That way, the context available for predictions can be arbitrarily long (above `length`, e.g. the complete document up to that point), or short (below `length`, e.g. at the start of a text). (However, this is a passive perspective above `length`, because errors are never back-propagated any further in time during gradient-descent training.) This is favourable to stateless mode because all characters can be output in parallel, and no partial windows need to be presented during training (which slows down).\n\nBesides stateful mode, the model can also be run _incrementally_, i.e. by explicitly passing hidden state from the caller. That way, multiple alternative hypotheses can be processed together. This is used for generation (sampling from the model) and alternative decoding (finding the best path through a sequence of alternatives).\n\n### Context conditioning\n\nEvery text has meta-data like time, author, text type, genre, production features (e.g. print vs typewriter vs digital born rich text, OCR version), language, structural element (e.g. title vs heading vs paragraph vs footer vs marginalia), font family (e.g. Antiqua vs Fraktura) and font shape (e.g. bold vs letter-spaced vs italic vs normal) etc. \n\nThis information (however noisy) can be very useful to facilitate stochastic modelling, since language has an extreme diversity and complexity. To that end, models can be conditioned on extra inputs here, termed _context variables_. The model learns to represent these high-dimensional discrete values as low-dimensional continuous vectors (embeddings), also entering the recurrent hidden layers (as a form of simple additive adaptation).\n\n### Underspecification\n\nIndex zero is reserved for unmapped characters (unseen contexts). During training, its embedding vector is regularised to occupy a center position of all mapped characters (all other contexts), and the hidden layers get to see it every now and then by random degradation. At runtime, therefore, some unknown character (some unknown context) represented as zero does not disturb follow-up predictions too much.\n\n\n## Installation\n\nRequired Ubuntu packages:\n\n* Python (``python`` or ``python3``)\n* pip (``python-pip`` or ``python3-pip``)\n* virtualenv (``python-virtualenv`` or ``python3-virtualenv``)\n\nCreate and activate a virtualenv as usual.\n\nIf you need a custom version of ``keras`` or ``tensorflow`` (like [GPU support](https://www.tensorflow.org/install/install_sources)), install them via `pip` now.\n\nTo install Python dependencies and this module, then do:\n```shell\nmake deps install\n```\nWhich is the equivalent of:\n```shell\npip install -r requirements.txt\npip install -e .\n```\n\nUseful environment variables are:\n- ``TF_CPP_MIN_LOG_LEVEL`` (set to `1` to suppress most of Tensorflow's messages\n- ``CUDA_VISIBLE_DEVICES`` (set empty to force CPU even in a GPU installation)\n\n\n## Usage\n\nThis packages has two user interfaces:\n\n### command line interface `keraslm-rate`\n\nTo be used with string arguments and plain-text files.\n\n```shell\nUsage: keraslm-rate [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  train                           train a language model\n  test                            get overall perplexity from language model\n  apply                           get individual probabilities from language model\n  generate                        sample characters from language model\n  print-charset                   Print the mapped characters\n  prune-charset                   Delete one character from mapping\n  plot-char-embeddings-similarity\n                                  Paint a heat map of character embeddings\n  plot-context-embeddings-similarity\n                                  Paint a heat map of context embeddings\n  plot-context-embeddings-projection\n                                  Paint a 2-d PCA projection of context embeddings\n```\n\nExamples:\n```shell\nkeraslm-rate train --width 64 --depth 4 --length 256 --model model_dta_64_4_256.h5 dta_komplett_2017-09-01/txt/*.tcf.txt\nkeraslm-rate generate -m model_dta_64_4_256.h5 --number 6 \"f\u00fcr die Wi\u017f\u017fen\"\nkeraslm-rate apply -m model_dta_64_4_256.h5 \"so sch\u00e4dlich ist es Borkickheile zu pflanzen\"\nkeraslm-rate test -m model_dta_64_4_256.h5 dta_komplett_2017-09-01/txt/grimm_*.tcf.txt\n```\n\n### [OCR-D processor](https://github.com/OCR-D/core) interface `ocrd-keraslm-rate`\n\nTo be used with [PageXML](https://www.primaresearch.org/tools/PAGELibraries) documents in an [OCR-D](https://github.com/OCR-D/spec/) annotation workflow. Input could be anything with a textual annotation (`TextEquiv` on the given `textequiv_level`). The LM rater could be used for both quality control (without alternative decoding, using only each first index `TextEquiv`) and part of post-correction (with `alternative_decoding=True`, finding the best path among `TextEquiv` indexes).\n\n```json\n  \"tools\": {\n    \"ocrd-keraslm-rate\": {\n      \"executable\": \"ocrd-keraslm-rate\",\n      \"categories\": [\n        \"Text recognition and optimization\"\n      ],\n      \"steps\": [\n        \"recognition/text-recognition\"\n      ],\n      \"description\": \"Rate elements of the text with a character-level LSTM language model in Keras\",\n      \"input_file_grp\": [\n        \"OCR-D-OCR-TESS\",\n        \"OCR-D-OCR-KRAK\",\n        \"OCR-D-OCR-OCRO\",\n        \"OCR-D-OCR-CALA\",\n        \"OCR-D-OCR-ANY\",\n        \"OCR-D-COR-CIS\",\n        \"OCR-D-COR-ASV\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-COR-LM\"\n      ],\n      \"parameters\": {\n        \"model_file\": {\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"content-type\": \"application/x-hdf;subtype=bag\",\n          \"description\": \"path of h5py weight/config file for model trained with keraslm\",\n          \"required\": true,\n          \"cacheable\": true\n        },\n        \"textequiv_level\": {\n          \"type\": \"string\",\n          \"enum\": [\"region\", \"line\", \"word\", \"glyph\"],\n          \"default\": \"glyph\",\n          \"description\": \"PAGE XML hierarchy level to evaluate TextEquiv sequences on\"\n        },\n        \"alternative_decoding\": {\n          \"type\": \"boolean\",\n          \"description\": \"whether to process all TextEquiv alternatives, finding the best path via beam search, and delete each non-best alternative\",\n          \"default\": true\n        },\n        \"beam_width\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"description\": \"maximum number of best partial paths to consider during search with alternative_decoding\",\n          \"default\": 100\n        }\n      }\n    }\n  }\n```\n\nExamples:\n```shell\nmake deps-test # installs ocrd_tesserocr\nmake test/assets # downloads GT, imports PageXML, builds workspaces\nocrd workspace -d ws1 clone -a test/assets/kant_aufklaerung_1784/mets.xml\ncd ws1\nocrd-tesserocr-segment-region -I OCR-D-IMG -O OCR-D-SEG-BLOCK\nocrd-tesserocr-segment-line -I OCR-D-SEG-BLOCK -O OCR-D-SEG-LINE\nocrd-tesserocr-recognize -I OCR-D-SEG-LINE -O OCR-D-OCR-TESS-WORD -p '{ \"textequiv_level\" : \"word\", \"model\" : \"Fraktur\" }'\nocrd-tesserocr-recognize -I OCR-D-SEG-LINE -O OCR-D-OCR-TESS-GLYPH -p '{ \"textequiv_level\" : \"glyph\", \"model\" : \"deu-frak\" }'\n# get confidences and perplexity:\nocrd-keraslm-rate -I OCR-D-OCR-TESS-WORD -O OCR-D-OCR-LM-WORD -p '{ \"model_file\": \"model_dta_64_4_256.h5\", \"textequiv_level\": \"word\", \"alternative_decoding\": false }'\n# also get best path:\nocrd-keraslm-rate -I OCR-D-OCR-TESS-GLYPH -O OCR-D-OCR-LM-GLYPH -p '{ \"model_file\": \"model_dta_64_4_256.h5\", \"textequiv_level\": \"glyph\", \"alternative_decoding\": true, \"beam_width\": 10 }'\n```\n\n## Testing\n\n```shell\nmake deps-test test\n```\nWhich is the equivalent of:\n```shell\npip install -r requirements_test.txt\ntest -e test/assets || test/prepare_gt.bash test/assets\ntest -f model_dta_test.h5 || keraslm-rate train -m model_dta_test.h5 test/assets/*.txt\nkeraslm-rate test -m model_dta_test.h5 test/assets/*.txt\npython -m pytest test $(PYTEST_ARGS)\n```\n\nSet `PYTEST_ARGS=\"-s --verbose\"` to see log output (`-s`) and individual test results (`--verbose`).\n",
            "ocrd-tool.json": "{\n  \"git_url\": \"https://github.com/OCR-D/ocrd_keraslm\",\n  \"version\": \"0.4.1\",\n  \"tools\": {\n    \"ocrd-keraslm-rate\": {\n      \"executable\": \"ocrd-keraslm-rate\",\n      \"categories\": [\n        \"Text recognition and optimization\"\n      ],\n      \"steps\": [\n        \"recognition/text-recognition\"\n      ],\n      \"description\": \"Rate elements of the text with a character-level LSTM language model in Keras\",\n      \"input_file_grp\": [\n        \"OCR-D-OCR-TESS\",\n        \"OCR-D-OCR-KRAK\",\n        \"OCR-D-OCR-OCRO\",\n        \"OCR-D-OCR-CALA\",\n        \"OCR-D-OCR-ANY\",\n        \"OCR-D-COR-CIS\",\n        \"OCR-D-COR-ASV\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-COR-LM\"\n      ],\n      \"parameters\": {\n        \"model_file\": {\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"content-type\": \"application/x-hdf;subtype=bag\",\n          \"description\": \"path of h5py weight/config file for model trained with keraslm\",\n          \"required\": true,\n          \"cacheable\": true\n        },\n        \"textequiv_level\": {\n          \"type\": \"string\",\n          \"enum\": [\"region\", \"line\", \"word\", \"glyph\"],\n          \"default\": \"glyph\",\n          \"description\": \"PAGE XML hierarchy level to evaluate TextEquiv sequences on\"\n        },\n        \"alternative_decoding\": {\n          \"type\": \"boolean\",\n          \"description\": \"whether to process all TextEquiv alternatives, finding the best path via beam search, and delete each non-best alternative\",\n          \"default\": true\n        },\n        \"beam_width\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"description\": \"maximum number of best partial paths to consider during search with alternative_decoding\",\n          \"default\": 10\n        },\n        \"lm_weight\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"description\": \"share of the LM scores over the input confidences\",\n          \"default\": 0.5\n        }\n      }\n    }\n  }\n}\n",
            "setup.py": "# -*- coding: utf-8 -*-\n\"\"\"\nInstalls:\n    - keraslm-rate\n    - ocrd-keraslm-rate\n\"\"\"\nimport codecs\nimport json\n\nfrom setuptools import setup, find_packages\n\nwith codecs.open('README.md', encoding='utf-8') as f:\n    README = f.read()\nwith open('ocrd-tool.json', 'r') as f:\n    version = json.load(f)['version']\n\nsetup(\n    name='ocrd_keraslm',\n    version=version,\n    description='character-level language modelling in Keras',\n    long_description=README,\n    long_description_content_type='text/markdown',\n    author='Robert Sachunsky, Konstantin Baierer, Kay-Michael W\u00fcrzner',\n    author_email='sachunsky@informatik.uni-leipzig.de, unixprog@gmail.com, wuerzner@gmail.com',\n    url='https://github.com/OCR-D/ocrd_keraslm',\n    license='Apache License 2.0',\n    packages=find_packages(exclude=('test', 'repo', 'build')),\n    install_requires=open('requirements.txt').read().split('\\n'),\n    extras_require={\n        'plotting': [\n            'sklearn',\n            'matplotlib',\n            ]\n    },\n    package_data={\n        '': ['*.json', '*.yml', '*.yaml'],\n    },\n    include_package_data=True,\n    entry_points={\n        'console_scripts': [\n            'keraslm-rate=ocrd_keraslm.scripts.run:cli',\n            'ocrd-keraslm-rate=ocrd_keraslm.wrapper.cli:ocrd_keraslm_rate',\n        ]\n    },\n)\n"
        },
        "git": {
            "last_commit": "Mon May 9 14:55:43 2022 +0200",
            "latest_tag": "v0.4.1",
            "number_of_commits": "112",
            "url": "https://github.com/OCR-D/ocrd_keraslm"
        },
        "name": "ocrd_keraslm",
        "ocrd_tool": {
            "git_url": "https://github.com/OCR-D/ocrd_keraslm",
            "tools": {
                "ocrd-keraslm-rate": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "Rate elements of the text with a character-level LSTM language model in Keras",
                    "executable": "ocrd-keraslm-rate",
                    "input_file_grp": [
                        "OCR-D-OCR-TESS",
                        "OCR-D-OCR-KRAK",
                        "OCR-D-OCR-OCRO",
                        "OCR-D-OCR-CALA",
                        "OCR-D-OCR-ANY",
                        "OCR-D-COR-CIS",
                        "OCR-D-COR-ASV"
                    ],
                    "output_file_grp": [
                        "OCR-D-COR-LM"
                    ],
                    "parameters": {
                        "alternative_decoding": {
                            "default": true,
                            "description": "whether to process all TextEquiv alternatives, finding the best path via beam search, and delete each non-best alternative",
                            "type": "boolean"
                        },
                        "beam_width": {
                            "default": 10,
                            "description": "maximum number of best partial paths to consider during search with alternative_decoding",
                            "format": "integer",
                            "type": "number"
                        },
                        "lm_weight": {
                            "default": 0.5,
                            "description": "share of the LM scores over the input confidences",
                            "format": "float",
                            "type": "number"
                        },
                        "model_file": {
                            "cacheable": true,
                            "content-type": "application/x-hdf;subtype=bag",
                            "description": "path of h5py weight/config file for model trained with keraslm",
                            "format": "uri",
                            "required": true,
                            "type": "string"
                        },
                        "textequiv_level": {
                            "default": "glyph",
                            "description": "PAGE XML hierarchy level to evaluate TextEquiv sequences on",
                            "enum": [
                                "region",
                                "line",
                                "word",
                                "glyph"
                            ],
                            "type": "string"
                        }
                    },
                    "steps": [
                        "recognition/text-recognition"
                    ]
                }
            },
            "version": "0.4.1"
        },
        "ocrd_tool_validate": "<report valid=\"true\">\n</report>",
        "official": false,
        "org_plus_name": "OCR-D/ocrd_keraslm",
        "python": {
            "author": "Robert Sachunsky, Konstantin Baierer, Kay-Michael W\u00fcrzner",
            "author-email": "sachunsky@informatik.uni-leipzig.de, unixprog@gmail.com, wuerzner@gmail.com",
            "name": "ocrd_keraslm",
            "pypi": {
                "info": {
                    "author": "Robert Sachunsky, Konstantin Baierer, Kay-Michael W\u00fcrzner",
                    "author_email": "sachunsky@informatik.uni-leipzig.de, unixprog@gmail.com, wuerzner@gmail.com",
                    "bugtrack_url": null,
                    "classifiers": [],
                    "description": "# ocrd_keraslm\n    character-level language modelling using Keras\n\n[![CircleCI](https://circleci.com/gh/OCR-D/ocrd_keraslm.svg?style=svg)](https://circleci.com/gh/OCR-D/ocrd_keraslm)\n\n## Introduction\n\nThis is a tool for statistical _language modelling_ (predicting text from context) with recurrent neural networks. It models probabilities not on the word level but the _character level_ so as to allow open vocabulary processing (avoiding morphology, historic orthography and word segmentation problems). It manages a vocabulary of mapped characters, which can be easily extended by training on more text. Above that, unmapped characters are treated with underspecification.\n\nIn addition to character sequences, (meta-data) context variables can be configured as extra input. \n\n### Architecture\n\nThe model consists of:\n\n0. an input layer: characters are represented as indexes from the vocabulary mapping, in windows of a number `length` of characters,\n1. a character embedding layer: window sequences are converted into dense vectors by looking up the indexes in an embedding weight matrix,\n2. a context embedding layer: context variables are converted into dense vectors by looking up the indexes in an embedding weight matrix, \n3. character and context vector sequences are concatenated,\n4. a number `depth` of hidden layers: each with a number `width` of hidden recurrent units of _LSTM cells_ (Long Short-term Memory) connected on top of each other,\n5. an output layer derived from the transposed character embedding matrix (weight tying): hidden activations are projected linearly to vectors of dimensionality equal to the character vocabulary size, then softmax is applied returning a probability for each possible value of the next character, respectively.\n\n![model graph depiction](model-graph.png \"graph with 1 context variable\")\n\nThe model is trained by feeding windows of text in index representation to the input layer, calculating output and comparing it to the same text shifted backward by 1 character, and represented as unit vectors (\"one-hot coding\") as target. The loss is calculated as the (unweighted) cross-entropy between target and output. Backpropagation yields error gradients for each layer, which is used to iteratively update the weights (stochastic gradient descent).\n\nThis is implemented in [Keras](https://keras.io) with [Tensorflow](https://www.tensorflow.org/) as backend. It automatically uses a fast CUDA-optimized LSTM implementation (Nividia GPU and Tensorflow installation with GPU support, see below), both in learning and in prediction phase, if available.\n\n\n### Modes of operation\n\nNotably, this model (by default) runs _statefully_, i.e. by implicitly passing hidden state from one window (batch of samples) to the next. That way, the context available for predictions can be arbitrarily long (above `length`, e.g. the complete document up to that point), or short (below `length`, e.g. at the start of a text). (However, this is a passive perspective above `length`, because errors are never back-propagated any further in time during gradient-descent training.) This is favourable to stateless mode because all characters can be output in parallel, and no partial windows need to be presented during training (which slows down).\n\nBesides stateful mode, the model can also be run _incrementally_, i.e. by explicitly passing hidden state from the caller. That way, multiple alternative hypotheses can be processed together. This is used for generation (sampling from the model) and alternative decoding (finding the best path through a sequence of alternatives).\n\n### Context conditioning\n\nEvery text has meta-data like time, author, text type, genre, production features (e.g. print vs typewriter vs digital born rich text, OCR version), language, structural element (e.g. title vs heading vs paragraph vs footer vs marginalia), font family (e.g. Antiqua vs Fraktura) and font shape (e.g. bold vs letter-spaced vs italic vs normal) etc. \n\nThis information (however noisy) can be very useful to facilitate stochastic modelling, since language has an extreme diversity and complexity. To that end, models can be conditioned on extra inputs here, termed _context variables_. The model learns to represent these high-dimensional discrete values as low-dimensional continuous vectors (embeddings), also entering the recurrent hidden layers (as a form of simple additive adaptation).\n\n### Underspecification\n\nIndex zero is reserved for unmapped characters (unseen contexts). During training, its embedding vector is regularised to occupy a center position of all mapped characters (all other contexts), and the hidden layers get to see it every now and then by random degradation. At runtime, therefore, some unknown character (some unknown context) represented as zero does not disturb follow-up predictions too much.\n\n\n## Installation\n\nRequired Ubuntu packages:\n\n* Python (``python`` or ``python3``)\n* pip (``python-pip`` or ``python3-pip``)\n* virtualenv (``python-virtualenv`` or ``python3-virtualenv``)\n\nCreate and activate a virtualenv as usual.\n\nIf you need a custom version of ``keras`` or ``tensorflow`` (like [GPU support](https://www.tensorflow.org/install/install_sources)), install them via `pip` now.\n\nTo install Python dependencies and this module, then do:\n```shell\nmake deps install\n```\nWhich is the equivalent of:\n```shell\npip install -r requirements.txt\npip install -e .\n```\n\nUseful environment variables are:\n- ``TF_CPP_MIN_LOG_LEVEL`` (set to `1` to suppress most of Tensorflow's messages\n- ``CUDA_VISIBLE_DEVICES`` (set empty to force CPU even in a GPU installation)\n\n\n## Usage\n\nThis packages has two user interfaces:\n\n### command line interface `keraslm-rate`\n\nTo be used with string arguments and plain-text files.\n\n```shell\nUsage: keraslm-rate [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  train                           train a language model\n  test                            get overall perplexity from language model\n  apply                           get individual probabilities from language model\n  generate                        sample characters from language model\n  print-charset                   Print the mapped characters\n  prune-charset                   Delete one character from mapping\n  plot-char-embeddings-similarity\n                                  Paint a heat map of character embeddings\n  plot-context-embeddings-similarity\n                                  Paint a heat map of context embeddings\n  plot-context-embeddings-projection\n                                  Paint a 2-d PCA projection of context embeddings\n```\n\nExamples:\n```shell\nkeraslm-rate train --width 64 --depth 4 --length 256 --model model_dta_64_4_256.h5 dta_komplett_2017-09-01/txt/*.tcf.txt\nkeraslm-rate generate -m model_dta_64_4_256.h5 --number 6 \"f\u00fcr die Wi\u017f\u017fen\"\nkeraslm-rate apply -m model_dta_64_4_256.h5 \"so sch\u00e4dlich ist es Borkickheile zu pflanzen\"\nkeraslm-rate test -m model_dta_64_4_256.h5 dta_komplett_2017-09-01/txt/grimm_*.tcf.txt\n```\n\n### [OCR-D processor](https://github.com/OCR-D/core) interface `ocrd-keraslm-rate`\n\nTo be used with [PageXML](https://www.primaresearch.org/tools/PAGELibraries) documents in an [OCR-D](https://github.com/OCR-D/spec/) annotation workflow. Input could be anything with a textual annotation (`TextEquiv` on the given `textequiv_level`). The LM rater could be used for both quality control (without alternative decoding, using only each first index `TextEquiv`) and part of post-correction (with `alternative_decoding=True`, finding the best path among `TextEquiv` indexes).\n\n```json\n  \"tools\": {\n    \"ocrd-keraslm-rate\": {\n      \"executable\": \"ocrd-keraslm-rate\",\n      \"categories\": [\n        \"Text recognition and optimization\"\n      ],\n      \"steps\": [\n        \"recognition/text-recognition\"\n      ],\n      \"description\": \"Rate elements of the text with a character-level LSTM language model in Keras\",\n      \"input_file_grp\": [\n        \"OCR-D-OCR-TESS\",\n        \"OCR-D-OCR-KRAK\",\n        \"OCR-D-OCR-OCRO\",\n        \"OCR-D-OCR-CALA\",\n        \"OCR-D-OCR-ANY\",\n        \"OCR-D-COR-CIS\",\n        \"OCR-D-COR-ASV\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-COR-LM\"\n      ],\n      \"parameters\": {\n        \"model_file\": {\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"content-type\": \"application/x-hdf;subtype=bag\",\n          \"description\": \"path of h5py weight/config file for model trained with keraslm\",\n          \"required\": true,\n          \"cacheable\": true\n        },\n        \"textequiv_level\": {\n          \"type\": \"string\",\n          \"enum\": [\"region\", \"line\", \"word\", \"glyph\"],\n          \"default\": \"glyph\",\n          \"description\": \"PAGE XML hierarchy level to evaluate TextEquiv sequences on\"\n        },\n        \"alternative_decoding\": {\n          \"type\": \"boolean\",\n          \"description\": \"whether to process all TextEquiv alternatives, finding the best path via beam search, and delete each non-best alternative\",\n          \"default\": true\n        },\n        \"beam_width\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"description\": \"maximum number of best partial paths to consider during search with alternative_decoding\",\n          \"default\": 100\n        }\n      }\n    }\n  }\n```\n\nExamples:\n```shell\nmake deps-test # installs ocrd_tesserocr\nmake test/assets # downloads GT, imports PageXML, builds workspaces\nocrd workspace clone -a test/assets/kant_aufklaerung_1784/mets.xml ws1\ncd ws1\nocrd-tesserocr-segment-region -I OCR-D-IMG -O OCR-D-SEG-BLOCK\nocrd-tesserocr-segment-line -I OCR-D-SEG-BLOCK -O OCR-D-SEG-LINE\nocrd-tesserocr-recognize -I OCR-D-SEG-LINE -O OCR-D-OCR-TESS-WORD -p '{ \"textequiv_level\" : \"word\", \"model\" : \"Fraktur\" }'\nocrd-tesserocr-recognize -I OCR-D-SEG-LINE -O OCR-D-OCR-TESS-GLYPH -p '{ \"textequiv_level\" : \"glyph\", \"model\" : \"deu-frak\" }'\n# get confidences and perplexity:\nocrd-keraslm-rate -I OCR-D-OCR-TESS-WORD -O OCR-D-OCR-LM-WORD -p '{ \"model_file\": \"model_dta_64_4_256.h5\", \"textequiv_level\": \"word\", \"alternative_decoding\": false }'\n# also get best path:\nocrd-keraslm-rate -I OCR-D-OCR-TESS-GLYPH -O OCR-D-OCR-LM-GLYPH -p '{ \"model_file\": \"model_dta_64_4_256.h5\", \"textequiv_level\": \"glyph\", \"alternative_decoding\": true, \"beam_width\": 10 }'\n```\n\n## Testing\n\n```shell\nmake deps-test test\n```\nWhich is the equivalent of:\n```shell\npip install -r requirements_test.txt\ntest -e test/assets || test/prepare_gt.bash test/assets\ntest -f model_dta_test.h5 || keraslm-rate train -m model_dta_test.h5 test/assets/*.txt\nkeraslm-rate test -m model_dta_test.h5 test/assets/*.txt\npython -m pytest test $(PYTEST_ARGS)\n```\n\nSet `PYTEST_ARGS=\"-s --verbose\"` to see log output (`-s`) and individual test results (`--verbose`).\n\n\n",
                    "description_content_type": "text/markdown",
                    "docs_url": null,
                    "download_url": "",
                    "downloads": {
                        "last_day": -1,
                        "last_month": -1,
                        "last_week": -1
                    },
                    "home_page": "https://github.com/OCR-D/ocrd_keraslm",
                    "keywords": "",
                    "license": "Apache License 2.0",
                    "maintainer": "",
                    "maintainer_email": "",
                    "name": "ocrd-keraslm",
                    "package_url": "https://pypi.org/project/ocrd-keraslm/",
                    "platform": "",
                    "project_url": "https://pypi.org/project/ocrd-keraslm/",
                    "project_urls": {
                        "Homepage": "https://github.com/OCR-D/ocrd_keraslm"
                    },
                    "release_url": "https://pypi.org/project/ocrd-keraslm/0.4.0/",
                    "requires_dist": [
                        "ocrd (>=2.13.1)",
                        "keras (==2.3.*)",
                        "numpy",
                        "tensorflow-gpu (==1.15.*)",
                        "h5py",
                        "networkx (>=2.0)",
                        "sklearn; extra == 'plotting'",
                        "matplotlib; extra == 'plotting'"
                    ],
                    "requires_python": "",
                    "summary": "character-level language modelling in Keras",
                    "version": "0.4.0",
                    "yanked": false,
                    "yanked_reason": null
                },
                "last_serial": 8018171,
                "releases": {
                    "0.3.1": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "0da1139d7b62ee27b9bb3af2b4e38929",
                                "sha256": "f3ec82a615434e90028722586c6123e4a1887e36b0a57f06566a291892280e88"
                            },
                            "downloads": -1,
                            "filename": "ocrd_keraslm-0.3.1-py2.py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "0da1139d7b62ee27b9bb3af2b4e38929",
                            "packagetype": "bdist_wheel",
                            "python_version": "py2.py3",
                            "requires_python": null,
                            "size": 34192,
                            "upload_time": "2019-10-25T22:53:09",
                            "upload_time_iso_8601": "2019-10-25T22:53:09.567407Z",
                            "url": "https://files.pythonhosted.org/packages/eb/ba/8f5f0f1801ea99221c772357e2c79d9935a88e89873924e557e24aea6c33/ocrd_keraslm-0.3.1-py2.py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "e8d597a8dbf64e45dcbf19196e73bbf8",
                                "sha256": "665a9bf1d7bc46f497d71638b2d33608062edd16ac11b9cff05be56eacda53c9"
                            },
                            "downloads": -1,
                            "filename": "ocrd_keraslm-0.3.1.tar.gz",
                            "has_sig": false,
                            "md5_digest": "e8d597a8dbf64e45dcbf19196e73bbf8",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 32287,
                            "upload_time": "2019-10-25T22:53:12",
                            "upload_time_iso_8601": "2019-10-25T22:53:12.437293Z",
                            "url": "https://files.pythonhosted.org/packages/79/0e/744edc5497d706ac558b90d8d85b2e52ad5fb6b794c6f9cb44fc0aaa341a/ocrd_keraslm-0.3.1.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.3.2": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "9e8927b5ca560a990cb924c7a01e7280",
                                "sha256": "45c4af95f531e3a2c9528e401d368dad10e4b8f9cdba9a67ef6f816afc682d3b"
                            },
                            "downloads": -1,
                            "filename": "ocrd_keraslm-0.3.2-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "9e8927b5ca560a990cb924c7a01e7280",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 34190,
                            "upload_time": "2019-11-18T22:03:01",
                            "upload_time_iso_8601": "2019-11-18T22:03:01.036117Z",
                            "url": "https://files.pythonhosted.org/packages/15/10/690a290322b84e6c4cba17dbff7e0fb570916810371b1b48020f75504d49/ocrd_keraslm-0.3.2-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "7eb11946732e6410d4ba18dad3fbaf20",
                                "sha256": "ba56b149a68c9f351052e62cc247d4074514a66c5dee99e7ef6a78cca497e5e9"
                            },
                            "downloads": -1,
                            "filename": "ocrd_keraslm-0.3.2.tar.gz",
                            "has_sig": false,
                            "md5_digest": "7eb11946732e6410d4ba18dad3fbaf20",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 32294,
                            "upload_time": "2019-11-18T22:03:06",
                            "upload_time_iso_8601": "2019-11-18T22:03:06.384019Z",
                            "url": "https://files.pythonhosted.org/packages/0e/75/b3875f685ba4d02c8cce12b86200e139617acde417fab40df2e462d85673/ocrd_keraslm-0.3.2.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.4.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "75364345d2b6e6e2aea1682a09b2e5f8",
                                "sha256": "ccdf1fd72729e8e77ee88888162a69f7e48bb88cf80b331c27592e0933d6f6d2"
                            },
                            "downloads": -1,
                            "filename": "ocrd_keraslm-0.4.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "75364345d2b6e6e2aea1682a09b2e5f8",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 38335,
                            "upload_time": "2020-08-22T15:49:31",
                            "upload_time_iso_8601": "2020-08-22T15:49:31.401292Z",
                            "url": "https://files.pythonhosted.org/packages/b9/1c/ece5bec1b0675e24bd4d96543ed730163281d72260b126ec604e39d04d44/ocrd_keraslm-0.4.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "62d567bfd32658850e40ae6f9e9a0890",
                                "sha256": "adca5df2bbe494dcc9caa067fe5bbea8c755f9dd0ce3a826a2ef9d3934eb068b"
                            },
                            "downloads": -1,
                            "filename": "ocrd_keraslm-0.4.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "62d567bfd32658850e40ae6f9e9a0890",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 32303,
                            "upload_time": "2020-08-22T15:49:33",
                            "upload_time_iso_8601": "2020-08-22T15:49:33.175992Z",
                            "url": "https://files.pythonhosted.org/packages/b5/fe/2c958a34bb42f04970545c4bb080977e0866c681532315e3ef9de61c70e0/ocrd_keraslm-0.4.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ]
                },
                "urls": [
                    {
                        "comment_text": "",
                        "digests": {
                            "md5": "75364345d2b6e6e2aea1682a09b2e5f8",
                            "sha256": "ccdf1fd72729e8e77ee88888162a69f7e48bb88cf80b331c27592e0933d6f6d2"
                        },
                        "downloads": -1,
                        "filename": "ocrd_keraslm-0.4.0-py3-none-any.whl",
                        "has_sig": false,
                        "md5_digest": "75364345d2b6e6e2aea1682a09b2e5f8",
                        "packagetype": "bdist_wheel",
                        "python_version": "py3",
                        "requires_python": null,
                        "size": 38335,
                        "upload_time": "2020-08-22T15:49:31",
                        "upload_time_iso_8601": "2020-08-22T15:49:31.401292Z",
                        "url": "https://files.pythonhosted.org/packages/b9/1c/ece5bec1b0675e24bd4d96543ed730163281d72260b126ec604e39d04d44/ocrd_keraslm-0.4.0-py3-none-any.whl",
                        "yanked": false,
                        "yanked_reason": null
                    },
                    {
                        "comment_text": "",
                        "digests": {
                            "md5": "62d567bfd32658850e40ae6f9e9a0890",
                            "sha256": "adca5df2bbe494dcc9caa067fe5bbea8c755f9dd0ce3a826a2ef9d3934eb068b"
                        },
                        "downloads": -1,
                        "filename": "ocrd_keraslm-0.4.0.tar.gz",
                        "has_sig": false,
                        "md5_digest": "62d567bfd32658850e40ae6f9e9a0890",
                        "packagetype": "sdist",
                        "python_version": "source",
                        "requires_python": null,
                        "size": 32303,
                        "upload_time": "2020-08-22T15:49:33",
                        "upload_time_iso_8601": "2020-08-22T15:49:33.175992Z",
                        "url": "https://files.pythonhosted.org/packages/b5/fe/2c958a34bb42f04970545c4bb080977e0866c681532315e3ef9de61c70e0/ocrd_keraslm-0.4.0.tar.gz",
                        "yanked": false,
                        "yanked_reason": null
                    }
                ],
                "vulnerabilities": []
            },
            "url": "https://github.com/OCR-D/ocrd_keraslm"
        },
        "url": "https://github.com/OCR-D/ocrd_keraslm"
    },
    {
        "compliant_cli": false,
        "files": {
            "Dockerfile": "FROM ocrd/core\nMAINTAINER OCR-D\nENV DEBIAN_FRONTEND noninteractive\nENV PYTHONIOENCODING utf8\nENV LC_ALL C.UTF-8\nENV LANG C.UTF-8\n\nWORKDIR /build-ocrd\nCOPY setup.py .\nCOPY requirements.txt .\nRUN apt-get update && \\\n    apt-get -y install --no-install-recommends \\\n    ca-certificates \\\n    make \\\n    git\nCOPY ocrd_kraken ./ocrd_kraken\nRUN pip3 install --upgrade pip\nRUN pip3 install .\n\nENTRYPOINT [\"/bin/sh\", \"-c\"]\n",
            "README.md": "# ocrd_kraken\n\n> Wrapper for the kraken OCR engine\n\n[![image](https://travis-ci.org/OCR-D/ocrd_kraken.svg?branch=master)](https://travis-ci.org/OCR-D/ocrd_kraken)\n[![Docker Automated build](https://img.shields.io/docker/automated/ocrd/kraken.svg)](https://hub.docker.com/r/ocrd/kraken/tags/)\n[![image](https://circleci.com/gh/OCR-D/ocrd_kraken.svg?style=svg)](https://circleci.com/gh/OCR-D/ocrd_kraken)\n",
            "ocrd-tool.json": "{\n  \"git_url\": \"https://github.com/OCR-D/ocrd_kraken\",\n  \"version\": \"0.0.2\",\n  \"tools\": {\n    \"ocrd-kraken-binarize\": {\n      \"executable\": \"ocrd-kraken-binarize\",\n      \"input_file_grp\": \"OCR-D-IMG\",\n      \"output_file_grp\": \"OCR-D-IMG-BIN\",\n      \"categories\": [\n        \"Image preprocessing\"\n      ],\n      \"steps\": [\n        \"preprocessing/optimization/binarization\"\n      ],\n      \"description\": \"Binarize images with kraken\",\n      \"parameters\": {\n        \"level-of-operation\": {\n          \"type\": \"string\",\n          \"default\": \"page\",\n          \"enum\": [\"page\", \"block\", \"line\"]\n        }\n      }\n    },\n    \"ocrd-kraken-segment\": {\n      \"executable\": \"ocrd-kraken-segment\",\n      \"categories\": [\n        \"Layout analysis\"\n      ],\n      \"steps\": [\n        \"layout/segmentation/region\"\n      ],\n      \"description\": \"Block segmentation with kraken\",\n      \"parameters\": {\n        \"text_direction\": {\n          \"type\": \"string\",\n          \"description\": \"Sets principal text direction\",\n          \"enum\": [\"horizontal-lr\", \"horizontal-rl\", \"vertical-lr\", \"vertical-rl\"],\n          \"default\": \"horizontal-lr\"\n        },\n        \"script_detect\": {\n          \"type\": \"boolean\",\n          \"description\": \"Enable script detection on segmenter output\",\n          \"default\": false\n        },\n        \"maxcolseps\": {\"type\": \"number\", \"format\": \"integer\", \"default\": 2},\n        \"scale\": {\"type\": \"number\", \"format\": \"float\", \"default\": 0},\n        \"black_colseps\": {\"type\": \"boolean\", \"default\": false},\n        \"white_colseps\": {\"type\": \"boolean\", \"default\": false},\n        \"level-of-operation\": {\n          \"type\": \"string\",\n          \"default\": \"page\",\n          \"enum\": [\"page\", \"block\", \"line\"]\n        }\n      }\n    },\n    \"ocrd-kraken-ocr\": {\n      \"executable\": \"ocrd-kraken-ocr\",\n      \"categories\": [\"Text recognition and optimization\"],\n      \"steps\": [\n        \"recognition/text-recognition\"\n      ],\n      \"description\": \"OCR with kraken\",\n      \"parameters\": {\n        \"lines-json\": {\n          \"type\": \"string\",\n          \"format\": \"url\",\n          \"required\": \"true\",\n          \"description\": \"URL to line segmentation in JSON\"\n        }\n      }\n    }\n\n  }\n}\n",
            "setup.py": "# -*- coding: utf-8 -*-\n\"\"\"\nInstalls two binaries:\n\n    - ocrd-kraken-binarize\n    - ocrd-kraken-segment\n\"\"\"\nimport codecs\n\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='ocrd_kraken',\n    version='0.1.2',\n    description='kraken bindings',\n    long_description=codecs.open('README.md', encoding='utf-8').read(),\n    long_description_content_type='text/markdown',\n    author='Konstantin Baierer, Kay-Michael W\u00fcrzner',\n    author_email='unixprog@gmail.com, wuerzner@gmail.com',\n    url='https://github.com/OCR-D/ocrd_kraken',\n    license='Apache License 2.0',\n    packages=find_packages(exclude=('tests', 'docs')),\n    install_requires=[\n        'ocrd >= 1.0.0a4',\n        'kraken == 0.9.16',\n        'click >= 7',\n    ],\n    package_data={\n        '': ['*.json', '*.yml', '*.yaml'],\n    },\n    entry_points={\n        'console_scripts': [\n            'ocrd-kraken-binarize=ocrd_kraken.cli:ocrd_kraken_binarize',\n            'ocrd-kraken-segment=ocrd_kraken.cli:ocrd_kraken_segment',\n        ]\n    },\n)\n"
        },
        "git": {
            "last_commit": "Thu Sep 24 15:17:56 2020 +0200",
            "latest_tag": "v0.1.2",
            "number_of_commits": "89",
            "url": "https://github.com/OCR-D/ocrd_kraken"
        },
        "name": "ocrd_kraken",
        "ocrd_tool": {
            "git_url": "https://github.com/OCR-D/ocrd_kraken",
            "tools": {
                "ocrd-kraken-binarize": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Binarize images with kraken",
                    "executable": "ocrd-kraken-binarize",
                    "input_file_grp": "OCR-D-IMG",
                    "output_file_grp": "OCR-D-IMG-BIN",
                    "parameters": {
                        "level-of-operation": {
                            "default": "page",
                            "enum": [
                                "page",
                                "block",
                                "line"
                            ],
                            "type": "string"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/binarization"
                    ]
                },
                "ocrd-kraken-ocr": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "OCR with kraken",
                    "executable": "ocrd-kraken-ocr",
                    "parameters": {
                        "lines-json": {
                            "description": "URL to line segmentation in JSON",
                            "format": "url",
                            "required": "true",
                            "type": "string"
                        }
                    },
                    "steps": [
                        "recognition/text-recognition"
                    ]
                },
                "ocrd-kraken-segment": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Block segmentation with kraken",
                    "executable": "ocrd-kraken-segment",
                    "parameters": {
                        "black_colseps": {
                            "default": false,
                            "type": "boolean"
                        },
                        "level-of-operation": {
                            "default": "page",
                            "enum": [
                                "page",
                                "block",
                                "line"
                            ],
                            "type": "string"
                        },
                        "maxcolseps": {
                            "default": 2,
                            "format": "integer",
                            "type": "number"
                        },
                        "scale": {
                            "default": 0,
                            "format": "float",
                            "type": "number"
                        },
                        "script_detect": {
                            "default": false,
                            "description": "Enable script detection on segmenter output",
                            "type": "boolean"
                        },
                        "text_direction": {
                            "default": "horizontal-lr",
                            "description": "Sets principal text direction",
                            "enum": [
                                "horizontal-lr",
                                "horizontal-rl",
                                "vertical-lr",
                                "vertical-rl"
                            ],
                            "type": "string"
                        },
                        "white_colseps": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/segmentation/region"
                    ]
                }
            },
            "version": "0.0.2"
        },
        "ocrd_tool_validate": "<report valid=\"false\">\n  <error>[tools.ocrd-kraken-binarize.input_file_grp] 'OCR-D-IMG' is not of type 'array'</error>\n  <error>[tools.ocrd-kraken-binarize.output_file_grp] 'OCR-D-IMG-BIN' is not of type 'array'</error>\n  <error>[tools.ocrd-kraken-binarize.parameters.level-of-operation] 'description' is a required property</error>\n  <error>[tools.ocrd-kraken-segment] 'input_file_grp' is a required property</error>\n  <error>[tools.ocrd-kraken-segment.parameters.maxcolseps] 'description' is a required property</error>\n  <error>[tools.ocrd-kraken-segment.parameters.scale] 'description' is a required property</error>\n  <error>[tools.ocrd-kraken-segment.parameters.black_colseps] 'description' is a required property</error>\n  <error>[tools.ocrd-kraken-segment.parameters.white_colseps] 'description' is a required property</error>\n  <error>[tools.ocrd-kraken-segment.parameters.level-of-operation] 'description' is a required property</error>\n  <error>[tools.ocrd-kraken-ocr] 'input_file_grp' is a required property</error>\n  <error>[tools.ocrd-kraken-ocr.parameters.lines-json.required] 'true' is not of type 'boolean'</error>\n</report>",
        "official": false,
        "org_plus_name": "OCR-D/ocrd_kraken",
        "python": {
            "author": "Konstantin Baierer, Kay-Michael W\u00fcrzner",
            "author-email": "unixprog@gmail.com, wuerzner@gmail.com",
            "name": "ocrd_kraken",
            "pypi": {
                "info": {
                    "author": "Konstantin Baierer, Kay-Michael W\u00fcrzner",
                    "author_email": "unixprog@gmail.com, wuerzner@gmail.com",
                    "bugtrack_url": null,
                    "classifiers": [],
                    "description": "# ocrd_kraken\n\n> Wrapper for the kraken OCR engine\n\n[![image](https://travis-ci.org/OCR-D/ocrd_kraken.svg?branch=master)](https://travis-ci.org/OCR-D/ocrd_kraken)\n[![Docker Automated build](https://img.shields.io/docker/automated/ocrd/kraken.svg)](https://hub.docker.com/r/ocrd/kraken/tags/)\n[![image](https://circleci.com/gh/OCR-D/ocrd_kraken.svg?style=svg)](https://circleci.com/gh/OCR-D/ocrd_kraken)\n\n\n",
                    "description_content_type": "text/markdown",
                    "docs_url": null,
                    "download_url": "",
                    "downloads": {
                        "last_day": -1,
                        "last_month": -1,
                        "last_week": -1
                    },
                    "home_page": "https://github.com/OCR-D/ocrd_kraken",
                    "keywords": "",
                    "license": "Apache License 2.0",
                    "maintainer": "",
                    "maintainer_email": "",
                    "name": "ocrd-kraken",
                    "package_url": "https://pypi.org/project/ocrd-kraken/",
                    "platform": "",
                    "project_url": "https://pypi.org/project/ocrd-kraken/",
                    "project_urls": {
                        "Homepage": "https://github.com/OCR-D/ocrd_kraken"
                    },
                    "release_url": "https://pypi.org/project/ocrd-kraken/0.1.1/",
                    "requires_dist": [
                        "ocrd (>=1.0.0a4)",
                        "kraken (==0.9.16)",
                        "click (>=7)"
                    ],
                    "requires_python": "",
                    "summary": "kraken bindings",
                    "version": "0.1.1",
                    "yanked": false,
                    "yanked_reason": null
                },
                "last_serial": 6008613,
                "releases": {
                    "0.0.2": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "b065398af77f4804763665f50503e141",
                                "sha256": "a0de30df5e8b7d9fe1ed3343a8fa3a413620828a2cdf46bcab8d77e864869d53"
                            },
                            "downloads": -1,
                            "filename": "ocrd_kraken-0.0.2-py2-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "b065398af77f4804763665f50503e141",
                            "packagetype": "bdist_wheel",
                            "python_version": "py2",
                            "requires_python": null,
                            "size": 10691,
                            "upload_time": "2019-01-04T13:42:30",
                            "upload_time_iso_8601": "2019-01-04T13:42:30.728403Z",
                            "url": "https://files.pythonhosted.org/packages/b4/52/aea22b8cfab48546e10118e0eb7e70dc108fe633af3e07194dfd04e00fb2/ocrd_kraken-0.0.2-py2-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "67b290066697cbaddb71a4ff92eeb9f5",
                                "sha256": "805fb1aa976f9ee1275e347b1fee2413af3ea7cc8972af84464c6f4253ebdd6e"
                            },
                            "downloads": -1,
                            "filename": "ocrd_kraken-0.0.2-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "67b290066697cbaddb71a4ff92eeb9f5",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 9634,
                            "upload_time": "2019-01-04T13:42:32",
                            "upload_time_iso_8601": "2019-01-04T13:42:32.808242Z",
                            "url": "https://files.pythonhosted.org/packages/06/00/a9843c2c73a086c1f66e28d6b0d64053ecd66995daddfb5c0f28e566c9f7/ocrd_kraken-0.0.2-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "351d10f31667ec43d9a117b9dd19e861",
                                "sha256": "a6464f3559acfb36947687d4e2e70cd7cb7e655d70234696e2e7c1b07f99bab8"
                            },
                            "downloads": -1,
                            "filename": "ocrd_kraken-0.0.2.tar.gz",
                            "has_sig": false,
                            "md5_digest": "351d10f31667ec43d9a117b9dd19e861",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 5003,
                            "upload_time": "2019-01-04T13:42:34",
                            "upload_time_iso_8601": "2019-01-04T13:42:34.101144Z",
                            "url": "https://files.pythonhosted.org/packages/32/bb/9e4299ec1d5f494e7bf14de447f361455f36ea0255181871ee937aae0528/ocrd_kraken-0.0.2.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "67161c2e535ac409369978252333eb35",
                                "sha256": "4e6b7e9d1930de1f0bd57dfd63f9418c4345842e7cc8fdd9b147e7d378b8fe51"
                            },
                            "downloads": -1,
                            "filename": "ocrd_kraken-0.1.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "67161c2e535ac409369978252333eb35",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 10442,
                            "upload_time": "2019-02-28T09:37:43",
                            "upload_time_iso_8601": "2019-02-28T09:37:43.225080Z",
                            "url": "https://files.pythonhosted.org/packages/d6/4b/d7027ac27e1228cf9aa3ecd94e412b371b2a63ab2c93c1b77ad5414380c1/ocrd_kraken-0.1.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "f1ec0ad2a8e1d655410e4321c7dfae60",
                                "sha256": "9bec610685e29d29e0614f2dfc300d201fbbff3f728140536031f14e4e65584c"
                            },
                            "downloads": -1,
                            "filename": "ocrd_kraken-0.1.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "f1ec0ad2a8e1d655410e4321c7dfae60",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 4121,
                            "upload_time": "2019-02-28T09:37:44",
                            "upload_time_iso_8601": "2019-02-28T09:37:44.655031Z",
                            "url": "https://files.pythonhosted.org/packages/cb/35/7be3dd70b97e276ce2300dddf165bfc21c0e469c2626d7d531a07b8bf0fb/ocrd_kraken-0.1.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.1": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "d6cc67071fe7db22ee35c58e6df6cb7c",
                                "sha256": "4d6a4a969ad43711cd22febfe2cc63c966b48b033537f87b433ea8254bb86a1a"
                            },
                            "downloads": -1,
                            "filename": "ocrd_kraken-0.1.1-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "d6cc67071fe7db22ee35c58e6df6cb7c",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 10595,
                            "upload_time": "2019-10-21T18:20:21",
                            "upload_time_iso_8601": "2019-10-21T18:20:21.215930Z",
                            "url": "https://files.pythonhosted.org/packages/20/af/393dbc0767398429e08adb761289656516ab18d4f65d8e5c81791c6cafdc/ocrd_kraken-0.1.1-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "22813065ca842796d8d53a2ae148b7c9",
                                "sha256": "67cad5aa4ce098262051f84c2f98a5a03be4b62e8bc4c2af1654f00b41caae25"
                            },
                            "downloads": -1,
                            "filename": "ocrd_kraken-0.1.1.tar.gz",
                            "has_sig": false,
                            "md5_digest": "22813065ca842796d8d53a2ae148b7c9",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 4209,
                            "upload_time": "2019-10-21T18:20:22",
                            "upload_time_iso_8601": "2019-10-21T18:20:22.550782Z",
                            "url": "https://files.pythonhosted.org/packages/bb/18/1c305cd6dc5b38880a3240bdca9f3ac53c2780a292b2a02812075ddddff7/ocrd_kraken-0.1.1.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ]
                },
                "urls": [
                    {
                        "comment_text": "",
                        "digests": {
                            "md5": "d6cc67071fe7db22ee35c58e6df6cb7c",
                            "sha256": "4d6a4a969ad43711cd22febfe2cc63c966b48b033537f87b433ea8254bb86a1a"
                        },
                        "downloads": -1,
                        "filename": "ocrd_kraken-0.1.1-py3-none-any.whl",
                        "has_sig": false,
                        "md5_digest": "d6cc67071fe7db22ee35c58e6df6cb7c",
                        "packagetype": "bdist_wheel",
                        "python_version": "py3",
                        "requires_python": null,
                        "size": 10595,
                        "upload_time": "2019-10-21T18:20:21",
                        "upload_time_iso_8601": "2019-10-21T18:20:21.215930Z",
                        "url": "https://files.pythonhosted.org/packages/20/af/393dbc0767398429e08adb761289656516ab18d4f65d8e5c81791c6cafdc/ocrd_kraken-0.1.1-py3-none-any.whl",
                        "yanked": false,
                        "yanked_reason": null
                    },
                    {
                        "comment_text": "",
                        "digests": {
                            "md5": "22813065ca842796d8d53a2ae148b7c9",
                            "sha256": "67cad5aa4ce098262051f84c2f98a5a03be4b62e8bc4c2af1654f00b41caae25"
                        },
                        "downloads": -1,
                        "filename": "ocrd_kraken-0.1.1.tar.gz",
                        "has_sig": false,
                        "md5_digest": "22813065ca842796d8d53a2ae148b7c9",
                        "packagetype": "sdist",
                        "python_version": "source",
                        "requires_python": null,
                        "size": 4209,
                        "upload_time": "2019-10-21T18:20:22",
                        "upload_time_iso_8601": "2019-10-21T18:20:22.550782Z",
                        "url": "https://files.pythonhosted.org/packages/bb/18/1c305cd6dc5b38880a3240bdca9f3ac53c2780a292b2a02812075ddddff7/ocrd_kraken-0.1.1.tar.gz",
                        "yanked": false,
                        "yanked_reason": null
                    }
                ],
                "vulnerabilities": []
            },
            "url": "https://github.com/OCR-D/ocrd_kraken"
        },
        "url": "https://github.com/OCR-D/ocrd_kraken"
    },
    {
        "compliant_cli": true,
        "files": {
            "Dockerfile": "# Patch and build Olena from Git, then\n# Install OCR-D wrapper for binarization\nFROM ocrd/core\n\nMAINTAINER OCR-D\n\nENV PREFIX=/usr/local\n\nWORKDIR /build-olena\nCOPY .gitmodules .\nCOPY Makefile .\nCOPY ocrd-tool.json .\nCOPY ocrd-olena-binarize .\n\nENV DEPS=\"g++ make automake git libtool\"\nRUN apt-get update && \\\n    apt-get -y install --no-install-recommends $DEPS && \\\n    make deps-ubuntu && \\\n    git init && \\\n    git submodule add https://github.com/OCR-D/olena.git repo/olena && \\\n    git submodule add https://github.com/OCR-D/assets.git repo/assets && \\\n    make build-olena install clean-olena && \\\n    apt-get -y remove $DEPS && \\\n    apt-get clean && \\\n    rm -fr /build-olena\n\nWORKDIR /data\nVOLUME /data\n\n#ENTRYPOINT [\"/usr/bin/ocrd-olena-binarize\"]\n#CMD [\"--help\"]\nCMD [\"/usr/bin/ocrd-olena-binarize\", \"--help\"]\n",
            "README.md": "# ocrd_olena\n\n> Binarize with Olena/scribo\n\n[![Build Status](https://travis-ci.org/OCR-D/ocrd_olena.svg?branch=master)](https://travis-ci.org/OCR-D/ocrd_olena)\n[![CircleCI](https://circleci.com/gh/OCR-D/ocrd_olena.svg?style=svg)](https://circleci.com/gh/OCR-D/ocrd_olena)\n[![Docker Automated build](https://img.shields.io/docker/automated/ocrd/core.svg)](https://hub.docker.com/r/ocrd/olena/tags/)\n\n## Requirements\n\n```\nmake deps-ubuntu\n```\n\n...will try to install the required packages on Ubuntu.\n\n## Installation\n\n```\nmake build-olena\n```\n\n...will download, patch and build Olena/scribo from source, and install locally (in VIRTUAL_ENV or in CWD/local).\n\n```\nmake install\n```\n\n...will do that, but additionally install `ocrd-binarize-olena` (the OCR-D wrapper).\n\n## Testing\n\n```\nmake test\n```\n\n...will clone the assets repository from Github, make a workspace copy, and run checksum tests for binarization on them.\n\n## Usage\n\nThis package has the following user interfaces:\n\n### command line interface `scribo-cli`\n\nConverts images in any format.\n\n```\nUsage: scribo-cli COMMAND [ARGS]\n\nList of available COMMAND options:\n\n  Full Toolchains\n  ---------------\n\n\n   * On documents\n\n     doc-ppc\t       Common preprocessing before looking for text.\n\n     doc-ocr           Find and recognize text. Output: the actual text\n     \t\t       and its location.\n\n     doc-dia           Analyse the document structure and extract the\n     \t\t       text. Output: an XML file with region and text\n     \t\t       information.\n\n\n\n   * On pictures\n\n     pic-loc           Try to localize text if there's any.\n\n     pic-ocr           Localize and try to recognize text.\n\n\n\n  Tools\n  -----\n\n\n     * xml2doc\t       Convert the XML results of document toolchains\n       \t\t       into user documents (HTML, PDF...).\n\n\n  Algorithms\n  ----------\n\n\n   * Binarization\n\n     otsu              Otsu's (1979) global thresholding algorithm.\n\n     niblack           Niblack's (1985) local thresholding algorithm.\n\n     sauvola           Sauvola and Pietikainen's (2000) local/adpative algorithm.\n\n     kim               Kim's (2004) algorithm.\n\n     wolf              Wolf and Jolion's (2004) algorithm.\n\n     sauvola-ms        Lazzara's (2013) multi-scale Sauvola algorithm.\n\n     sauvola-ms-fg     Extract foreground objects and run multi-scale\n                       Sauvola's algorithm.\n\n     sauvola-ms-split  Run multi-scale Sauvola's algorithm on each color\n                       component and merge results.\n\n     singh             Singh's (2014) algorithm.\n\n\n  Other\n  -----\n\n     version           Show version and exit\n\n     help              Show this message and exit\n\n\nFor command arguments, see 'scribo-cli COMMAND --help' for more information\non each specific COMMAND.\n```\n\nFor example:\n\n```sh\nscribo-cli sauvola-ms path/to/input.tif path/to/output.png --enable-negate-output\n```\n\nThis can also be used with the general-purpose image preprocessing OCR-D wrapper [ocrd-preprocess-image](https://github.com/bertsky/ocrd_wrap#ocr-d-processor-interface-ocrd-preprocess-image) to get the power of Olena's binarization to all structural levels of the PAGE segment hierarchy. (See [this parameter preset](https://github.com/bertsky/ocrd_wrap/blob/master/ocrd_wrap/param_scribo-cli-binarize-sauvola-ms-split.json) for an usage example.)\n\n### [OCR-D processor](https://ocr-d.de/en/spec/cli) interface `ocrd-olena-binarize`\n\nTo be used with [PageXML](https://github.com/PRImA-Research-Lab/PAGE-XML) documents in an [OCR-D](https://ocr-d.de) annotation workflow. Input could be any valid workspace with source images available. Currently covers the `Page` hierarchy level only. Uses either (the last) `AlternativeImage/@filename` (if any), or `Page/@imageFilename` (otherwise, cropping to `Border` if necessary). Adds an `AlternativeImage` with the result of binarization for every page.\n\n```\nUsage: ocrd-olena-binarize [OPTIONS]\n\n  OLENA's binarization algos for OCR-D (on page-level)\n\nOptions:\n  -I, --input-file-grp USE        File group(s) used as input\n  -O, --output-file-grp USE       File group(s) used as output\n  -g, --page-id ID                Physical page ID(s) to process\n  --overwrite                     Remove existing output pages/images\n                                  (with --page-id, remove only those)\n  -p, --parameter JSON-PATH       Parameters, either verbatim JSON string\n                                  or JSON file path\n  -m, --mets URL-PATH             URL or file path of METS to process\n  -w, --working-dir PATH          Working directory of local workspace\n  -l, --log-level [OFF|ERROR|WARN|INFO|DEBUG|TRACE]\n                                  Log level\n  -J, --dump-json                 Dump tool description as JSON and exit\n  -h, --help                      This help message\n  -V, --version                   Show version\n\nParameters:\n   \"impl\" [string - \"sauvola-ms-split\"]\n    The name of the actual binarization algorithm\n    Possible values: [\"sauvola\", \"sauvola-ms\", \"sauvola-ms-fg\", \"sauvola-\n    ms-split\", \"kim\", \"wolf\", \"niblack\", \"singh\", \"otsu\"]\n   \"k\" [number - 0.34]\n    Sauvola's formulae parameter (foreground weight decreases with k);\n    for Multiscale, multiplied to yield default 0.2/0.3/0.5; for Singh,\n    multiplied to yield default 0.06; for Niblack, multiplied to yield\n    default -0.2; for Wolf/Kim, used directly; for Otsu, does not apply\n   \"win-size\" [number - 0]\n    The (odd) window size in pixels; when zero (default), set to DPI; for\n    Otsu, does not apply\n   \"dpi\" [number - 0]\n    pixel density in dots per inch (overrides any meta-data in the\n    images); disabled when zero\n```\n\n## License\n\nCopyright 2018-2020 Project OCR-D\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
            "ocrd-tool.json": "{\n  \"version\": \"1.3.0\",\n  \"git_url\": \"https://github.com/OCR-D/ocrd_olena\",\n  \"tools\": {\n    \"ocrd-olena-binarize\": {\n      \"executable\": \"ocrd-olena-binarize\",\n      \"description\": \"popular binarization algorithms implemented by Olena/SCRIBO, wrapped for OCR-D (on page level only)\",\n      \"categories\": [\n        \"Image preprocessing\"\n      ],\n      \"steps\": [\n        \"preprocessing/optimization/binarization\"\n      ],\n      \"input_file_grp\": [\n        \"OCR-D-SEG-BLOCK\",\n        \"OCR-D-SEG-LINE\",\n        \"OCR-D-SEG-WORD\",\n        \"OCR-D-IMG\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-SEG-BLOCK\",\n        \"OCR-D-SEG-LINE\",\n        \"OCR-D-SEG-WORD\"\n      ],\n      \"parameters\": {\n        \"impl\": {\n          \"description\": \"The name of the actual binarization algorithm\",\n          \"type\": \"string\",\n          \"default\": \"sauvola-ms-split\",\n          \"enum\": [\"sauvola\", \"sauvola-ms\", \"sauvola-ms-fg\", \"sauvola-ms-split\", \"kim\", \"wolf\", \"niblack\", \"singh\", \"otsu\"]\n        },\n        \"k\": {\n          \"description\": \"Sauvola's formulae parameter (foreground weight decreases with k); for Multiscale, multiplied to yield default 0.2/0.3/0.5; for Singh, multiplied to yield default 0.06; for Niblack, multiplied to yield default -0.2; for Wolf/Kim, used directly; for Otsu, does not apply\",\n          \"format\": \"float\",\n          \"type\": \"number\",\n          \"default\": 0.34\n        },\n        \"win-size\": {\n          \"description\": \"The (odd) window size in pixels; when zero (default), set to DPI (or 301); for Otsu, does not apply\",\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"default\": 0\n        },\n        \"dpi\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"description\": \"pixel density in dots per inch (overrides any meta-data in the images); disabled when zero\",\n          \"default\": 0\n        }\n      }\n    }\n  }\n}\n",
            "setup.py": null
        },
        "git": {
            "last_commit": "Thu May 19 12:38:11 2022 +0200",
            "latest_tag": "v1.3.0",
            "number_of_commits": "234",
            "url": "https://github.com/OCR-D/ocrd_olena"
        },
        "name": "ocrd_olena",
        "ocrd_tool": {
            "git_url": "https://github.com/OCR-D/ocrd_olena",
            "tools": {
                "ocrd-olena-binarize": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "popular binarization algorithms implemented by Olena/SCRIBO, wrapped for OCR-D (on page level only)",
                    "executable": "ocrd-olena-binarize",
                    "input_file_grp": [
                        "OCR-D-SEG-BLOCK",
                        "OCR-D-SEG-LINE",
                        "OCR-D-SEG-WORD",
                        "OCR-D-IMG"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-BLOCK",
                        "OCR-D-SEG-LINE",
                        "OCR-D-SEG-WORD"
                    ],
                    "parameters": {
                        "dpi": {
                            "default": 0,
                            "description": "pixel density in dots per inch (overrides any meta-data in the images); disabled when zero",
                            "format": "float",
                            "type": "number"
                        },
                        "impl": {
                            "default": "sauvola-ms-split",
                            "description": "The name of the actual binarization algorithm",
                            "enum": [
                                "sauvola",
                                "sauvola-ms",
                                "sauvola-ms-fg",
                                "sauvola-ms-split",
                                "kim",
                                "wolf",
                                "niblack",
                                "singh",
                                "otsu"
                            ],
                            "type": "string"
                        },
                        "k": {
                            "default": 0.34,
                            "description": "Sauvola's formulae parameter (foreground weight decreases with k); for Multiscale, multiplied to yield default 0.2/0.3/0.5; for Singh, multiplied to yield default 0.06; for Niblack, multiplied to yield default -0.2; for Wolf/Kim, used directly; for Otsu, does not apply",
                            "format": "float",
                            "type": "number"
                        },
                        "win-size": {
                            "default": 0,
                            "description": "The (odd) window size in pixels; when zero (default), set to DPI (or 301); for Otsu, does not apply",
                            "format": "integer",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/binarization"
                    ]
                }
            },
            "version": "1.3.0"
        },
        "ocrd_tool_validate": "<report valid=\"true\">\n</report>",
        "official": false,
        "org_plus_name": "OCR-D/ocrd_olena",
        "url": "https://github.com/OCR-D/ocrd_olena"
    },
    {
        "compliant_cli": true,
        "files": {
            "Dockerfile": null,
            "README.md": "# ocrd_segment\n\nThis repository aims to provide a number of [OCR-D](https://ocr-d.de) [compliant](https://ocr-d.de/en/spec) [processors](https://ocr-d.de/en/spec/cli) for layout analysis and evaluation.\n\n[![image](https://img.shields.io/pypi/v/ocrd_segment.svg)](https://pypi.org/project/ocrd_segment/)\n\n## Installation\n\nIn your [Python virtual environment](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/), run:\n\n    pip install ocrd_segment\n\n\n## Usage\n\nContains processors for various tasks:\n\n  - exporting segment images (including results from preprocessing like cropping/masking, deskewing, dewarping or binarization) along with polygon coordinates and metadata:\n    - [ocrd-segment-extract-pages](ocrd_segment/extract_pages.py) (for pages, also exports [MS-COCO](https://cocodataset.org/) format and pageview plots)\n    - [ocrd-segment-extract-regions](ocrd_segment/extract_regions.py) (for regions, also exports [MS-COCO](https://cocodataset.org/) format))\n    - [ocrd-segment-extract-lines](ocrd_segment/extract_lines.py) (for lines, also exports text and .xlsx)\n    - [ocrd-segment-extract-words](ocrd_segment/extract_words.py) (for words, also exports text)\n    - [ocrd-segment-extract-glyphs](ocrd_segment/extract_glyphs.py) (for glyphs, also exports text)\n  - importing layout segmentations from other formats:\n    - [ocrd-segment-from-masks](ocrd_segment/import_image_segmentation.py) (for mask/label images, i.e. semantic segmentation)\n    - [ocrd-segment-from-coco](ocrd_segment/import_coco_segmentation.py) (for [MS-COCO](https://cocodataset.org/) annotation)\n  - post-processing or repairing layout segmentations:\n    - [ocrd-segment-repair](ocrd_segment/repair.py) (validity and consistency of all coordinates; also, for regions, reduce overlaps/redundancy between neighbours, and/or simplify polygons, and/or shrink to the alpha shape of foreground contours)\n    - [ocrd-segment-project](ocrd_segment/project.py) (remake segment coordinates into the concave hull / alpha shape of their constituents)\n    - [ocrd-segment-replace-original](ocrd_segment/replace_original.py) (rebase all segments on cropped+deskewed border frame as new full page)\n    - [ocrd-segment-replace-page](ocrd_segment/replace_page.py) (2 input fileGrps; overwrite segmentation below page of first fileGrp by all segments of second fileGrp, rebasing all coordinates; \"inverse\" of `replace-original`)\n    - [ocrd-segment-replace-text](ocrd_segment/replace_text.py) (insert text below page from single-segment text files; \"inverse\" of `extract-*`)\n  - comparing different layout segmentations:\n    - [ocrd-segment-evaluate](ocrd_segment/evaluate.py) :construction: (2 input fileGrps; align, compare and evaluate page segmentations; early stage)\n    - [page-segment-evaluate](ocrd_segment/evaluate.py) (same with standalone CLI)\n  - pattern-based segmentation (input file groups N=1, based on a PAGE template, e.g. from Aletheia, and some XSLT or Python to apply it to the input file group)\n    - `ocrd-segment-via-template` :construction: (unpublished)\n  - data-driven segmentation (input file groups N=1, based on a statistical model, e.g. Neural Network)  \n    - `ocrd-segment-via-model` :construction: (unpublished)\n\nFor detailed behaviour, see `--help` on each processor CLI.\nFor detailed description on input/output and parameters, see [ocrd-tool.json](ocrd_segment/ocrd-tool.json) or `--dump-json` on each processor CLI.\n\n## Testing\n\nNone yet.\n",
            "ocrd-tool.json": "{\n  \"version\": \"0.1.21\",\n  \"git_url\": \"https://github.com/OCR-D/ocrd_segment\",\n  \"tools\": {\n    \"ocrd-segment-repair\": {\n      \"executable\": \"ocrd-segment-repair\",\n      \"categories\": [\"Layout analysis\"],\n      \"description\": \"Analyse and repair region segmentation; at least ensure validity and consistency of coordinates.\",\n      \"input_file_grp\": [\n        \"OCR-D-IMG\",\n        \"OCR-D-SEG-BLOCK\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-SEG-BLOCK\"\n      ],\n      \"steps\": [\"layout/segmentation/region\"],\n      \"parameters\": {\n        \"simplify\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"minimum\": 0,\n          \"default\": 0,\n          \"description\": \"Distance (in px) used to simplify all segment polygons. (Avoid values larger than xheight/scale, or corners will be chopped off.) Set to 0 to disable.\"\n        },\n        \"plausibilize\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"Identify and remove redundancies on text regions and text lines (deleting/merging/shrinking where overlaps occur).\"\n        },\n        \"plausibilize_merge_min_overlap\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"minimum\": 0.0,\n          \"maximum\": 1.0,\n          \"default\": 0.90,\n          \"description\": \"When merging a region or line almost contained in another, require at least this ratio of area is shared with the other.\"\n        },\n        \"sanitize\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"Shrink each region such that its coordinates become the minimal concave hull of its binary foreground. (Assumes that a perfect binarization is available.)\"\n        },\n        \"sanitize_padding\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"minimum\": 1,\n          \"default\": 5,\n          \"description\": \"When shrinking a region, enlarge the resulting hull by this amount of pixels in each direction.\"\n        }\n      }\n    },\n    \"ocrd-segment-project\": {\n      \"executable\": \"ocrd-segment-project\",\n      \"categories\": [\"Layout analysis\"],\n      \"description\": \"Project segment coordinates to their structural parents\",\n      \"input_file_grp\": [\n        \"OCR-D-SEG-BLOCK\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-SEG-BLOCK\"\n      ],\n      \"steps\": [\"layout/segmentation\"],\n      \"parameters\": {\n        \"level-of-operation\": {\n          \"type\": \"string\",\n          \"enum\": [\"page\", \"table\", \"region\", \"line\", \"word\"],\n          \"default\": \"page\",\n          \"description\": \"hierarchy level which to assign new coordinates to\"\n        },\n        \"padding\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"minimum\": 0,\n          \"default\": 10,\n          \"description\": \"margin (in px) to extend the hull in every direction\"\n        }\n      }\n    },\n    \"ocrd-segment-from-masks\": {\n      \"executable\": \"ocrd-segment-from-masks\",\n      \"categories\": [\"Layout analysis\"],\n      \"description\": \"Import region segmentation from mask images (segments filled with colors encoding classes). Input fileGrp format is `base,mask` (i.e. PAGE or original image files first, mask image files second).\",\n      \"input_file_grp\": [\n        \"OCR-D-IMG\",\n        \"OCR-D-SEG-PAGE\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-SEG-BLOCK\"\n      ],\n      \"steps\": [\"layout/segmentation/region\"],\n      \"parameters\": {\n        \"colordict\": {\n          \"type\": \"object\",\n          \"default\": {\n            \"FFFFFF00\": \"\",\n            \"FFFFFFFF\": \"Border\",\n            \"8B4513FF\": \"TableRegion\",\n            \"4682B4FF\": \"AdvertRegion\",\n            \"FF8C00FF\": \"ChemRegion\",\n            \"9400D3FF\": \"MusicRegion\",\n            \"9ACDD2FF\": \"MapRegion\",\n            \"0000FFFF\": \"TextRegion\",\n            \"0000FFFA\": \"TextRegion:paragraph\",\n            \"0000FFF5\": \"TextRegion:heading\",\n            \"0000FFF0\": \"TextRegion:caption\",\n            \"0000FFEB\": \"TextRegion:header\",\n            \"0000FFE6\": \"TextRegion:footer\",\n            \"0000FFE1\": \"TextRegion:page-number\",\n            \"0000FFDC\": \"TextRegion:drop-capital\",\n            \"0000FFD7\": \"TextRegion:credit\",\n            \"0000FFD2\": \"TextRegion:floating\",\n            \"0000FFCD\": \"TextRegion:signature-mark\",\n            \"0000FFC8\": \"TextRegion:catch-word\",\n            \"0000FFC3\": \"TextRegion:marginalia\",\n            \"0000FFBE\": \"TextRegion:footnote\",\n            \"0000FFB9\": \"TextRegion:footnote-continued\",\n            \"0000FFB4\": \"TextRegion:endnote\",\n            \"0000FFAF\": \"TextRegion:TOC-entry\",\n            \"0000FFA5\": \"TextRegion:list-label\",\n            \"0000FFA0\": \"TextRegion:other\",\n            \"800080FF\": \"ChartRegion\",\n            \"800080FA\": \"ChartRegion:bar\",\n            \"800080F5\": \"ChartRegion:line\",\n            \"800080F0\": \"ChartRegion:pie\",\n            \"800080EB\": \"ChartRegion:scatter\",\n            \"800080E6\": \"ChartRegion:surface\",\n            \"800080E1\": \"ChartRegion:other\",\n            \"008000FF\": \"GraphicRegion\",\n            \"008000FA\": \"GraphicRegion:logo\",\n            \"008000F0\": \"GraphicRegion:letterhead\",\n            \"008000EB\": \"GraphicRegion:decoration\",\n            \"008000E6\": \"GraphicRegion:frame\",\n            \"008000E1\": \"GraphicRegion:handwritten-annotation\",\n            \"008000DC\": \"GraphicRegion:stamp\",\n            \"008000D7\": \"GraphicRegion:signature\",\n            \"008000D2\": \"GraphicRegion:barcode\",\n            \"008000CD\": \"GraphicRegion:paper-grow\",\n            \"008000C8\": \"GraphicRegion:punch-hole\",\n            \"008000C3\": \"GraphicRegion:other\",\n            \"00CED1FF\": \"ImageRegion\",\n            \"B8860BFF\": \"LineDrawingRegion\",\n            \"00BFFFFF\": \"MathsRegion\",\n            \"FF0000FF\": \"NoiseRegion\",\n            \"FF00FFFF\": \"SeparatorRegion\",\n            \"646464FF\": \"UnknownRegion\",\n            \"637C81FF\": \"CustomRegion\"},\n          \"description\": \"Mapping from color values in the input masks to region types to annotate; color must be encoded hexadecimal (e.g. '00FF00'); region type equals the element name in PAGE-XML, optionally followed by a colon and a subtype (e.g. 'TextRegion:paragraph'; unmapped colors will be ignored (i.e. treated as background)). Default is PageViewer color scheme. Cf. colordict.json output and colordict parameter of ocrd-segment-extract-pages.\"\n        }\n      }\n    },\n    \"ocrd-segment-from-coco\": {\n      \"executable\": \"ocrd-segment-from-coco\",\n      \"categories\": [\"Layout analysis\"],\n      \"description\": \"Import region segmentation from COCO detection format JSON (for all pages). Input fileGrp format is `base,COCO` (i.e. PAGE or original image files first, COCO file second).\",\n      \"input_file_grp\": [\n        \"OCR-D-IMG\",\n        \"OCR-D-SEG-PAGE\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-SEG-BLOCK\"\n      ],\n      \"steps\": [\"layout/segmentation/region\"],\n      \"parameters\": {\n      }\n    },\n    \"ocrd-segment-extract-pages\": {\n      \"executable\": \"ocrd-segment-extract-pages\",\n      \"categories\": [\"Image preprocessing\"],\n      \"description\": \"Extract page segmentation as page images (deskewed according to `/Page/@orientation` and cropped+masked along `/Page/Border`) + JSON (including region coordinates/classes and meta-data), as binarized images, and as mask images (segments filled with colors encoding classes) + COCO detection format JSON (for all pages). Output fileGrp format is `raw[,binarized[,mask]]` (i.e. fall back to first group).\",\n      \"input_file_grp\": [\n        \"OCR-D-SEG-PAGE\",\n        \"OCR-D-GT-SEG-PAGE\",\n        \"OCR-D-SEG-BLOCK\",\n        \"OCR-D-GT-SEG-BLOCK\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-IMG-PAGE\"\n      ],\n      \"steps\": [\"layout/analysis\"],\n      \"parameters\": {\n        \"feature_filter\": {\n          \"type\": \"string\",\n          \"default\": \"\",\n          \"description\": \"Comma-separated list of forbidden image features (e.g. `binarized,despeckled`).\"\n        },\n        \"mimetype\": {\n          \"type\": \"string\",\n          \"enum\": [\"image/bmp\", \"application/postscript\", \"image/gif\", \"image/jpeg\", \"image/jp2\", \"image/png\", \"image/x-portable-pixmap\", \"image/tiff\"],\n          \"default\": \"image/png\",\n          \"description\": \"File format to save extracted images in.\"\n        },\n        \"transparency\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"description\": \"Add alpha channels with segment masks to the images\"\n        },\n        \"plot_overlay\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"When generating mask images with `plot_segmasks`, instead of starting with a blank image and having layers and segments replace each other, start with the raw image and superimpose (alpha-composite) layers and segments.\"\n        },\n        \"plot_segmasks\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\",\n            \"enum\": [\"order\", \"page\", \"region\", \"line\", \"word\", \"glyph\"]\n          },\n          \"default\": [\"region\"],\n          \"description\": \"Generate mask images of the page segmentation in the last output fileGrp. Draw filled polygons for each specified PAGE hierarchy level in the list (in that order), where 'page' denotes the Border polygon, 'region' denotes Region types, 'line' denotes TextLine, 'word' denotes Word and 'glyph' denotes Glyph. Each type must be mapped in `colordict`. Where neighbors of the same type intersect, show a warning (unless `plot_overlay` is true). If 'order' is present, then draw arrows for reading order, too.\"\n        },\n        \"colordict\": {\n          \"type\": \"object\",\n          \"default\": {\n            \"\":                                     \"FFFFFF00\",\n            \"ReadingOrderLevel0\":                   \"DC143CFF\",\n            \"ReadingOrderLevel1\":                   \"9400D3FF\",\n            \"ReadingOrderLevelN\":                   \"8B0000FF\",\n            \"Border\":                               \"FFFFFFFF\",\n            \"TableRegion\":                          \"8B4513FF\",\n            \"AdvertRegion\":                         \"4682B4FF\",\n            \"ChemRegion\":                           \"FF8C00FF\",\n            \"MusicRegion\":                          \"9400D3FF\",\n            \"MapRegion\":                            \"9ACDD2FF\",\n            \"TextRegion\":                           \"0000FFFF\",\n            \"TextRegion:paragraph\":                 \"0000FFFA\",\n            \"TextRegion:heading\":                   \"0000FFF5\",\n            \"TextRegion:caption\":                   \"0000FFF0\",\n            \"TextRegion:header\":                    \"0000FFEB\",\n            \"TextRegion:footer\":                    \"0000FFE6\",\n            \"TextRegion:page-number\":               \"0000FFE1\",\n            \"TextRegion:drop-capital\":              \"0000FFDC\",\n            \"TextRegion:credit\":                    \"0000FFD7\",\n            \"TextRegion:floating\":                  \"0000FFD2\",\n            \"TextRegion:signature-mark\":            \"0000FFCD\",\n            \"TextRegion:catch-word\":                \"0000FFC8\",\n            \"TextRegion:marginalia\":                \"0000FFC3\",\n            \"TextRegion:footnote\":                  \"0000FFBE\",\n            \"TextRegion:footnote-continued\":        \"0000FFB9\",\n            \"TextRegion:endnote\":                   \"0000FFB4\",\n            \"TextRegion:TOC-entry\":                 \"0000FFAF\",\n            \"TextRegion:list-label\":                \"0000FFA5\",\n            \"TextRegion:other\":                     \"0000FFA0\",\n            \"ChartRegion\":                          \"800080FF\",\n            \"ChartRegion:bar\":                      \"800080FA\",\n            \"ChartRegion:line\":                     \"800080F5\",\n            \"ChartRegion:pie\":                      \"800080F0\",\n            \"ChartRegion:scatter\":                  \"800080EB\",\n            \"ChartRegion:surface\":                  \"800080E6\",\n            \"ChartRegion:other\":                    \"800080E1\",\n            \"GraphicRegion\":                        \"008000FF\",\n            \"GraphicRegion:logo\":                   \"008000FA\",\n            \"GraphicRegion:letterhead\":             \"008000F0\",\n            \"GraphicRegion:decoration\":             \"008000EB\",\n            \"GraphicRegion:frame\":                  \"008000E6\",\n            \"GraphicRegion:handwritten-annotation\": \"008000E1\",\n            \"GraphicRegion:stamp\":                  \"008000DC\",\n            \"GraphicRegion:signature\":              \"008000D7\",\n            \"GraphicRegion:barcode\":                \"008000D2\",\n            \"GraphicRegion:paper-grow\":             \"008000CD\",\n            \"GraphicRegion:punch-hole\":             \"008000C8\",\n            \"GraphicRegion:other\":                  \"008000C3\",\n            \"ImageRegion\":                          \"00CED1FF\",\n            \"LineDrawingRegion\":                    \"B8860BFF\",\n            \"MathsRegion\":                          \"00BFFFFF\",\n            \"NoiseRegion\":                          \"FF0000FF\",\n            \"SeparatorRegion\":                      \"FF00FFFF\",\n            \"UnknownRegion\":                        \"646464FF\",\n            \"CustomRegion\":                         \"637C81FF\",\n            \"TextLine\":                             \"32CD32FF\",\n            \"Word\":                                 \"B22222FF\",\n            \"Glyph\":                                \"2E8B08FF\"},\n          \"description\": \"Mapping from segment types to extract to color values in the output mask images and COCO; color must be encoded hexadecimal (e.g. '00FF00'); region type equals the element name in PAGE-XML, optionally followed by a colon and a subtype (e.g. 'TextRegion:paragraph'; unmapped region types will be ignored (i.e. treated as background)). Default is PageViewer color scheme. Cf. colordict parameter of ocrd-segment-from-masks.\"\n        }\n      }\n    },\n    \"ocrd-segment-extract-regions\": {\n      \"executable\": \"ocrd-segment-extract-regions\",\n      \"categories\": [\"Image preprocessing\"],\n      \"description\": \"Extract region segmentation as region images (deskewed according to `*/@orientation` and cropped+masked along `*/Coords` polygon) + JSON (including region coordinates/classes and meta-data).\",\n      \"input_file_grp\": [\n        \"OCR-D-SEG-BLOCK\",\n        \"OCR-D-GT-SEG-BLOCK\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-IMG-REGION\"\n      ],\n      \"steps\": [\"layout/analysis\"],\n      \"parameters\": {\n        \"feature_filter\": {\n          \"type\": \"string\",\n          \"default\": \"\",\n          \"description\": \"Comma-separated list of forbidden image features (e.g. `binarized,despeckled`).\"\n        },\n        \"classes\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"NoiseRegion\",\n              \"LineDrawingRegion\",\n              \"AdvertRegion\",\n              \"ImageRegion\",\n              \"ChartRegion\",\n              \"MusicRegion\",\n              \"GraphicRegion\",\n              \"UnknownRegion\",\n              \"CustomRegion\",\n              \"SeparatorRegion\",\n              \"MathsRegion\",\n              \"TextRegion\",\n              \"MapRegion\",\n              \"ChemRegion\",\n              \"TableRegion\"\n            ]\n          },\n          \"default\": [\n            \"NoiseRegion\",\n            \"LineDrawingRegion\",\n            \"AdvertRegion\",\n            \"ImageRegion\",\n            \"ChartRegion\",\n            \"MusicRegion\",\n            \"GraphicRegion\",\n            \"UnknownRegion\",\n            \"CustomRegion\",\n            \"SeparatorRegion\",\n            \"MathsRegion\",\n            \"TextRegion\",\n            \"MapRegion\",\n            \"ChemRegion\",\n            \"TableRegion\"\n          ],        \n          \"description\": \"Array of region types to extract e.g. -P classes '[\\\"TextRegion\\\", \\\"TableRegion\\\", \\\"ImageRegion\\\"]' . If empty, all regions are allowed.\"\n        },\n        \"mimetype\": {\n          \"type\": \"string\",\n          \"enum\": [\"image/bmp\", \"application/postscript\", \"image/gif\", \"image/jpeg\", \"image/jp2\", \"image/png\", \"image/x-portable-pixmap\", \"image/tiff\"],\n          \"default\": \"image/png\",\n          \"description\": \"File format to save extracted images in.\"\n        },\n        \"transparency\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"description\": \"Add alpha channels with segment masks to the images\"\n        }\n      }\n    },\n    \"ocrd-segment-extract-lines\": {\n      \"executable\": \"ocrd-segment-extract-lines\",\n      \"categories\": [\"Image preprocessing\"],\n      \"description\": \"Extract line segmentation as line images + text file + JSON.\",\n      \"input_file_grp\": [\n        \"OCR-D-SEG-LINE\",\n        \"OCR-D-GT-SEG-LINE\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-IMG-LINE\"\n      ],\n      \"steps\": [\"layout/analysis\"],\n      \"parameters\": {\n        \"feature_filter\": {\n          \"type\": \"string\",\n          \"default\": \"\",\n          \"description\": \"Comma-separated list of forbidden image features (e.g. `binarized,despeckled`).\"\n        },\n        \"mimetype\": {\n          \"type\": \"string\",\n          \"enum\": [\"image/bmp\", \"application/postscript\", \"image/gif\", \"image/jpeg\", \"image/jp2\", \"image/png\", \"image/x-portable-pixmap\", \"image/tiff\"],\n          \"default\": \"image/png\",\n          \"description\": \"File format to save extracted images in.\"\n        },\n        \"transparency\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"description\": \"Add alpha channels with segment masks to the images\"\n        },\n        \"output-types\": {\n          \"type\": \"array\",\n          \"default\": [\"text\", \"json\", \"xlsx\"],\n          \"items\": {\n            \"type\": \"string\",\n            \"enum\": [\"text\", \"json\", \"xlsx\"]\n          },\n          \"description\": \"What kind of files to extract besides the line image itself (text/json files for  each line, xlsx per page).\"\n        },\n        \"library-convention\": {\n          \"type\": \"string\",\n          \"enum\": [\"slub\", \"sbb\", \"none\"],\n          \"default\": \"none\",\n          \"description\": \"For xlsx extraction, to make line images hyperlinked, use this scheme in reconstructing presentation URLs of original pages. Libraries have different conventions in their METS files. Set to none to disable.\"\n        },\n        \"min-line-length\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"minimum\": 0,\n          \"default\": 0,\n          \"description\": \"Only extract lines with at least this many characters.\"\n        },\n        \"min-line-width\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"minimum\": 1,\n          \"default\": 1,\n          \"description\": \"Only extract lines that are at least this wide (in px).\"\n        },\n        \"min-line-height\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"minimum\": 1,\n          \"default\": 1,\n          \"description\": \"Only extract lines that are at least this high (in px).\"\n        }\n      }\n    },\n    \"ocrd-segment-extract-words\": {\n      \"executable\": \"ocrd-segment-extract-words\",\n      \"categories\": [\"Image preprocessing\"],\n      \"description\": \"Extract word segmentation as word images (deskewed according to `*/@orientation` and cropped+masked along `*/Coords` polygon and dewarped as in `*/AlternativeImage`) + text file (according to `*/TextEquiv`) + JSON (including line coordinates and meta-data).\",\n      \"input_file_grp\": [\n        \"OCR-D-SEG-WORD\",\n        \"OCR-D-GT-SEG-WORD\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-IMG-WORD\"\n      ],\n      \"steps\": [\"layout/analysis\"],\n      \"parameters\": {\n        \"feature_filter\": {\n          \"type\": \"string\",\n          \"default\": \"\",\n          \"description\": \"Comma-separated list of forbidden image features (e.g. `binarized,despeckled`).\"\n        },\n        \"mimetype\": {\n          \"type\": \"string\",\n          \"enum\": [\"image/bmp\", \"application/postscript\", \"image/gif\", \"image/jpeg\", \"image/jp2\", \"image/png\", \"image/x-portable-pixmap\", \"image/tiff\"],\n          \"default\": \"image/png\",\n          \"description\": \"File format to save extracted images in.\"\n        },\n        \"transparency\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"description\": \"Add alpha channels with segment masks to the images\"\n        }\n      }\n    },\n    \"ocrd-segment-extract-glyphs\": {\n      \"executable\": \"ocrd-segment-extract-glyphs\",\n      \"categories\": [\"Image preprocessing\"],\n      \"description\": \"Extract glyph segmentation as glyph images (deskewed according to `*/@orientation` and cropped+masked along `*/Coords` polygon and dewarped as in `*/AlternativeImage`) + text file (according to `*/TextEquiv`) + JSON (including line coordinates and meta-data).\",\n      \"input_file_grp\": [\n        \"OCR-D-SEG-GLYPH\",\n        \"OCR-D-GT-SEG-GLYPH\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-IMG-GLYPH\"\n      ],\n      \"steps\": [\"layout/analysis\"],\n      \"parameters\": {\n        \"feature_filter\": {\n          \"type\": \"string\",\n          \"default\": \"\",\n          \"description\": \"Comma-separated list of forbidden image features (e.g. `binarized,despeckled`).\"\n        },\n        \"mimetype\": {\n          \"type\": \"string\",\n          \"enum\": [\"image/bmp\", \"application/postscript\", \"image/gif\", \"image/jpeg\", \"image/jp2\", \"image/png\", \"image/x-portable-pixmap\", \"image/tiff\"],\n          \"default\": \"image/png\",\n          \"description\": \"File format to save extracted images in.\"\n        },\n        \"transparency\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"description\": \"Add alpha channels with segment masks to the images\"\n        }\n      }\n    },\n    \"ocrd-segment-replace-original\": {\n      \"executable\": \"ocrd-segment-replace-original\",\n      \"categories\": [\"Image preprocessing\"],\n      \"description\": \"Extract page image (deskewed according to `/Page/@orientation` and cropped+masked along `/Page/Border`) and use it as @imageFilename, adjusting all coordinates\",\n      \"input_file_grp\": [\n        \"OCR-D-SEG-LINE\",\n        \"OCR-D-GT-SEG-LINE\",\n        \"OCR-D-OCR\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-SEG-CROP\"\n      ],\n      \"steps\": [\"layout/analysis\"],\n      \"parameters\": {\n          \"feature_selector\": {\n              \"type\": \"string\",\n              \"default\": \"\",\n              \"description\": \"Comma-separated list of required image features (e.g. `binarized,despeckled`)\"\n          },\n          \"feature_filter\": {\n              \"type\": \"string\",\n              \"default\": \"\",\n              \"description\": \"Comma-separated list of forbidden image features (e.g. `binarized,despeckled`)\"\n          },\n          \"transform_coordinates\": {\n              \"type\": \"boolean\",\n              \"default\": true,\n              \"description\": \"re-calculate coordinates for all segments of the structural hierarchy to be consistent with the coordinate system of the chosen image again (vital after cropping, deskewing etc; disable only if input coordinates must be assumed to be inconsistent with the original)\"\n          }\n      }\n    },\n    \"ocrd-segment-replace-page\": {\n      \"executable\": \"ocrd-segment-replace-page\",\n      \"categories\": [\"Image preprocessing\"],\n      \"description\": \"Replace everything below page level with another annotation, adjusting all coordinates\",\n      \"input_file_grp\": [\n        \"OCR-D-SEG-LINE\",\n        \"OCR-D-GT-SEG-LINE\",\n        \"OCR-D-OCR\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-SEG-LINE\",\n        \"OCR-D-OCR\"\n      ],\n      \"steps\": [\"layout/analysis\"],\n      \"parameters\": {\n          \"transform_coordinates\": {\n              \"type\": \"boolean\",\n              \"default\": true,\n              \"description\": \"re-calculate coordinates for all segments of the structural hierarchy to be consistent with the coordinate system of the first input file group (vital after cropping, deskewing etc; disable only if input coordinates can be assumed to be consistent with the second input file group)\"\n          }\n      }\n    },\n    \"ocrd-segment-replace-text\": {\n      \"executable\": \"ocrd-segment-replace-text\",\n      \"categories\": [\"Text recognition and optimization\"],\n      \"description\": \"Insert text from annotations in single-segment text files\",\n      \"steps\": [\"recognition/post-correction\"],\n      \"parameters\": {\n        \"file_glob\": {\n          \"type\": \"string\",\n          \"default\": \"*.gt.txt\",\n          \"description\": \"glob expression which expands to file names to match against page IDs and segment IDs in order to be ingested\"\n        }\n      }\n    },\n    \"ocrd-segment-evaluate\": {\n      \"executable\": \"ocrd-segment-evaluate\",\n      \"categories\": [\"Layout analysis\"],\n      \"description\": \"Compare segmentations\",\n      \"input_file_grp\": [\n        \"OCR-D-GT-SEG-BLOCK\",\n        \"OCR-D-SEG-BLOCK\"\n      ],\n      \"steps\": [\"layout/analysis\"],\n      \"parameters\": {\n        \"level-of-operation\": {\n          \"type\": \"string\",\n          \"enum\": [\"region\", \"line\"],\n          \"default\": \"region\",\n          \"description\": \"segment hierarchy level to compare GT and predictions at\"\n        },\n        \"only-fg\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"only overlap and compare the foregrounds in the binarized image\"\n        },\n        \"ignore-subtype\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"on region level, ignore @type differentiation (where applicable)\"\n        },\n        \"for-categories\": {\n          \"type\": \"string\",\n          \"default\": \"\",\n          \"description\": \"on region level, only compare these region types (comma-separated list; unless `ignore-subtype` is given, append subtypes via `.`; e.g. `TextRegion.page-number,TextRegion.marginalia`)\"\n        }\n      }\n    }\n  }\n}\n",
            "setup.py": "# -*- coding: utf-8 -*-\n\"\"\"\nInstalls:\n\n    - ocrd-segment-repair\n    - ocrd-segment-project\n    - ocrd-segment-from-masks\n    - ocrd-segment-from-coco\n    - ocrd-segment-extract-pages\n    - ocrd-segment-extract-regions\n    - ocrd-segment-extract-lines\n    - ocrd-segment-extract-words\n    - ocrd-segment-extract-glyphs\n    - ocrd-segment-replace-original\n    - ocrd-segment-replace-page\n    - ocrd-segment-replace-text\n    - ocrd-segment-evaluate\n    - page-segment-evaluate\n\"\"\"\nimport codecs\n\nimport json\nfrom setuptools import setup, find_packages\n\nwith open('./ocrd-tool.json', 'r') as f:\n    version = json.load(f)['version']\n    \nsetup(\n    name='ocrd_segment',\n    version=version,\n    description='Page segmentation and segmentation evaluation',\n    long_description=codecs.open('README.md', encoding='utf-8').read(),\n    long_description_content_type='text/markdown',\n    author='Konstantin Baierer, Kay-Michael W\u00fcrzner, Robert Sachunsky',\n    author_email='unixprog@gmail.com, wuerzner@gmail.com, sachunsky@informatik.uni-leipzig.de',\n    url='https://github.com/OCR-D/ocrd_segment',\n    license='Apache License 2.0',\n    packages=find_packages(exclude=('tests', 'docs')),\n    install_requires=open('requirements.txt').read().split('\\n'),\n    package_data={\n        '': ['*.json', '*.yml', '*.yaml'],\n    },\n    entry_points={\n        'console_scripts': [\n            'ocrd-segment-repair=ocrd_segment.cli:ocrd_segment_repair',\n            'ocrd-segment-project=ocrd_segment.cli:ocrd_segment_project',\n            'ocrd-segment-from-masks=ocrd_segment.cli:ocrd_segment_from_masks',\n            'ocrd-segment-from-coco=ocrd_segment.cli:ocrd_segment_from_coco',\n            'ocrd-segment-extract-pages=ocrd_segment.cli:ocrd_segment_extract_pages',\n            'ocrd-segment-extract-regions=ocrd_segment.cli:ocrd_segment_extract_regions',\n            'ocrd-segment-extract-lines=ocrd_segment.cli:ocrd_segment_extract_lines',\n            'ocrd-segment-extract-words=ocrd_segment.cli:ocrd_segment_extract_words',\n            'ocrd-segment-extract-glyphs=ocrd_segment.cli:ocrd_segment_extract_glyphs',\n            'ocrd-segment-replace-original=ocrd_segment.cli:ocrd_segment_replace_original',\n            'ocrd-segment-replace-page=ocrd_segment.cli:ocrd_segment_replace_page',\n            'ocrd-segment-replace-text=ocrd_segment.cli:ocrd_segment_replace_text',\n            'ocrd-segment-evaluate=ocrd_segment.cli:ocrd_segment_evaluate',\n            'page-segment-evaluate=ocrd_segment.evaluate:standalone_cli',\n        ]\n    },\n)\n"
        },
        "git": {
            "last_commit": "Mon May 30 01:09:24 2022 +0200",
            "latest_tag": "v0.1.21",
            "number_of_commits": "236",
            "url": "https://github.com/OCR-D/ocrd_segment"
        },
        "name": "ocrd_segment",
        "ocrd_tool": {
            "git_url": "https://github.com/OCR-D/ocrd_segment",
            "tools": {
                "ocrd-segment-evaluate": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Compare segmentations",
                    "executable": "ocrd-segment-evaluate",
                    "input_file_grp": [
                        "OCR-D-GT-SEG-BLOCK",
                        "OCR-D-SEG-BLOCK"
                    ],
                    "parameters": {
                        "for-categories": {
                            "default": "",
                            "description": "on region level, only compare these region types (comma-separated list; unless `ignore-subtype` is given, append subtypes via `.`; e.g. `TextRegion.page-number,TextRegion.marginalia`)",
                            "type": "string"
                        },
                        "ignore-subtype": {
                            "default": false,
                            "description": "on region level, ignore @type differentiation (where applicable)",
                            "type": "boolean"
                        },
                        "level-of-operation": {
                            "default": "region",
                            "description": "segment hierarchy level to compare GT and predictions at",
                            "enum": [
                                "region",
                                "line"
                            ],
                            "type": "string"
                        },
                        "only-fg": {
                            "default": false,
                            "description": "only overlap and compare the foregrounds in the binarized image",
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/analysis"
                    ]
                },
                "ocrd-segment-extract-glyphs": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Extract glyph segmentation as glyph images (deskewed according to `*/@orientation` and cropped+masked along `*/Coords` polygon and dewarped as in `*/AlternativeImage`) + text file (according to `*/TextEquiv`) + JSON (including line coordinates and meta-data).",
                    "executable": "ocrd-segment-extract-glyphs",
                    "input_file_grp": [
                        "OCR-D-SEG-GLYPH",
                        "OCR-D-GT-SEG-GLYPH"
                    ],
                    "output_file_grp": [
                        "OCR-D-IMG-GLYPH"
                    ],
                    "parameters": {
                        "feature_filter": {
                            "default": "",
                            "description": "Comma-separated list of forbidden image features (e.g. `binarized,despeckled`).",
                            "type": "string"
                        },
                        "mimetype": {
                            "default": "image/png",
                            "description": "File format to save extracted images in.",
                            "enum": [
                                "image/bmp",
                                "application/postscript",
                                "image/gif",
                                "image/jpeg",
                                "image/jp2",
                                "image/png",
                                "image/x-portable-pixmap",
                                "image/tiff"
                            ],
                            "type": "string"
                        },
                        "transparency": {
                            "default": true,
                            "description": "Add alpha channels with segment masks to the images",
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/analysis"
                    ]
                },
                "ocrd-segment-extract-lines": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Extract line segmentation as line images + text file + JSON.",
                    "executable": "ocrd-segment-extract-lines",
                    "input_file_grp": [
                        "OCR-D-SEG-LINE",
                        "OCR-D-GT-SEG-LINE"
                    ],
                    "output_file_grp": [
                        "OCR-D-IMG-LINE"
                    ],
                    "parameters": {
                        "feature_filter": {
                            "default": "",
                            "description": "Comma-separated list of forbidden image features (e.g. `binarized,despeckled`).",
                            "type": "string"
                        },
                        "library-convention": {
                            "default": "none",
                            "description": "For xlsx extraction, to make line images hyperlinked, use this scheme in reconstructing presentation URLs of original pages. Libraries have different conventions in their METS files. Set to none to disable.",
                            "enum": [
                                "slub",
                                "sbb",
                                "none"
                            ],
                            "type": "string"
                        },
                        "mimetype": {
                            "default": "image/png",
                            "description": "File format to save extracted images in.",
                            "enum": [
                                "image/bmp",
                                "application/postscript",
                                "image/gif",
                                "image/jpeg",
                                "image/jp2",
                                "image/png",
                                "image/x-portable-pixmap",
                                "image/tiff"
                            ],
                            "type": "string"
                        },
                        "min-line-height": {
                            "default": 1,
                            "description": "Only extract lines that are at least this high (in px).",
                            "format": "integer",
                            "minimum": 1,
                            "type": "number"
                        },
                        "min-line-length": {
                            "default": 0,
                            "description": "Only extract lines with at least this many characters.",
                            "format": "integer",
                            "minimum": 0,
                            "type": "number"
                        },
                        "min-line-width": {
                            "default": 1,
                            "description": "Only extract lines that are at least this wide (in px).",
                            "format": "integer",
                            "minimum": 1,
                            "type": "number"
                        },
                        "output-types": {
                            "default": [
                                "text",
                                "json",
                                "xlsx"
                            ],
                            "description": "What kind of files to extract besides the line image itself (text/json files for  each line, xlsx per page).",
                            "items": {
                                "enum": [
                                    "text",
                                    "json",
                                    "xlsx"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "transparency": {
                            "default": true,
                            "description": "Add alpha channels with segment masks to the images",
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/analysis"
                    ]
                },
                "ocrd-segment-extract-pages": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Extract page segmentation as page images (deskewed according to `/Page/@orientation` and cropped+masked along `/Page/Border`) + JSON (including region coordinates/classes and meta-data), as binarized images, and as mask images (segments filled with colors encoding classes) + COCO detection format JSON (for all pages). Output fileGrp format is `raw[,binarized[,mask]]` (i.e. fall back to first group).",
                    "executable": "ocrd-segment-extract-pages",
                    "input_file_grp": [
                        "OCR-D-SEG-PAGE",
                        "OCR-D-GT-SEG-PAGE",
                        "OCR-D-SEG-BLOCK",
                        "OCR-D-GT-SEG-BLOCK"
                    ],
                    "output_file_grp": [
                        "OCR-D-IMG-PAGE"
                    ],
                    "parameters": {
                        "colordict": {
                            "default": {
                                "": "FFFFFF00",
                                "AdvertRegion": "4682B4FF",
                                "Border": "FFFFFFFF",
                                "ChartRegion": "800080FF",
                                "ChartRegion:bar": "800080FA",
                                "ChartRegion:line": "800080F5",
                                "ChartRegion:other": "800080E1",
                                "ChartRegion:pie": "800080F0",
                                "ChartRegion:scatter": "800080EB",
                                "ChartRegion:surface": "800080E6",
                                "ChemRegion": "FF8C00FF",
                                "CustomRegion": "637C81FF",
                                "Glyph": "2E8B08FF",
                                "GraphicRegion": "008000FF",
                                "GraphicRegion:barcode": "008000D2",
                                "GraphicRegion:decoration": "008000EB",
                                "GraphicRegion:frame": "008000E6",
                                "GraphicRegion:handwritten-annotation": "008000E1",
                                "GraphicRegion:letterhead": "008000F0",
                                "GraphicRegion:logo": "008000FA",
                                "GraphicRegion:other": "008000C3",
                                "GraphicRegion:paper-grow": "008000CD",
                                "GraphicRegion:punch-hole": "008000C8",
                                "GraphicRegion:signature": "008000D7",
                                "GraphicRegion:stamp": "008000DC",
                                "ImageRegion": "00CED1FF",
                                "LineDrawingRegion": "B8860BFF",
                                "MapRegion": "9ACDD2FF",
                                "MathsRegion": "00BFFFFF",
                                "MusicRegion": "9400D3FF",
                                "NoiseRegion": "FF0000FF",
                                "ReadingOrderLevel0": "DC143CFF",
                                "ReadingOrderLevel1": "9400D3FF",
                                "ReadingOrderLevelN": "8B0000FF",
                                "SeparatorRegion": "FF00FFFF",
                                "TableRegion": "8B4513FF",
                                "TextLine": "32CD32FF",
                                "TextRegion": "0000FFFF",
                                "TextRegion:TOC-entry": "0000FFAF",
                                "TextRegion:caption": "0000FFF0",
                                "TextRegion:catch-word": "0000FFC8",
                                "TextRegion:credit": "0000FFD7",
                                "TextRegion:drop-capital": "0000FFDC",
                                "TextRegion:endnote": "0000FFB4",
                                "TextRegion:floating": "0000FFD2",
                                "TextRegion:footer": "0000FFE6",
                                "TextRegion:footnote": "0000FFBE",
                                "TextRegion:footnote-continued": "0000FFB9",
                                "TextRegion:header": "0000FFEB",
                                "TextRegion:heading": "0000FFF5",
                                "TextRegion:list-label": "0000FFA5",
                                "TextRegion:marginalia": "0000FFC3",
                                "TextRegion:other": "0000FFA0",
                                "TextRegion:page-number": "0000FFE1",
                                "TextRegion:paragraph": "0000FFFA",
                                "TextRegion:signature-mark": "0000FFCD",
                                "UnknownRegion": "646464FF",
                                "Word": "B22222FF"
                            },
                            "description": "Mapping from segment types to extract to color values in the output mask images and COCO; color must be encoded hexadecimal (e.g. '00FF00'); region type equals the element name in PAGE-XML, optionally followed by a colon and a subtype (e.g. 'TextRegion:paragraph'; unmapped region types will be ignored (i.e. treated as background)). Default is PageViewer color scheme. Cf. colordict parameter of ocrd-segment-from-masks.",
                            "type": "object"
                        },
                        "feature_filter": {
                            "default": "",
                            "description": "Comma-separated list of forbidden image features (e.g. `binarized,despeckled`).",
                            "type": "string"
                        },
                        "mimetype": {
                            "default": "image/png",
                            "description": "File format to save extracted images in.",
                            "enum": [
                                "image/bmp",
                                "application/postscript",
                                "image/gif",
                                "image/jpeg",
                                "image/jp2",
                                "image/png",
                                "image/x-portable-pixmap",
                                "image/tiff"
                            ],
                            "type": "string"
                        },
                        "plot_overlay": {
                            "default": false,
                            "description": "When generating mask images with `plot_segmasks`, instead of starting with a blank image and having layers and segments replace each other, start with the raw image and superimpose (alpha-composite) layers and segments.",
                            "type": "boolean"
                        },
                        "plot_segmasks": {
                            "default": [
                                "region"
                            ],
                            "description": "Generate mask images of the page segmentation in the last output fileGrp. Draw filled polygons for each specified PAGE hierarchy level in the list (in that order), where 'page' denotes the Border polygon, 'region' denotes Region types, 'line' denotes TextLine, 'word' denotes Word and 'glyph' denotes Glyph. Each type must be mapped in `colordict`. Where neighbors of the same type intersect, show a warning (unless `plot_overlay` is true). If 'order' is present, then draw arrows for reading order, too.",
                            "items": {
                                "enum": [
                                    "order",
                                    "page",
                                    "region",
                                    "line",
                                    "word",
                                    "glyph"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "transparency": {
                            "default": true,
                            "description": "Add alpha channels with segment masks to the images",
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/analysis"
                    ]
                },
                "ocrd-segment-extract-regions": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Extract region segmentation as region images (deskewed according to `*/@orientation` and cropped+masked along `*/Coords` polygon) + JSON (including region coordinates/classes and meta-data).",
                    "executable": "ocrd-segment-extract-regions",
                    "input_file_grp": [
                        "OCR-D-SEG-BLOCK",
                        "OCR-D-GT-SEG-BLOCK"
                    ],
                    "output_file_grp": [
                        "OCR-D-IMG-REGION"
                    ],
                    "parameters": {
                        "classes": {
                            "default": [
                                "NoiseRegion",
                                "LineDrawingRegion",
                                "AdvertRegion",
                                "ImageRegion",
                                "ChartRegion",
                                "MusicRegion",
                                "GraphicRegion",
                                "UnknownRegion",
                                "CustomRegion",
                                "SeparatorRegion",
                                "MathsRegion",
                                "TextRegion",
                                "MapRegion",
                                "ChemRegion",
                                "TableRegion"
                            ],
                            "description": "Array of region types to extract e.g. -P classes '[\"TextRegion\", \"TableRegion\", \"ImageRegion\"]' . If empty, all regions are allowed.",
                            "items": {
                                "enum": [
                                    "NoiseRegion",
                                    "LineDrawingRegion",
                                    "AdvertRegion",
                                    "ImageRegion",
                                    "ChartRegion",
                                    "MusicRegion",
                                    "GraphicRegion",
                                    "UnknownRegion",
                                    "CustomRegion",
                                    "SeparatorRegion",
                                    "MathsRegion",
                                    "TextRegion",
                                    "MapRegion",
                                    "ChemRegion",
                                    "TableRegion"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "feature_filter": {
                            "default": "",
                            "description": "Comma-separated list of forbidden image features (e.g. `binarized,despeckled`).",
                            "type": "string"
                        },
                        "mimetype": {
                            "default": "image/png",
                            "description": "File format to save extracted images in.",
                            "enum": [
                                "image/bmp",
                                "application/postscript",
                                "image/gif",
                                "image/jpeg",
                                "image/jp2",
                                "image/png",
                                "image/x-portable-pixmap",
                                "image/tiff"
                            ],
                            "type": "string"
                        },
                        "transparency": {
                            "default": true,
                            "description": "Add alpha channels with segment masks to the images",
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/analysis"
                    ]
                },
                "ocrd-segment-extract-words": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Extract word segmentation as word images (deskewed according to `*/@orientation` and cropped+masked along `*/Coords` polygon and dewarped as in `*/AlternativeImage`) + text file (according to `*/TextEquiv`) + JSON (including line coordinates and meta-data).",
                    "executable": "ocrd-segment-extract-words",
                    "input_file_grp": [
                        "OCR-D-SEG-WORD",
                        "OCR-D-GT-SEG-WORD"
                    ],
                    "output_file_grp": [
                        "OCR-D-IMG-WORD"
                    ],
                    "parameters": {
                        "feature_filter": {
                            "default": "",
                            "description": "Comma-separated list of forbidden image features (e.g. `binarized,despeckled`).",
                            "type": "string"
                        },
                        "mimetype": {
                            "default": "image/png",
                            "description": "File format to save extracted images in.",
                            "enum": [
                                "image/bmp",
                                "application/postscript",
                                "image/gif",
                                "image/jpeg",
                                "image/jp2",
                                "image/png",
                                "image/x-portable-pixmap",
                                "image/tiff"
                            ],
                            "type": "string"
                        },
                        "transparency": {
                            "default": true,
                            "description": "Add alpha channels with segment masks to the images",
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/analysis"
                    ]
                },
                "ocrd-segment-from-coco": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Import region segmentation from COCO detection format JSON (for all pages). Input fileGrp format is `base,COCO` (i.e. PAGE or original image files first, COCO file second).",
                    "executable": "ocrd-segment-from-coco",
                    "input_file_grp": [
                        "OCR-D-IMG",
                        "OCR-D-SEG-PAGE"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-BLOCK"
                    ],
                    "parameters": {},
                    "steps": [
                        "layout/segmentation/region"
                    ]
                },
                "ocrd-segment-from-masks": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Import region segmentation from mask images (segments filled with colors encoding classes). Input fileGrp format is `base,mask` (i.e. PAGE or original image files first, mask image files second).",
                    "executable": "ocrd-segment-from-masks",
                    "input_file_grp": [
                        "OCR-D-IMG",
                        "OCR-D-SEG-PAGE"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-BLOCK"
                    ],
                    "parameters": {
                        "colordict": {
                            "default": {
                                "0000FFA0": "TextRegion:other",
                                "0000FFA5": "TextRegion:list-label",
                                "0000FFAF": "TextRegion:TOC-entry",
                                "0000FFB4": "TextRegion:endnote",
                                "0000FFB9": "TextRegion:footnote-continued",
                                "0000FFBE": "TextRegion:footnote",
                                "0000FFC3": "TextRegion:marginalia",
                                "0000FFC8": "TextRegion:catch-word",
                                "0000FFCD": "TextRegion:signature-mark",
                                "0000FFD2": "TextRegion:floating",
                                "0000FFD7": "TextRegion:credit",
                                "0000FFDC": "TextRegion:drop-capital",
                                "0000FFE1": "TextRegion:page-number",
                                "0000FFE6": "TextRegion:footer",
                                "0000FFEB": "TextRegion:header",
                                "0000FFF0": "TextRegion:caption",
                                "0000FFF5": "TextRegion:heading",
                                "0000FFFA": "TextRegion:paragraph",
                                "0000FFFF": "TextRegion",
                                "008000C3": "GraphicRegion:other",
                                "008000C8": "GraphicRegion:punch-hole",
                                "008000CD": "GraphicRegion:paper-grow",
                                "008000D2": "GraphicRegion:barcode",
                                "008000D7": "GraphicRegion:signature",
                                "008000DC": "GraphicRegion:stamp",
                                "008000E1": "GraphicRegion:handwritten-annotation",
                                "008000E6": "GraphicRegion:frame",
                                "008000EB": "GraphicRegion:decoration",
                                "008000F0": "GraphicRegion:letterhead",
                                "008000FA": "GraphicRegion:logo",
                                "008000FF": "GraphicRegion",
                                "00BFFFFF": "MathsRegion",
                                "00CED1FF": "ImageRegion",
                                "4682B4FF": "AdvertRegion",
                                "637C81FF": "CustomRegion",
                                "646464FF": "UnknownRegion",
                                "800080E1": "ChartRegion:other",
                                "800080E6": "ChartRegion:surface",
                                "800080EB": "ChartRegion:scatter",
                                "800080F0": "ChartRegion:pie",
                                "800080F5": "ChartRegion:line",
                                "800080FA": "ChartRegion:bar",
                                "800080FF": "ChartRegion",
                                "8B4513FF": "TableRegion",
                                "9400D3FF": "MusicRegion",
                                "9ACDD2FF": "MapRegion",
                                "B8860BFF": "LineDrawingRegion",
                                "FF0000FF": "NoiseRegion",
                                "FF00FFFF": "SeparatorRegion",
                                "FF8C00FF": "ChemRegion",
                                "FFFFFF00": "",
                                "FFFFFFFF": "Border"
                            },
                            "description": "Mapping from color values in the input masks to region types to annotate; color must be encoded hexadecimal (e.g. '00FF00'); region type equals the element name in PAGE-XML, optionally followed by a colon and a subtype (e.g. 'TextRegion:paragraph'; unmapped colors will be ignored (i.e. treated as background)). Default is PageViewer color scheme. Cf. colordict.json output and colordict parameter of ocrd-segment-extract-pages.",
                            "type": "object"
                        }
                    },
                    "steps": [
                        "layout/segmentation/region"
                    ]
                },
                "ocrd-segment-project": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Project segment coordinates to their structural parents",
                    "executable": "ocrd-segment-project",
                    "input_file_grp": [
                        "OCR-D-SEG-BLOCK"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-BLOCK"
                    ],
                    "parameters": {
                        "level-of-operation": {
                            "default": "page",
                            "description": "hierarchy level which to assign new coordinates to",
                            "enum": [
                                "page",
                                "table",
                                "region",
                                "line",
                                "word"
                            ],
                            "type": "string"
                        },
                        "padding": {
                            "default": 10,
                            "description": "margin (in px) to extend the hull in every direction",
                            "format": "integer",
                            "minimum": 0,
                            "type": "number"
                        }
                    },
                    "steps": [
                        "layout/segmentation"
                    ]
                },
                "ocrd-segment-repair": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Analyse and repair region segmentation; at least ensure validity and consistency of coordinates.",
                    "executable": "ocrd-segment-repair",
                    "input_file_grp": [
                        "OCR-D-IMG",
                        "OCR-D-SEG-BLOCK"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-BLOCK"
                    ],
                    "parameters": {
                        "plausibilize": {
                            "default": false,
                            "description": "Identify and remove redundancies on text regions and text lines (deleting/merging/shrinking where overlaps occur).",
                            "type": "boolean"
                        },
                        "plausibilize_merge_min_overlap": {
                            "default": 0.9,
                            "description": "When merging a region or line almost contained in another, require at least this ratio of area is shared with the other.",
                            "format": "float",
                            "maximum": 1.0,
                            "minimum": 0.0,
                            "type": "number"
                        },
                        "sanitize": {
                            "default": false,
                            "description": "Shrink each region such that its coordinates become the minimal concave hull of its binary foreground. (Assumes that a perfect binarization is available.)",
                            "type": "boolean"
                        },
                        "sanitize_padding": {
                            "default": 5,
                            "description": "When shrinking a region, enlarge the resulting hull by this amount of pixels in each direction.",
                            "format": "integer",
                            "minimum": 1,
                            "type": "number"
                        },
                        "simplify": {
                            "default": 0,
                            "description": "Distance (in px) used to simplify all segment polygons. (Avoid values larger than xheight/scale, or corners will be chopped off.) Set to 0 to disable.",
                            "format": "float",
                            "minimum": 0,
                            "type": "number"
                        }
                    },
                    "steps": [
                        "layout/segmentation/region"
                    ]
                },
                "ocrd-segment-replace-original": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Extract page image (deskewed according to `/Page/@orientation` and cropped+masked along `/Page/Border`) and use it as @imageFilename, adjusting all coordinates",
                    "executable": "ocrd-segment-replace-original",
                    "input_file_grp": [
                        "OCR-D-SEG-LINE",
                        "OCR-D-GT-SEG-LINE",
                        "OCR-D-OCR"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-CROP"
                    ],
                    "parameters": {
                        "feature_filter": {
                            "default": "",
                            "description": "Comma-separated list of forbidden image features (e.g. `binarized,despeckled`)",
                            "type": "string"
                        },
                        "feature_selector": {
                            "default": "",
                            "description": "Comma-separated list of required image features (e.g. `binarized,despeckled`)",
                            "type": "string"
                        },
                        "transform_coordinates": {
                            "default": true,
                            "description": "re-calculate coordinates for all segments of the structural hierarchy to be consistent with the coordinate system of the chosen image again (vital after cropping, deskewing etc; disable only if input coordinates must be assumed to be inconsistent with the original)",
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/analysis"
                    ]
                },
                "ocrd-segment-replace-page": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Replace everything below page level with another annotation, adjusting all coordinates",
                    "executable": "ocrd-segment-replace-page",
                    "input_file_grp": [
                        "OCR-D-SEG-LINE",
                        "OCR-D-GT-SEG-LINE",
                        "OCR-D-OCR"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-LINE",
                        "OCR-D-OCR"
                    ],
                    "parameters": {
                        "transform_coordinates": {
                            "default": true,
                            "description": "re-calculate coordinates for all segments of the structural hierarchy to be consistent with the coordinate system of the first input file group (vital after cropping, deskewing etc; disable only if input coordinates can be assumed to be consistent with the second input file group)",
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/analysis"
                    ]
                },
                "ocrd-segment-replace-text": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "Insert text from annotations in single-segment text files",
                    "executable": "ocrd-segment-replace-text",
                    "parameters": {
                        "file_glob": {
                            "default": "*.gt.txt",
                            "description": "glob expression which expands to file names to match against page IDs and segment IDs in order to be ingested",
                            "type": "string"
                        }
                    },
                    "steps": [
                        "recognition/post-correction"
                    ]
                }
            },
            "version": "0.1.21"
        },
        "ocrd_tool_validate": "<report valid=\"false\">\n  <error>[tools.ocrd-segment-repair.parameters.simplify] Additional properties are not allowed ('minimum' was unexpected)</error>\n  <error>[tools.ocrd-segment-repair.parameters.plausibilize_merge_min_overlap] Additional properties are not allowed ('maximum', 'minimum' were unexpected)</error>\n  <error>[tools.ocrd-segment-repair.parameters.sanitize_padding] Additional properties are not allowed ('minimum' was unexpected)</error>\n  <error>[tools.ocrd-segment-project.parameters.padding] Additional properties are not allowed ('minimum' was unexpected)</error>\n  <error>[tools.ocrd-segment-extract-pages.parameters.plot_segmasks] Additional properties are not allowed ('items' was unexpected)</error>\n  <error>[tools.ocrd-segment-extract-regions.parameters.classes] Additional properties are not allowed ('items' was unexpected)</error>\n  <error>[tools.ocrd-segment-extract-lines.parameters.output-types] Additional properties are not allowed ('items' was unexpected)</error>\n  <error>[tools.ocrd-segment-extract-lines.parameters.min-line-length] Additional properties are not allowed ('minimum' was unexpected)</error>\n  <error>[tools.ocrd-segment-extract-lines.parameters.min-line-width] Additional properties are not allowed ('minimum' was unexpected)</error>\n  <error>[tools.ocrd-segment-extract-lines.parameters.min-line-height] Additional properties are not allowed ('minimum' was unexpected)</error>\n  <error>[tools.ocrd-segment-replace-text] 'input_file_grp' is a required property</error>\n</report>",
        "official": false,
        "org_plus_name": "OCR-D/ocrd_segment",
        "python": {
            "author": "Konstantin Baierer, Kay-Michael W\u00fcrzner, Robert Sachunsky",
            "author-email": "unixprog@gmail.com, wuerzner@gmail.com, sachunsky@informatik.uni-leipzig.de",
            "name": "ocrd_segment",
            "pypi": {
                "info": {
                    "author": "Konstantin Baierer, Kay-Michael W\u00fcrzner, Robert Sachunsky",
                    "author_email": "unixprog@gmail.com, wuerzner@gmail.com, sachunsky@informatik.uni-leipzig.de",
                    "bugtrack_url": null,
                    "classifiers": [],
                    "description": "# ocrd_segment\n\nThis repository aims to provide a number of [OCR-D](https://ocr-d.de) [compliant](https://ocr-d.de/en/spec) [processors](https://ocr-d.de/en/spec/cli) for layout analysis and evaluation.\n\n[![image](https://img.shields.io/pypi/v/ocrd_segment.svg)](https://pypi.org/project/ocrd_segment/)\n\n## Installation\n\nIn your [Python virtual environment](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/), run:\n\n    pip install ocrd_segment\n\n\n## Usage\n\nContains processors for various tasks:\n\n  - exporting segment images (including results from preprocessing like cropping/masking, deskewing, dewarping or binarization) along with polygon coordinates and metadata:\n    - [ocrd-segment-extract-pages](ocrd_segment/extract_pages.py) (for pages, also exports [MS-COCO](https://cocodataset.org/) format and pageview plots)\n    - [ocrd-segment-extract-regions](ocrd_segment/extract_regions.py) (for regions, also exports [MS-COCO](https://cocodataset.org/) format))\n    - [ocrd-segment-extract-lines](ocrd_segment/extract_lines.py) (for lines, also exports text and .xlsx)\n    - [ocrd-segment-extract-words](ocrd_segment/extract_words.py) (for words, also exports text)\n    - [ocrd-segment-extract-glyphs](ocrd_segment/extract_glyphs.py) (for glyphs, also exports text)\n  - importing layout segmentations from other formats:\n    - [ocrd-segment-from-masks](ocrd_segment/import_image_segmentation.py) (for mask/label images, i.e. semantic segmentation)\n    - [ocrd-segment-from-coco](ocrd_segment/import_coco_segmentation.py) (for [MS-COCO](https://cocodataset.org/) annotation)\n  - post-processing or repairing layout segmentations:\n    - [ocrd-segment-repair](ocrd_segment/repair.py) (validity and consistency of all coordinates; also, for regions, reduce overlaps/redundancy between neighbours, and/or simplify polygons, and/or shrink to the alpha shape of foreground contours)\n    - [ocrd-segment-project](ocrd_segment/project.py) (remake segment coordinates into the concave hull / alpha shape of their constituents)\n    - [ocrd-segment-replace-original](ocrd_segment/replace_original.py) (rebase all segments on cropped+deskewed border frame as new full page)\n    - [ocrd-segment-replace-page](ocrd_segment/replace_page.py) (2 input fileGrps; overwrite segmentation below page of first fileGrp by all segments of second fileGrp, rebasing all coordinates; \"inverse\" of `replace-original`)\n  - comparing different layout segmentations:\n    - [ocrd-segment-evaluate](ocrd_segment/evaluate.py) :construction: (2 input fileGrps; align, compare and evaluate page segmentations; early stage)\n    - [page-segment-evaluate](ocrd_segment/evaluate.py) (same with standalone CLI)\n  - pattern-based segmentation (input file groups N=1, based on a PAGE template, e.g. from Aletheia, and some XSLT or Python to apply it to the input file group)\n    - `ocrd-segment-via-template` :construction: (unpublished)\n  - data-driven segmentation (input file groups N=1, based on a statistical model, e.g. Neural Network)  \n    - `ocrd-segment-via-model` :construction: (unpublished)\n\nFor detailed behaviour, see `--help` on each processor CLI.\nFor detailed description on input/output and parameters, see [ocrd-tool.json](ocrd_segment/ocrd-tool.json) or `--dump-json` on each processor CLI.\n\n## Testing\n\nNone yet.\n",
                    "description_content_type": "text/markdown",
                    "docs_url": null,
                    "download_url": "",
                    "downloads": {
                        "last_day": -1,
                        "last_month": -1,
                        "last_week": -1
                    },
                    "home_page": "https://github.com/OCR-D/ocrd_segment",
                    "keywords": "",
                    "license": "Apache License 2.0",
                    "maintainer": "",
                    "maintainer_email": "",
                    "name": "ocrd-segment",
                    "package_url": "https://pypi.org/project/ocrd-segment/",
                    "platform": null,
                    "project_url": "https://pypi.org/project/ocrd-segment/",
                    "project_urls": {
                        "Homepage": "https://github.com/OCR-D/ocrd_segment"
                    },
                    "release_url": "https://pypi.org/project/ocrd-segment/0.1.21/",
                    "requires_dist": [
                        "ocrd (>=2.20.0)",
                        "shapely (>=1.7.1)",
                        "scikit-image",
                        "numpy",
                        "xlsxwriter",
                        "rapidfuzz",
                        "opencv-python-headless",
                        "ocrd-fork-pycocotools"
                    ],
                    "requires_python": "",
                    "summary": "Page segmentation and segmentation evaluation",
                    "version": "0.1.21",
                    "yanked": false,
                    "yanked_reason": null
                },
                "last_serial": 13957038,
                "releases": {
                    "0.0.2": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "e9bc6112469e53afd56563d862000228",
                                "sha256": "9b549066f46f26a147b726066712a423f9fcf64b8274dd8285447c564f361783"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.0.2-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "e9bc6112469e53afd56563d862000228",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 14529,
                            "upload_time": "2019-12-02T11:50:29",
                            "upload_time_iso_8601": "2019-12-02T11:50:29.761485Z",
                            "url": "https://files.pythonhosted.org/packages/90/34/4825c12fa6e8238ce350fc766f6aaa0d591705c8f426160eb59ec7513541/ocrd_segment-0.0.2-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "6b258735d218ef459887c4d8d23382c7",
                                "sha256": "284557d2fd985bf4be93b4bbbe08ba3fc2668300f5c9694af6c93f0be7a7c1c9"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.0.2.tar.gz",
                            "has_sig": false,
                            "md5_digest": "6b258735d218ef459887c4d8d23382c7",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 10335,
                            "upload_time": "2019-12-02T11:50:34",
                            "upload_time_iso_8601": "2019-12-02T11:50:34.482743Z",
                            "url": "https://files.pythonhosted.org/packages/d0/e8/ab967b490f8cc4f70438b278530042a4eb5a9237941cd084fece279cb507/ocrd_segment-0.0.2.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "5a069819a9817d3c2b041c176924d9f1",
                                "sha256": "e5cb13f5eaff880fcad4ec4d232115702ec621cd41636922e08f424cc00a9ddf"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "5a069819a9817d3c2b041c176924d9f1",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 31728,
                            "upload_time": "2020-08-21T12:23:48",
                            "upload_time_iso_8601": "2020-08-21T12:23:48.240148Z",
                            "url": "https://files.pythonhosted.org/packages/1e/2d/e0c5830b7c1abf9f8f7bd8bcc340c8c53cddda3c8499624999c33799ae8e/ocrd_segment-0.1.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "caf1f82a9a09fcf10315266438b6edf2",
                                "sha256": "d288bb7f711a9eda6472eede607e5ab37faa36388e800d5601b4c0c74e84b647"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "caf1f82a9a09fcf10315266438b6edf2",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 21119,
                            "upload_time": "2020-08-21T12:23:50",
                            "upload_time_iso_8601": "2020-08-21T12:23:50.291701Z",
                            "url": "https://files.pythonhosted.org/packages/7e/54/b8821569a5d2e7bbe52298971cb194c6f14a7e22820dbcf01a7a65d28d3f/ocrd_segment-0.1.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.1": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "ff3d30af432f74ea5de59e557f274727",
                                "sha256": "c7adff5431cdc663a9f23b855bf7bbc7cee3b3fa08a29d593cfe74c0f144c92b"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.1-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "ff3d30af432f74ea5de59e557f274727",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 37738,
                            "upload_time": "2021-02-08T17:43:24",
                            "upload_time_iso_8601": "2021-02-08T17:43:24.775507Z",
                            "url": "https://files.pythonhosted.org/packages/fd/23/d07d9b35c765c3d72a7954282ea8faf9a4431da1ab58b04a99e092f5e759/ocrd_segment-0.1.1-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "59d5fa19e9be54673a0bad9bf8784b7c",
                                "sha256": "1f57e89217e0b9246422b99aee5212a17661a6582b5897118cc5320c72945832"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.1.tar.gz",
                            "has_sig": false,
                            "md5_digest": "59d5fa19e9be54673a0bad9bf8784b7c",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 21302,
                            "upload_time": "2021-02-08T17:43:34",
                            "upload_time_iso_8601": "2021-02-08T17:43:34.310700Z",
                            "url": "https://files.pythonhosted.org/packages/18/f6/c79e834112aa42f3b0a30c6ee49b5aac2f1520ddcc9eea7a1bc7926cd649/ocrd_segment-0.1.1.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.11": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "c7316d6f0d197b6445f4a9336cd35303",
                                "sha256": "e8d019f26e2e5880cb13f71bed23dad24ccf6b47ccc9bad9c3ab31a611fabe17"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.11-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "c7316d6f0d197b6445f4a9336cd35303",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 43073,
                            "upload_time": "2021-03-23T19:31:58",
                            "upload_time_iso_8601": "2021-03-23T19:31:58.697689Z",
                            "url": "https://files.pythonhosted.org/packages/9d/78/4dcfebd769bf6335b87dc438f96ea2a0fbccb438427b4dc950d2d043feb3/ocrd_segment-0.1.11-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "01e3a1483cf0c05e6bfcfe7d927c8c24",
                                "sha256": "240b201dbc9ea7f1ec3e8be33ac256b721c372969dfa85773377bb175c280c1d"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.11.tar.gz",
                            "has_sig": false,
                            "md5_digest": "01e3a1483cf0c05e6bfcfe7d927c8c24",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 29634,
                            "upload_time": "2021-03-23T19:32:00",
                            "upload_time_iso_8601": "2021-03-23T19:32:00.461431Z",
                            "url": "https://files.pythonhosted.org/packages/f4/97/1c9293d34a7a2a02989db89eccb0db1e5c064235bf844f8ffec5ce2ecc4d/ocrd_segment-0.1.11.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.12": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "65c25072cc92479a147d9ec9d3daa71e",
                                "sha256": "78d86243640ad211d7149ad9204ee89ead5001510be682dcf3913a771430da4b"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.12-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "65c25072cc92479a147d9ec9d3daa71e",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 46524,
                            "upload_time": "2021-12-03T13:22:26",
                            "upload_time_iso_8601": "2021-12-03T13:22:26.180807Z",
                            "url": "https://files.pythonhosted.org/packages/d1/61/16806ac59451aa6dfa18edd265b3ada3d00a52a759a6c3ff29c64e254e9f/ocrd_segment-0.1.12-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "372230f59eded71d8f840ef84ae68857",
                                "sha256": "50e731ea3967f36769d623a622b93963523f648dc9bf92bcbd213035488abbc8"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.12.tar.gz",
                            "has_sig": false,
                            "md5_digest": "372230f59eded71d8f840ef84ae68857",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 2230436,
                            "upload_time": "2021-12-03T13:22:37",
                            "upload_time_iso_8601": "2021-12-03T13:22:37.450578Z",
                            "url": "https://files.pythonhosted.org/packages/d1/16/cc9a661d196421fd9412668cb5f62afd931cb540e9e9e1309cbdd7eb264a/ocrd_segment-0.1.12.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.13": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "80a3d05104720ce4e449e00f7aaa4296",
                                "sha256": "a3fd0a867c4bd9acccbb682e577b9b814d494ce1b693774be20588c6bebdfc8b"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.13-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "80a3d05104720ce4e449e00f7aaa4296",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 183168,
                            "upload_time": "2021-12-10T23:39:15",
                            "upload_time_iso_8601": "2021-12-10T23:39:15.225923Z",
                            "url": "https://files.pythonhosted.org/packages/a3/1c/3f0c9e66c00a6783c157111b3ce027b70cdb80eb761a54ced3f982bb411c/ocrd_segment-0.1.13-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "9a436d06dec24d89e1b906062983908a",
                                "sha256": "8acec28fd39ee1db692c8b32812ec922e52329a9e5f8bbcbe67e4cb9c24ee2f4"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.13.tar.gz",
                            "has_sig": false,
                            "md5_digest": "9a436d06dec24d89e1b906062983908a",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 2233809,
                            "upload_time": "2021-12-10T23:39:26",
                            "upload_time_iso_8601": "2021-12-10T23:39:26.616749Z",
                            "url": "https://files.pythonhosted.org/packages/2d/41/6c169e3aa9dd497097894706542d8acea7fe5b45dbfe7878e240cd219ac8/ocrd_segment-0.1.13.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.14": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "c3306cd2f7410528a6d0c2f058a894dc",
                                "sha256": "03b6ceb5b8d37528c47f37ac74d84ec2079b8101e3de76302c55856c4146de4a"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.14-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "c3306cd2f7410528a6d0c2f058a894dc",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 52801,
                            "upload_time": "2022-02-17T17:20:31",
                            "upload_time_iso_8601": "2022-02-17T17:20:31.636929Z",
                            "url": "https://files.pythonhosted.org/packages/94/67/5db0e835ba9f6f522b40237612a8e3e93fbf2a4cb82ad0b56c6005c1ea3e/ocrd_segment-0.1.14-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "93922eacb67beb549b0619d3cb3231cd",
                                "sha256": "70568b97fb432e2cfad0138000064c9f314b9861a11279aa686ee16b87f22b78"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.14.tar.gz",
                            "has_sig": false,
                            "md5_digest": "93922eacb67beb549b0619d3cb3231cd",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 40310,
                            "upload_time": "2022-02-17T17:20:34",
                            "upload_time_iso_8601": "2022-02-17T17:20:34.832551Z",
                            "url": "https://files.pythonhosted.org/packages/6e/10/1a37e6394c39baed3b9308c78137e3e58407cdd6fa6b86760c6739386ffa/ocrd_segment-0.1.14.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.15": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "d12055d28354d2079d687d8c9637f9d9",
                                "sha256": "33d92fd98cd470fc38fbdba16d900fc195221a59365b3389df9331c50321398a"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.15-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "d12055d28354d2079d687d8c9637f9d9",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 55076,
                            "upload_time": "2022-02-17T19:21:48",
                            "upload_time_iso_8601": "2022-02-17T19:21:48.958606Z",
                            "url": "https://files.pythonhosted.org/packages/9b/98/8df38774ca36981aad668f23660bc5f53f33dc65b29024c2e9285075886b/ocrd_segment-0.1.15-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "035a35da25d91ca3215f737f24a69071",
                                "sha256": "a999c971627364882ca4e00e8427e4242383e815775d2a64608c2777d69488a7"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.15.tar.gz",
                            "has_sig": false,
                            "md5_digest": "035a35da25d91ca3215f737f24a69071",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 42733,
                            "upload_time": "2022-02-17T19:21:50",
                            "upload_time_iso_8601": "2022-02-17T19:21:50.903132Z",
                            "url": "https://files.pythonhosted.org/packages/90/89/244d2d0bc8e9f2b4cc0d081cfbcd4ee1dd797eafe219fec7e67a5cea0707/ocrd_segment-0.1.15.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.16": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "047939ed6c67e6f4fdf658da7d0dae7e",
                                "sha256": "1ee49ddbe19dbd1ff42b8196cd1bb05656034cc8572ca1d563f931b5aa1b6b09"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.16-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "047939ed6c67e6f4fdf658da7d0dae7e",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 58101,
                            "upload_time": "2022-02-21T10:19:02",
                            "upload_time_iso_8601": "2022-02-21T10:19:02.396472Z",
                            "url": "https://files.pythonhosted.org/packages/90/7c/76a9259ea9da00db0fd6f0ef4837b6ff26b360af9015dfff9d1be1633d8a/ocrd_segment-0.1.16-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "e385405b8bf68c6a98ae0afef582fbb4",
                                "sha256": "1af498fa431f3ffaf6c666fe4292f8e546f137a41bf5690930e9dbcca9ff57c9"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.16.tar.gz",
                            "has_sig": false,
                            "md5_digest": "e385405b8bf68c6a98ae0afef582fbb4",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 45316,
                            "upload_time": "2022-02-21T10:19:04",
                            "upload_time_iso_8601": "2022-02-21T10:19:04.605017Z",
                            "url": "https://files.pythonhosted.org/packages/c0/38/4108e8e6e2bd75100e9ec25de2de381aab0c78bd12d8e22d2dace6daf8ba/ocrd_segment-0.1.16.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.17": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "50f18c68ca031e3938f8bac8f89d8eec",
                                "sha256": "a076ee5f025c1d9970bcd21168598f8f8ffa22b5d276b52f52c5fed1b4253476"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.17-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "50f18c68ca031e3938f8bac8f89d8eec",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 58983,
                            "upload_time": "2022-03-12T00:55:06",
                            "upload_time_iso_8601": "2022-03-12T00:55:06.872885Z",
                            "url": "https://files.pythonhosted.org/packages/20/52/fdf74d32eb59f4e06d9eb1b5670c3ae7b0cf63d4f8451286e10392eea500/ocrd_segment-0.1.17-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "f3f54aad6a74714216d80668c467439c",
                                "sha256": "f76b1d92002938207c8edafceb9acf77c4d0171ac7ec4045de1f67cec11bf4fa"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.17.tar.gz",
                            "has_sig": false,
                            "md5_digest": "f3f54aad6a74714216d80668c467439c",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 46237,
                            "upload_time": "2022-03-12T00:55:09",
                            "upload_time_iso_8601": "2022-03-12T00:55:09.092184Z",
                            "url": "https://files.pythonhosted.org/packages/cb/25/46935dca202a7b7060c2031d2b7d941754767b88ce5334af5211e9fae7f2/ocrd_segment-0.1.17.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.18": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "de85918697260c28bb7e4bbb187157cf",
                                "sha256": "567ef941fc5abc76871657ed4757e80196329d5dbcaf7d40fdc819bf91c0ae14"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.18-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "de85918697260c28bb7e4bbb187157cf",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 58978,
                            "upload_time": "2022-03-30T21:01:57",
                            "upload_time_iso_8601": "2022-03-30T21:01:57.848336Z",
                            "url": "https://files.pythonhosted.org/packages/13/6f/36636756e8d6ea2fd61cd5f3211e14b45db4b18d0b485d2819001770aa68/ocrd_segment-0.1.18-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "f3924688b2f1e02d072249aed53ac8c0",
                                "sha256": "5f4758bfc6fc4b9d15b6304d55f66a45d8f53338de71303735cf48c1143376fa"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.18.tar.gz",
                            "has_sig": false,
                            "md5_digest": "f3924688b2f1e02d072249aed53ac8c0",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 46401,
                            "upload_time": "2022-03-30T21:01:59",
                            "upload_time_iso_8601": "2022-03-30T21:01:59.712249Z",
                            "url": "https://files.pythonhosted.org/packages/a6/37/e294a8bd241e00bebead14b0481f6e361200cf829acbb1278307c7b9faf0/ocrd_segment-0.1.18.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.19": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "af611bf535f0244c32b35bb9e9f3ea3b",
                                "sha256": "4ddbd37fb69748596ebcdda304248484c12460b2eeb0afbdc6cd20e34cc79996"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.19-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "af611bf535f0244c32b35bb9e9f3ea3b",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 59672,
                            "upload_time": "2022-04-16T12:25:14",
                            "upload_time_iso_8601": "2022-04-16T12:25:14.959287Z",
                            "url": "https://files.pythonhosted.org/packages/8f/38/816d4a551a0fc0a9d999401aabccb4b5cd97dfd3743b482218b51ccd2301/ocrd_segment-0.1.19-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "ce33bb13c67a55bfebdc308df0f70f60",
                                "sha256": "7b53e4e428978e657b168fbd19f05855fc21b73198eda0860f8215ab254fa239"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.19.tar.gz",
                            "has_sig": false,
                            "md5_digest": "ce33bb13c67a55bfebdc308df0f70f60",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 47039,
                            "upload_time": "2022-04-16T12:25:17",
                            "upload_time_iso_8601": "2022-04-16T12:25:17.275463Z",
                            "url": "https://files.pythonhosted.org/packages/d1/5e/0e0a9ca69082d2dd2d0a9dc99c955565096dbb856be1cd7c95eee19ccf2b/ocrd_segment-0.1.19.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.2": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "dd28c5320106ee65df82a4bd0ed90766",
                                "sha256": "e5c3aa5c752322dbe25024f5528dac17f42b0f3fb73e0162b8cdc770117b84a1"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.2-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "dd28c5320106ee65df82a4bd0ed90766",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 37736,
                            "upload_time": "2021-02-08T17:43:26",
                            "upload_time_iso_8601": "2021-02-08T17:43:26.404329Z",
                            "url": "https://files.pythonhosted.org/packages/3c/8d/f7e8dae1bcfbce154fb18e82f1ba7937bd90e56991d32395894a009e3fcb/ocrd_segment-0.1.2-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "1748ff08c913a875e0c3fa23252bf05f",
                                "sha256": "d499efbc8393e9cf4c107282fdee687c5ee34dfe94e184603a9a0e01343ddb8e"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.2.tar.gz",
                            "has_sig": false,
                            "md5_digest": "1748ff08c913a875e0c3fa23252bf05f",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 21291,
                            "upload_time": "2021-02-08T17:43:35",
                            "upload_time_iso_8601": "2021-02-08T17:43:35.487591Z",
                            "url": "https://files.pythonhosted.org/packages/e8/65/7e41990b3b7bc094d07281a7aab858dcc89139fedf7a7911924c3fe7d76c/ocrd_segment-0.1.2.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.20": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "e2ede325113c902ea609430e650452e1",
                                "sha256": "deb428cc2d65b87e3ff61af242dba6852f7fa92496ac11af9a9c3a10e16599ec"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.20-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "e2ede325113c902ea609430e650452e1",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 59691,
                            "upload_time": "2022-04-27T10:13:25",
                            "upload_time_iso_8601": "2022-04-27T10:13:25.328597Z",
                            "url": "https://files.pythonhosted.org/packages/7c/fb/584ac61e28207bdac958a4089dedb0b5320c27b1394efed7fbe41c7a81f8/ocrd_segment-0.1.20-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "f7a2f6e79d6266e60203d758e0f28a10",
                                "sha256": "03005b6709746327879264055734a2a862162927660fc1a12e48c22424f70b53"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.20.tar.gz",
                            "has_sig": false,
                            "md5_digest": "f7a2f6e79d6266e60203d758e0f28a10",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 47063,
                            "upload_time": "2022-04-27T10:13:27",
                            "upload_time_iso_8601": "2022-04-27T10:13:27.202708Z",
                            "url": "https://files.pythonhosted.org/packages/9b/86/f3edc0849818822688cc3e268ded3fd87b1e62b7e72dbb762926f125de77/ocrd_segment-0.1.20.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.21": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "de244bd81fcb5ebed37c734d0fbdcae5",
                                "sha256": "d0cfc1e752621b029f7e06f82b62be8045114a8dea204bab572455daf9dfc898"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.21-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "de244bd81fcb5ebed37c734d0fbdcae5",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 60962,
                            "upload_time": "2022-05-27T17:19:57",
                            "upload_time_iso_8601": "2022-05-27T17:19:57.804922Z",
                            "url": "https://files.pythonhosted.org/packages/4e/78/f27d17e57ca1042d567c0d46b1aa3a9eef1d551a4189f074698f79ba166c/ocrd_segment-0.1.21-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "b5f42644e95fd0fc5b7a7627d81d3d4f",
                                "sha256": "702735d0c3b362723572826e9f0857c438ecbe5dbe6addb4e5834fd6ea77214f"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.21.tar.gz",
                            "has_sig": false,
                            "md5_digest": "b5f42644e95fd0fc5b7a7627d81d3d4f",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 47291,
                            "upload_time": "2022-05-27T17:20:00",
                            "upload_time_iso_8601": "2022-05-27T17:20:00.281288Z",
                            "url": "https://files.pythonhosted.org/packages/57/84/3204140917ba2f51bf545b97ee0396021471c52881ff2334e730f5ab437d/ocrd_segment-0.1.21.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.3": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "085a227bcdb269b91a0f8ee3a100c2a3",
                                "sha256": "548ec465aac546d580f0914eee1014c456e306be1a8a79795cea8c6da565eb4d"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.3-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "085a227bcdb269b91a0f8ee3a100c2a3",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 37769,
                            "upload_time": "2021-02-08T17:43:27",
                            "upload_time_iso_8601": "2021-02-08T17:43:27.821563Z",
                            "url": "https://files.pythonhosted.org/packages/05/29/1bc4f5b643f44515b5dc75889591c327098529185dcdaaf438a96ade3637/ocrd_segment-0.1.3-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "2f47e083ef840024665731d62377f368",
                                "sha256": "d08a36f9f3f0288b27f4341e552448508f36e0209712ccabc3b48e533b6a8c9a"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.3.tar.gz",
                            "has_sig": false,
                            "md5_digest": "2f47e083ef840024665731d62377f368",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 21304,
                            "upload_time": "2021-02-08T17:43:36",
                            "upload_time_iso_8601": "2021-02-08T17:43:36.690025Z",
                            "url": "https://files.pythonhosted.org/packages/ac/a5/66dc8a54b6b41c63809337f219857a6fa6a7e3bc5f324ab5cce8e7904add/ocrd_segment-0.1.3.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.4": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "dd081361b7f30e307d7ac020a2c10d69",
                                "sha256": "02c140201ccff717599182ec1883af1f864ad388ee2dd85aac326600a6700a3d"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.4-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "dd081361b7f30e307d7ac020a2c10d69",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 38850,
                            "upload_time": "2021-02-08T17:43:29",
                            "upload_time_iso_8601": "2021-02-08T17:43:29.515698Z",
                            "url": "https://files.pythonhosted.org/packages/31/21/fa7aa986536c49aff2a4877e795bab77da76ca7f4b9157dcce961d5ba479/ocrd_segment-0.1.4-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "b498a70c8bac96711070827bcaa39cbf",
                                "sha256": "00e92bd04a5cc05a0a38759f0079bebbb214fe01e03b74bff14a387ea65e866d"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.4.tar.gz",
                            "has_sig": false,
                            "md5_digest": "b498a70c8bac96711070827bcaa39cbf",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 22262,
                            "upload_time": "2021-02-08T17:43:37",
                            "upload_time_iso_8601": "2021-02-08T17:43:37.949959Z",
                            "url": "https://files.pythonhosted.org/packages/11/2c/05529a0ac5add87d7970f49e77ec059f22e0515853a3fe5acbffe06a14ed/ocrd_segment-0.1.4.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.5": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "d4027775498cb33a6bbe6d401ecc2b99",
                                "sha256": "f1ad6e87b1090bff6065189ba174e12dddf1cad0f07a69ae4efd038f0e8ebf75"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.5-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "d4027775498cb33a6bbe6d401ecc2b99",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 38775,
                            "upload_time": "2021-02-08T17:43:31",
                            "upload_time_iso_8601": "2021-02-08T17:43:31.258457Z",
                            "url": "https://files.pythonhosted.org/packages/bf/73/6189e0f6cfe13aa1ab049c4633d5b93d20a3a09405d4ced8ff44a0d294c0/ocrd_segment-0.1.5-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "680b89b6e1b089340ba1d7c9a800d2f7",
                                "sha256": "010a4ac54af124c660031b64248558871d02512711ae475225f537f7175a42db"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.5.tar.gz",
                            "has_sig": false,
                            "md5_digest": "680b89b6e1b089340ba1d7c9a800d2f7",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 23065,
                            "upload_time": "2021-02-08T17:43:39",
                            "upload_time_iso_8601": "2021-02-08T17:43:39.287890Z",
                            "url": "https://files.pythonhosted.org/packages/29/1f/552f540097900162c7d8e2a3acc8ce62bbf891744341627f2515c4f015b3/ocrd_segment-0.1.5.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.6": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "a0f113afd6ddc0b708e87dff515fb184",
                                "sha256": "b2a15f27d6bfb68de73b18ba331ff11585cee036061f80e4322d70b50ce10659"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.6-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "a0f113afd6ddc0b708e87dff515fb184",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 39081,
                            "upload_time": "2021-02-08T17:43:32",
                            "upload_time_iso_8601": "2021-02-08T17:43:32.772702Z",
                            "url": "https://files.pythonhosted.org/packages/c0/f5/d4db0fc423ae85fd5d4149019df3c62ebc49914de5857a94792fb8250751/ocrd_segment-0.1.6-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "031f57e84075d99331541dae1d688a1e",
                                "sha256": "3dba5b018fd373d38d47895783c9ca74809113c70eacb193419d9f6afcea02d5"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.6.tar.gz",
                            "has_sig": false,
                            "md5_digest": "031f57e84075d99331541dae1d688a1e",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 23356,
                            "upload_time": "2021-02-08T17:43:40",
                            "upload_time_iso_8601": "2021-02-08T17:43:40.465937Z",
                            "url": "https://files.pythonhosted.org/packages/ce/77/9ddabd791369ccc2557f945a258d94b897a722243036347a592528688502/ocrd_segment-0.1.6.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.7": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "cd0a801c47356636d9a9c057fa8bb96e",
                                "sha256": "054cf8d326a9139d3b80011442049f0bd651d601448dc43abb09be81a5964080"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.7-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "cd0a801c47356636d9a9c057fa8bb96e",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 39154,
                            "upload_time": "2021-02-08T17:42:37",
                            "upload_time_iso_8601": "2021-02-08T17:42:37.730495Z",
                            "url": "https://files.pythonhosted.org/packages/bf/4e/6e3e71ca344b74d384cd265403baffd80808d47ed7bdb7dcf5da2e5dd9ef/ocrd_segment-0.1.7-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "1e35d248f45253dfa0774eb4b19823ac",
                                "sha256": "32b65c233cd89dd75a7c1cb645ddbdd7a4baeb94bd484031bff8328dd5c68ea8"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.7.tar.gz",
                            "has_sig": false,
                            "md5_digest": "1e35d248f45253dfa0774eb4b19823ac",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 23409,
                            "upload_time": "2021-02-08T17:42:39",
                            "upload_time_iso_8601": "2021-02-08T17:42:39.421935Z",
                            "url": "https://files.pythonhosted.org/packages/47/07/db48e2e4f2f015e85011112029ee68e69dff697c32991b41a73be726adac/ocrd_segment-0.1.7.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.8": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "1ceadc753ea88654688d556304e53f1e",
                                "sha256": "353a0bbdc25b09bc47aa8a4c69d0e9cf9569a71dcb6983c9167c569bf5c98799"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.8-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "1ceadc753ea88654688d556304e53f1e",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 41481,
                            "upload_time": "2021-02-08T17:42:01",
                            "upload_time_iso_8601": "2021-02-08T17:42:01.185464Z",
                            "url": "https://files.pythonhosted.org/packages/33/ff/ff6b4587e1589695eecf7e5bcd5579a6e68fb99373fa0551186c67fc0f0a/ocrd_segment-0.1.8-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "4483807f6149f3031a4d59d146e25caa",
                                "sha256": "bb544369aa6707c7bb71622c12f4d540b8de730439ff68af4c1f65323195f438"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.8.tar.gz",
                            "has_sig": false,
                            "md5_digest": "4483807f6149f3031a4d59d146e25caa",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 28335,
                            "upload_time": "2021-02-08T17:42:02",
                            "upload_time_iso_8601": "2021-02-08T17:42:02.838276Z",
                            "url": "https://files.pythonhosted.org/packages/79/4f/b3793a3bcc917d5c9094ad9366bbba5a93faaf8e0fecfe9cb41c963a73d8/ocrd_segment-0.1.8.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.9": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "226e4c3e100eb68014252be26786e02e",
                                "sha256": "7fb375c10220ea7285542ceffd79cb3d4f44fc369a016bb739ff5f477108da36"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.9-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "226e4c3e100eb68014252be26786e02e",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 41889,
                            "upload_time": "2021-02-10T10:41:36",
                            "upload_time_iso_8601": "2021-02-10T10:41:36.594622Z",
                            "url": "https://files.pythonhosted.org/packages/06/e1/6048e45cc27dd93135dbbdb6f0f38be9c664486e11c86b43f3a96c065b77/ocrd_segment-0.1.9-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "9f04f948193ef55dd248a5d3cf2ac5fb",
                                "sha256": "bcd1cce4fee25f872078c8cc3352abe9a96be7387fea74797edef829eab0943c"
                            },
                            "downloads": -1,
                            "filename": "ocrd_segment-0.1.9.tar.gz",
                            "has_sig": false,
                            "md5_digest": "9f04f948193ef55dd248a5d3cf2ac5fb",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 28691,
                            "upload_time": "2021-02-10T10:41:38",
                            "upload_time_iso_8601": "2021-02-10T10:41:38.209407Z",
                            "url": "https://files.pythonhosted.org/packages/d9/c4/4a4c506b21426b2a3be3a3658ce71bf1bf1823d4ddb537b3124b7d35d8d5/ocrd_segment-0.1.9.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ]
                },
                "urls": [
                    {
                        "comment_text": "",
                        "digests": {
                            "md5": "de244bd81fcb5ebed37c734d0fbdcae5",
                            "sha256": "d0cfc1e752621b029f7e06f82b62be8045114a8dea204bab572455daf9dfc898"
                        },
                        "downloads": -1,
                        "filename": "ocrd_segment-0.1.21-py3-none-any.whl",
                        "has_sig": false,
                        "md5_digest": "de244bd81fcb5ebed37c734d0fbdcae5",
                        "packagetype": "bdist_wheel",
                        "python_version": "py3",
                        "requires_python": null,
                        "size": 60962,
                        "upload_time": "2022-05-27T17:19:57",
                        "upload_time_iso_8601": "2022-05-27T17:19:57.804922Z",
                        "url": "https://files.pythonhosted.org/packages/4e/78/f27d17e57ca1042d567c0d46b1aa3a9eef1d551a4189f074698f79ba166c/ocrd_segment-0.1.21-py3-none-any.whl",
                        "yanked": false,
                        "yanked_reason": null
                    },
                    {
                        "comment_text": "",
                        "digests": {
                            "md5": "b5f42644e95fd0fc5b7a7627d81d3d4f",
                            "sha256": "702735d0c3b362723572826e9f0857c438ecbe5dbe6addb4e5834fd6ea77214f"
                        },
                        "downloads": -1,
                        "filename": "ocrd_segment-0.1.21.tar.gz",
                        "has_sig": false,
                        "md5_digest": "b5f42644e95fd0fc5b7a7627d81d3d4f",
                        "packagetype": "sdist",
                        "python_version": "source",
                        "requires_python": null,
                        "size": 47291,
                        "upload_time": "2022-05-27T17:20:00",
                        "upload_time_iso_8601": "2022-05-27T17:20:00.281288Z",
                        "url": "https://files.pythonhosted.org/packages/57/84/3204140917ba2f51bf545b97ee0396021471c52881ff2334e730f5ab437d/ocrd_segment-0.1.21.tar.gz",
                        "yanked": false,
                        "yanked_reason": null
                    }
                ],
                "vulnerabilities": []
            },
            "url": "https://github.com/OCR-D/ocrd_segment"
        },
        "url": "https://github.com/OCR-D/ocrd_segment"
    },
    {
        "compliant_cli": true,
        "files": {
            "Dockerfile": "FROM ocrd/core\nARG VCS_REF\nARG BUILD_DATE\nLABEL \\\n    maintainer=\"https://ocr-d.de/kontakt\" \\\n    org.label-schema.vcs-ref=$VCS_REF \\\n    org.label-schema.vcs-url=\"https://github.com/OCR-D/ocrd_tesserocr\" \\\n    org.label-schema.build-date=$BUILD_DATE\n\nENV DEBIAN_FRONTEND noninteractive\nENV PYTHONIOENCODING utf8\n\n# avoid HOME/.local/share (hard to predict USER here)\n# so let XDG_DATA_HOME coincide with fixed system location\n# (can still be overridden by derived stages)\nENV XDG_DATA_HOME /usr/local/share\n\nWORKDIR /build-ocrd\nCOPY setup.py .\nCOPY ocrd_tesserocr/ocrd-tool.json .\nCOPY README.md .\nCOPY requirements.txt .\nCOPY requirements_test.txt .\nCOPY ocrd_tesserocr ./ocrd_tesserocr\nCOPY Makefile .\nRUN make deps-ubuntu && \\\n    apt-get install -y --no-install-recommends \\\n    g++ \\\n    && make deps install \\\n    && rm -rf /build-ocrd \\\n    && apt-get -y remove --auto-remove g++ libtesseract-dev make\nRUN ocrd resmgr download ocrd-tesserocr-recognize Fraktur.traineddata\nRUN ocrd resmgr download ocrd-tesserocr-recognize deu.traineddata\n\nWORKDIR /data\nVOLUME /data\n",
            "README.md": "# ocrd_tesserocr\n\n> Crop, deskew, segment into regions / tables / lines / words, or recognize with tesserocr\n\n[![image](https://circleci.com/gh/OCR-D/ocrd_tesserocr.svg?style=svg)](https://circleci.com/gh/OCR-D/ocrd_tesserocr)\n[![image](https://img.shields.io/pypi/v/ocrd_tesserocr.svg)](https://pypi.org/project/ocrd_tesserocr/)\n[![image](https://codecov.io/gh/OCR-D/ocrd_tesserocr/branch/master/graph/badge.svg)](https://codecov.io/gh/OCR-D/ocrd_tesserocr)\n[![Docker Automated build](https://img.shields.io/docker/automated/ocrd/tesserocr.svg)](https://hub.docker.com/r/ocrd/tesserocr/tags/)\n\n## Introduction\n\nThis package offers [OCR-D](https://ocr-d.de/en/spec) compliant [workspace processors](https://ocr-d.de/en/spec/cli) for (much of) the functionality of [Tesseract](https://github.com/tesseract-ocr) via its Python API wrapper [tesserocr](https://github.com/sirfz/tesserocr). (Each processor is a parameterizable step in a configurable [workflow](https://ocr-d.de/en/workflows) of the [OCR-D functional model](https://ocr-d.de/en/about). There are usually various alternative processor implementations for each step. Data is represented with [METS](https://ocr-d.de/en/spec/mets) and [PAGE](https://ocr-d.de/en/spec/page).)\n\nIt includes image preprocessing (cropping, binarization, deskewing), layout analysis (region, table, line, word segmentation), script identification, font style recognition and text recognition. \n\nMost processors can operate on different levels of the PAGE hierarchy, depending on the workflow configuration. In PAGE, image results are referenced (read and written) via `AlternativeImage`, text results via `TextEquiv`, font attributes via `TextStyle`, script via `@primaryScript`, deskewing via `@orientation`, cropping via `Border` and segmentation via `Region` / `TextLine` / `Word` elements with `Coords/@points`.\n\n## Installation\n\n### With docker\n\nThis is the best option if you want to run the software in a container.\n\nYou need to have [Docker](https://docs.docker.com/install/linux/docker-ce/ubuntu/)\n\n\n    docker pull ocrd/tesserocr\n\n\nTo run with docker:\n\n\n    docker run -v path/to/workspaces:/data ocrd/tesserocr ocrd-tesserocrd-crop ...\n\n\n### From PyPI and PPA\n\nThis is the best option if you want to use the stable, released version.\n\n---\n\n**NOTE**\n\nocrd_tesserocr requires **Tesseract >= 4.1.0**. The Tesseract packages\nbundled with **Ubuntu < 19.10** are too old. If you are on Ubuntu 18.04 LTS,\nplease use [Alexander Pozdnyakov's PPA](https://launchpad.net/~alex-p/+archive/ubuntu/tesseract-ocr) repository,\nwhich has up-to-date builds of Tesseract and its dependencies:\n\n```sh\nsudo add-apt-repository ppa:alex-p/tesseract-ocr\nsudo apt-get update\n```\n\n---\n\n```sh\nsudo apt-get install python3 python3-pip libtesseract-dev libleptonica-dev tesseract-ocr wget\npip install ocrd_tesserocr\n```\n\n### From git\n\nUse this option if you want to change the source code or install the latest, unpublished changes.\n\nWe strongly recommend to use [venv](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/).\n\n```sh\ngit clone https://github.com/OCR-D/ocrd_tesserocr\ncd ocrd_tesserocr\n# install Tesseract:\nsudo make deps-ubuntu # or manually from git or via ocrd_all\n# install tesserocr and ocrd_tesserocr:\nmake deps        # or pip install -r requirements\nmake install     # or pip install .\n```\n\n## Models\n\nTesseract comes with synthetically trained models for languages (`tesseract-ocr-{eng,deu,frk,...}` or scripts (`tesseract-ocr-script-{latn,frak,...}`). In addition, various models [trained](https://github.com/tesseract-ocr/tesstrain) on scan data are available from the community.\n\nNote that since all OCR-D processors must resolve file/data resources in a [standardized way](https://ocr-d.de/en/spec/cli#processor-resources), `ocrd-tesserocr-recognize` expects the recognition models to be installed in `$XDG_DATA_HOME/ocrd-resources/ocrd-tesserocr-recognize` (where, usually, `$XDG_DATA_HOME=$HOME/.local/share`). This is the default **resource location** used by `ocrd resmgr`, which you can use to download and list models:\n\n    ocrd resmgr --help\n\n(However, for backwards compatibility, this can be overriden by defining `$TESSDATA_PREFIX` in the environment. In this case users must install models manually \u2013 by linking/copying or downloading them into that directory. The same is true for the non-default location used by the system packages `tesseract-ocr-*`, which is usually `/usr/share/tesseract-ocr/4.00/tessdata`.)\n\nCf. [OCR-D model guide](https://ocr-d.de/en/models).\n\nModels always use the filename suffix `.traineddata`, but are just loaded by their basename. You will need **at least** `eng` and `osd` (even for segmentation and deskewing), probably also `Latin` and `Fraktur` etc.\n\nAs of v0.13.1, you can configure `ocrd-tesserocr-recognize` to select models **dynamically** segment by segment, either via custom conditions on the PAGE-XML annotation (presented as XPath rules), or by automatically choosing the model with highest confidence.\n\n## Usage\n\nFor details, see docstrings in the individual processors and [ocrd-tool.json](ocrd_tesserocr/ocrd-tool.json) descriptions,\nor simply `--help`.\n\nAvailable [OCR-D processors](https://ocr-d.de/en/spec/cli) are:\n\n- [ocrd-tesserocr-crop](ocrd_tesserocr/crop.py) (simplistic)\n  - sets `Border` of pages and adds `AlternativeImage` files to the output fileGrp\n- [ocrd-tesserocr-deskew](ocrd_tesserocr/deskew.py) (for skew and orientation; mind `operation_level`)\n  - sets `@orientation` of regions or pages and adds `AlternativeImage` files to the output fileGrp\n- [ocrd-tesserocr-binarize](ocrd_tesserocr/binarize.py) (Otsu \u2013 not recommended)  \n  - adds `AlternativeImage` files to the output fileGrp\n- [ocrd-tesserocr-recognize](ocrd_tesserocr/recognize.py) (optionally including segmentation; mind `segmentation_level` and `textequiv_level`)\n  - adds `TextRegion`s, `TableRegion`s, `ImageRegion`s, `MathsRegion`s, `SeparatorRegion`s, `NoiseRegion`s, `ReadingOrder` and `AlternativeImage` to `Page` and sets their `@orientation` (optionally)\n  - adds `TextRegion`s to `TableRegion`s and sets their `@orientation` (optionally)\n  - adds `TextLine`s to `TextRegion`s (optionally)\n  - adds `Word`s to `TextLine`s (optionally)\n  - adds `Glyph`s to `Word`s (optionally)\n  - adds `TextEquiv`\n- [ocrd-tesserocr-segment](ocrd_tesserocr/segment.py) (all-in-one segmentation \u2013 recommended; delegates to `recognize`)  \n  - adds `TextRegion`s, `TableRegion`s, `ImageRegion`s, `MathsRegion`s, `SeparatorRegion`s, `NoiseRegion`s, `ReadingOrder` and `AlternativeImage` to `Page` and sets their `@orientation`\n  - adds `TextRegion`s to `TableRegion`s and sets their `@orientation`\n  - adds `TextLine`s to `TextRegion`s\n  - adds `Word`s to `TextLine`s\n  - adds `Glyph`s to `Word`s\n- [ocrd-tesserocr-segment-region](ocrd_tesserocr/segment_region.py) (only regions \u2013 with overlapping bboxes; delegates to `recognize`)\n  - adds `TextRegion`s, `TableRegion`s, `ImageRegion`s, `MathsRegion`s, `SeparatorRegion`s, `NoiseRegion`s and `ReadingOrder` to `Page` and sets their `@orientation`\n- [ocrd-tesserocr-segment-table](ocrd_tesserocr/segment_table.py) (only table cells; delegates to `recognize`)\n  - adds `TextRegion`s to `TableRegion`s\n- [ocrd-tesserocr-segment-line](ocrd_tesserocr/segment_line.py) (only lines \u2013 from overlapping regions; delegates to `recognize`)\n  - adds `TextLine`s to `TextRegion`s\n- [ocrd-tesserocr-segment-word](ocrd_tesserocr/segment_word.py) (only words; delegates to `recognize`)\n  - adds `Word`s to `TextLine`s\n- [ocrd-tesserocr-fontshape](ocrd_tesserocr/fontshape.py) (only text style \u2013 via Tesseract 3 models)\n  - adds `TextStyle` to `Word`s\n\nThe text region `@type`s detected are (from Tesseract's [PolyBlockType](https://github.com/tesseract-ocr/tesseract/blob/11297c983ec7f5c9765d7fa4faa48f5150cf2d38/include/tesseract/publictypes.h#L52-L69)):\n- `paragraph`: normal block (aligned with others in the column)\n- `floating`: unaligned block (`is in a cross-column pull-out region`)\n- `heading`: block that `spans more than one column`\n- `caption`: block for `text that belongs to an image`\n\nIf you are unhappy with these choices, consider post-processing with a dedicated custom processor in Python, or by modifying the PAGE files directly (e.g. `xmlstarlet ed --inplace -u '//pc:TextRegion/@type[.=\"floating\"]' -v paragraph filegrp/*.xml`).\n\nAll segmentation is currently done as **bounding boxes** only by default, i.e. without precise polygonal outlines. For dense page layouts this means that neighbouring regions and neighbouring text lines may overlap a lot. If this is a problem for your workflow, try post-processing like so:\n- after line segmentation: use `ocrd-cis-ocropy-resegment` for polygonalization, or `ocrd-cis-ocropy-clip` on the line level\n- after region segmentation: use `ocrd-segment-repair` with `plausibilize` (and `sanitize` after line segmentation)\n\nIt also means that Tesseract should be allowed to segment across multiple hierarchy levels at once, to avoid introducing inconsistent/duplicate text line assignments in text regions, or word assignments in text lines. Hence,\n- prefer `ocrd-tesserocr-recognize` with `segmentation_level=region` over `ocrd-tesserocr-segment` followed by `ocrd-tesserocr-recognize`, if you want to do all in one with Tesseract,\n- prefer `ocrd-tesserocr-recognize` with `segmentation_level=line` over `ocrd-tesserocr-segment-line` followed by `ocrd-tesserocr-recognize`, if you want to do everything but region segmentation with Tesseract,\n- prefer `ocrd-tesserocr-segment` over `ocrd-tesserocr-segment-region` followed by (`ocrd-tesserocr-segment-table` and) `ocrd-tesserocr-segment-line`, if you want to do everything but recognition with Tesseract.\n\nHowever, you can also run `ocrd-tesserocr-segment*` and `ocrd-tesserocr-recognize` with `shrink_polygons=True` to get **polygons** by post-processing each segment, shrinking to the convex hull of all its symbol outlines.\n\n## Testing\n\n```sh\nmake test\n```\n\nThis downloads some test data from https://github.com/OCR-D/assets under `repo/assets`, and runs some basic test of the Python API as well as the CLIs.\n\nSet `PYTEST_ARGS=\"-s --verbose\"` to see log output (`-s`) and individual test results (`--verbose`).\n",
            "ocrd-tool.json": "{\n  \"version\": \"0.13.6\",\n  \"git_url\": \"https://github.com/OCR-D/ocrd_tesserocr\",\n  \"dockerhub\": \"ocrd/tesserocr\",\n  \"tools\": {\n    \"ocrd-tesserocr-deskew\": {\n      \"executable\": \"ocrd-tesserocr-deskew\",\n      \"categories\": [\"Image preprocessing\"],\n      \"description\": \"Detect script, orientation and skew angle for pages or regions\",\n      \"input_file_grp\": [\n        \"OCR-D-IMG\",\n        \"OCR-D-SEG-BLOCK\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-DESKEW-BLOCK\"\n      ],\n      \"steps\": [\"preprocessing/optimization/deskewing\"],\n      \"parameters\": {\n        \"dpi\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"description\": \"pixel density in dots per inch (overrides any meta-data in the images); disabled when negative\",\n          \"default\": 0\n        },\n        \"operation_level\": {\n          \"type\": \"string\",\n          \"enum\": [\"page\",\"region\", \"line\"],\n          \"default\": \"region\",\n          \"description\": \"PAGE XML hierarchy level to operate on\"\n        },\n        \"min_orientation_confidence\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"default\": 1.5,\n          \"description\": \"Minimum confidence score to apply orientation as detected by OSD\"\n        }\n      }\n    },\n    \"ocrd-tesserocr-fontshape\": {\n      \"executable\": \"ocrd-tesserocr-fontshape\",\n      \"categories\": [\"Text recognition and optimization\"],\n      \"description\": \"Recognize font shapes (family/monospace/bold/italic) and size in segmented words with Tesseract (using annotated derived images, or masking and cropping images from coordinate polygons), annotating TextStyle\",\n      \"input_file_grp\": [\n        \"OCR-D-SEG-WORD\",\n        \"OCR-D-OCR\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-OCR-FONTSTYLE\"\n      ],\n      \"steps\": [\"recognition/font-identification\"],\n      \"parameters\": {\n        \"dpi\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"description\": \"pixel density in dots per inch (overrides any meta-data in the images); disabled when negative\",\n          \"default\": 0\n        },\n        \"padding\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"default\": 0,\n          \"description\": \"Number of background-filled pixels to add around the word image (i.e. the annotated AlternativeImage if it exists or the higher-level image cropped to the bounding box and masked by the polygon otherwise) on each side before recognition.\"\n        },\n        \"model\": {\n          \"type\": \"string\",\n          \"default\": \"osd\",\n          \"description\": \"tessdata model to apply (an ISO 639-3 language specification or some other basename, e.g. deu-frak or osd); must be an old (pre-LSTM) model\"\n        }\n      }\n    },\n    \"ocrd-tesserocr-recognize\": {\n      \"executable\": \"ocrd-tesserocr-recognize\",\n      \"categories\": [\"Text recognition and optimization\"],\n      \"description\": \"Segment and/or recognize text with Tesseract (using annotated derived images, or masking and cropping images from coordinate polygons) on any level of the PAGE hierarchy.\",\n      \"input_file_grp\": [\n        \"OCR-D-SEG-PAGE\",\n        \"OCR-D-SEG-REGION\",\n        \"OCR-D-SEG-TABLE\",\n        \"OCR-D-SEG-LINE\",\n        \"OCR-D-SEG-WORD\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-SEG-REGION\",\n        \"OCR-D-SEG-TABLE\",\n        \"OCR-D-SEG-LINE\",\n        \"OCR-D-SEG-WORD\",\n        \"OCR-D-SEG-GLYPH\",\n        \"OCR-D-OCR-TESS\"\n      ],\n      \"steps\": [\n        \"layout/segmentation/region\",\n        \"layout/segmentation/line\",\n        \"recognition/text-recognition\"\n      ],\n      \"parameters\": {\n        \"dpi\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"description\": \"pixel density in dots per inch (overrides any meta-data in the images); disabled when negative\",\n          \"default\": 0\n        },\n        \"padding\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"default\": 0,\n          \"description\": \"Extend detected region/cell/line/word rectangles by this many (true) pixels, or extend existing region/line/word images (i.e. the annotated AlternativeImage if it exists or the higher-level image cropped to the bounding box and masked by the polygon otherwise) by this many (background/white) pixels on each side before recognition.\"\n        },\n        \"segmentation_level\": {\n          \"type\": \"string\",\n          \"enum\": [\"region\", \"cell\", \"line\", \"word\", \"glyph\", \"none\"],\n          \"default\": \"word\",\n          \"description\": \"Highest PAGE XML hierarchy level to remove existing annotation from and detect segments for (before iterating downwards); if ``none``, does not attempt any new segmentation; if ``cell``, starts at table regions, detecting text regions (cells). Ineffective when lower than ``textequiv_level``.\"\n        },\n        \"textequiv_level\": {\n          \"type\": \"string\",\n          \"enum\": [\"region\", \"cell\", \"line\", \"word\", \"glyph\", \"none\"],\n          \"default\": \"word\",\n          \"description\": \"Lowest PAGE XML hierarchy level to re-use or detect segments for and add the TextEquiv results to (before projecting upwards); if ``none``, adds segmentation down to the glyph level, but does not attempt recognition at all; if ``cell``, stops short before text lines, adding text of text regions inside tables (cells) or on page level only.\"\n        },\n        \"overwrite_segments\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"If ``segmentation_level`` is not none, but an element already contains segments, remove them and segment again. Otherwise use the existing segments of that element.\"\n        },\n        \"overwrite_text\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"description\": \"If ``textequiv_level`` is not none, but a segment already contains TextEquivs, remove them and replace with recognised text. Otherwise add new text as alternative. (Only the first entry is projected upwards.)\"\n        },\n        \"shrink_polygons\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"When detecting any segments, annotate polygon coordinates instead of bounding box rectangles by projecting the convex hull of all symbols.\"\n        },\n        \"block_polygons\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"When detecting regions, annotate polygon coordinates instead of bounding box rectangles by querying Tesseract accordingly.\"\n        },\n        \"find_tables\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"description\": \"When detecting regions, recognise tables as table regions (Tesseract's ``textord_tabfind_find_tables=1``).\"\n        },\n        \"find_staves\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"When detecting regions, recognize music staves as non-text, suppressing it in the binary image (Tesseract's ``pageseg_apply_music_mask``). Note that this might wrongly detect tables as staves.\"\n        },\n        \"sparse_text\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"When detecting regions, use 'sparse text' page segmentation mode (finding as much text as possible in no particular order): only text regions, single lines without vertical or horizontal space.\"\n        },\n        \"raw_lines\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"When detecting lines, do not attempt additional segmentation (baseline+xheight+ascenders/descenders prediction) on line images. Can increase accuracy for certain workflows. Disable when line segments/images may contain components of more than 1 line, or larger gaps/white-spaces.\"\n        },\n        \"char_whitelist\": {\n          \"type\": \"string\",\n          \"default\": \"\",\n          \"description\": \"When recognizing text, enumeration of character hypotheses (from the model) to allow exclusively; overruled by blacklist if set.\"\n        },\n        \"char_blacklist\": {\n          \"type\": \"string\",\n          \"default\": \"\",\n          \"description\": \"When recognizing text, enumeration of character hypotheses (from the model) to suppress; overruled by unblacklist if set.\"\n        },\n        \"char_unblacklist\": {\n          \"type\": \"string\",\n          \"default\": \"\",\n          \"description\": \"When recognizing text, enumeration of character hypotheses (from the model) to allow inclusively.\"\n        },\n        \"tesseract_parameters\": {\n          \"type\": \"object\",\n          \"default\": {},\n          \"description\": \"Dictionary of additional Tesseract runtime variables (cf. tesseract --print-parameters), string values.\"\n        },\n\t\"xpath_parameters\": {\n\t  \"type\": \"object\",\n\t  \"default\": {},\n\t  \"description\": \"Set additional Tesseract runtime variables according to results of XPath queries into the segment. (As a convenience, `@language` and `@script` also match their upwards `@primary*` and `@secondary*` variants where applicable.) (Example: {'ancestor::TextRegion/@type=\\\"page-number\\\"': {'char_whitelist': '0123456789-'}, 'contains(@custom,\\\"ISBN\\\")': {'char_whitelist': '0123456789-'}})\"\n\t},\n\t\"xpath_model\": {\n\t  \"type\": \"object\",\n\t  \"default\": {},\n\t  \"description\": \"Prefer models mapped according to results of XPath queries into the segment. (As a convenience, `@language` and `@script` also match their upwards `@primary*` and `@secondary*` variants where applicable.) If no queries / mappings match (or under the default empty parameter), then fall back to `model`. If there are multiple matches, combine their results. (Example: {'starts-with(@script,\\\"Latn\\\")': 'Latin', 'starts-with(@script,\\\"Grek\\\")': 'Greek', '@language=\\\"Latin\\\"': 'lat', '@language=\\\"Greek\\\"': 'grc+ell', 'ancestor::TextRegion/@type=\\\"page-number\\\"': 'eng'})\"\n\t},\n\t\"auto_model\": {\n\t  \"type\": \"boolean\",\n\t  \"default\": false,\n\t  \"description\": \"Prefer models performing best (by confidence) per segment (if multiple given in `model`). Repeats the OCR of the best model once (i.e. slower). (Use as a fallback to xpath_model if you do not trust script/language detection.)\"\n\t},\n        \"model\": {\n          \"type\": \"string\",\n          \"description\": \"The tessdata text recognition model to apply (an ISO 639-3 language specification or some other basename, e.g. deu-frak or Fraktur).\"\n        },\n        \"oem\": {\n          \"type\": \"string\",\n          \"enum\": [\"TESSERACT_ONLY\", \"LSTM_ONLY\", \"TESSERACT_LSTM_COMBINED\", \"DEFAULT\"],\n          \"default\": \"DEFAULT\",\n          \"description\": \"Tesseract OCR engine mode to use:\\n* Run Tesseract only - fastest,\\n* Run just the LSTM line recognizer. (>=v4.00),\\n*Run the LSTM recognizer, but allow fallback to Tesseract when things get difficult. (>=v4.00),\\n*Run both and combine results - best accuracy.\"\n        }\n      }\n    },\n     \"ocrd-tesserocr-segment\": {\n      \"executable\": \"ocrd-tesserocr-segment\",\n      \"categories\": [\"Layout analysis\"],\n      \"description\": \"Segment page into regions and lines with Tesseract\",\n      \"input_file_grp\": [\n        \"OCR-D-IMG\",\n        \"OCR-D-SEG-PAGE\",\n        \"OCR-D-GT-SEG-PAGE\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-SEG-LINE\"\n      ],\n      \"steps\": [\"layout/segmentation/region\", \"layout/segmentation/line\"],\n      \"parameters\": {\n        \"dpi\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"description\": \"pixel density in dots per inch (overrides any meta-data in the images); disabled when negative\",\n          \"default\": 0\n        },\n        \"padding\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"description\": \"extend detected region rectangles by this many (true) pixels\",\n          \"default\": 4\n        },\n        \"shrink_polygons\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"annotate polygon coordinates instead of bounding box rectangles by projecting the convex hull of all symbols\"\n        },\n        \"block_polygons\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"annotate polygon coordinates instead of bounding box rectangles\"\n        },\n        \"find_tables\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"description\": \"recognise tables as table regions (textord_tabfind_find_tables)\"\n        },\n        \"find_staves\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"When detecting regions, recognize music staves as non-text, suppressing it in the binary image (Tesseract's ``pageseg_apply_music_mask``). Note that this might wrongly detect tables as staves.\"\n        },\n        \"sparse_text\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"use 'sparse text' page segmentation mode (find as much text as possible in no particular order): only text regions, single lines without vertical or horizontal space\"\n        }\n      }\n   },\n   \"ocrd-tesserocr-segment-region\": {\n      \"executable\": \"ocrd-tesserocr-segment-region\",\n      \"categories\": [\"Layout analysis\"],\n      \"description\": \"Segment page into regions with Tesseract\",\n      \"input_file_grp\": [\n        \"OCR-D-IMG\",\n        \"OCR-D-SEG-PAGE\",\n        \"OCR-D-GT-SEG-PAGE\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-SEG-BLOCK\"\n      ],\n      \"steps\": [\"layout/segmentation/region\"],\n      \"parameters\": {\n        \"dpi\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"description\": \"pixel density in dots per inch (overrides any meta-data in the images); disabled when negative\",\n          \"default\": 0\n        },\n        \"overwrite_regions\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"description\": \"Remove existing layout and text annotation below the Page level (otherwise skip page; no incremental annotation yet).\"\n        },\n        \"padding\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"description\": \"extend detected region rectangles by this many (true) pixels\",\n          \"default\": 0\n        },\n        \"shrink_polygons\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"annotate polygon coordinates instead of bounding box rectangles by projecting the convex hull of all symbols\"\n        },\n        \"crop_polygons\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"annotate polygon coordinates instead of bounding box rectangles\"\n        },\n        \"find_tables\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"description\": \"recognise tables as table regions (textord_tabfind_find_tables)\"\n        },\n        \"find_staves\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"When detecting regions, recognize music staves as non-text, suppressing it in the binary image (Tesseract's ``pageseg_apply_music_mask``). Note that this might wrongly detect tables as staves.\"\n        },\n        \"sparse_text\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"use 'sparse text' page segmentation mode (find as much text as possible in no particular order): only text regions, single lines without vertical or horizontal space\"\n        }\n      }\n    },\n     \"ocrd-tesserocr-segment-table\": {\n      \"executable\": \"ocrd-tesserocr-segment-table\",\n      \"categories\": [\"Layout analysis\"],\n      \"description\": \"Segment table regions into cell text regions with Tesseract\",\n      \"input_file_grp\": [\n        \"OCR-D-SEG-BLOCK\",\n        \"OCR-D-GT-SEG-BLOCK\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-SEG-BLOCK\"\n      ],\n      \"steps\": [\"layout/segmentation/region\"],\n      \"parameters\": {\n        \"dpi\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"description\": \"pixel density in dots per inch (overrides any meta-data in the images); disabled when negative\",\n          \"default\": 0\n        },\n        \"overwrite_cells\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"description\": \"Remove existing layout and text annotation below the TableRegion level (otherwise skip table; no incremental annotation yet).\"\n        },\n        \"padding\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"description\": \"extend detected cell rectangles by this many (true) pixels\",\n          \"default\": 0\n        },\n        \"shrink_polygons\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"annotate polygon coordinates instead of bounding box rectangles by projecting the convex hull of all symbols\"\n        }\n      }\n     },\n     \"ocrd-tesserocr-segment-line\": {\n      \"executable\": \"ocrd-tesserocr-segment-line\",\n      \"categories\": [\"Layout analysis\"],\n      \"description\": \"Segment regions into lines with Tesseract\",\n      \"input_file_grp\": [\n        \"OCR-D-SEG-BLOCK\",\n        \"OCR-D-GT-SEG-BLOCK\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-SEG-LINE\"\n      ],\n      \"steps\": [\"layout/segmentation/line\"],\n      \"parameters\": {\n        \"dpi\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"description\": \"pixel density in dots per inch (overrides any meta-data in the images); disabled when negative\",\n          \"default\": 0\n        },\n        \"overwrite_lines\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"description\": \"Remove existing layout and text annotation below the TextRegion level (otherwise skip region; no incremental annotation yet).\"\n        },\n        \"padding\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"description\": \"extend detected line rectangles by this many (true) pixels\",\n          \"default\": 0\n        },\n        \"shrink_polygons\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"annotate polygon coordinates instead of bounding box rectangles by projecting the convex hull of all symbols\"\n        }\n      }\n    },\n    \"ocrd-tesserocr-segment-word\": {\n      \"executable\": \"ocrd-tesserocr-segment-word\",\n      \"categories\": [\"Layout analysis\"],\n      \"description\": \"Segment lines into words with Tesseract\",\n      \"input_file_grp\": [\n        \"OCR-D-SEG-LINE\",\n        \"OCR-D-GT-SEG-LINE\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-SEG-WORD\"\n      ],\n      \"steps\": [\"layout/segmentation/word\"],\n      \"parameters\": {\n        \"dpi\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"description\": \"pixel density in dots per inch (overrides any meta-data in the images); disabled when negative\",\n          \"default\": 0\n        },\n        \"overwrite_words\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"description\": \"Remove existing layout and text annotation below the TextLine level (otherwise skip line; no incremental annotation yet).\"\n        },\n        \"padding\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"description\": \"extend detected cell rectangles by this many (true) pixels\",\n          \"default\": 0\n        },\n        \"shrink_polygons\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"annotate polygon coordinates instead of bounding box rectangles by projecting the convex hull of all symbols\"\n        }\n      }\n    },\n    \"ocrd-tesserocr-crop\": {\n      \"executable\": \"ocrd-tesserocr-crop\",\n      \"categories\": [\"Image preprocessing\"],\n      \"description\": \"Poor man's cropping via region segmentation\",\n      \"input_file_grp\": [\n\t\"OCR-D-IMG\"\n      ],\n      \"output_file_grp\": [\n\t\"OCR-D-SEG-PAGE\"\n      ],\n      \"steps\": [\"preprocessing/optimization/cropping\"],\n      \"parameters\" : {\n        \"dpi\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"description\": \"pixel density in dots per inch (overrides any meta-data in the images); disabled when negative\",\n          \"default\": 0\n        },\n        \"padding\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"description\": \"extend detected border by this many (true) pixels on every side\",\n          \"default\": 4\n        }\n      }\n    },\n    \"ocrd-tesserocr-binarize\": {\n      \"executable\": \"ocrd-tesserocr-binarize\",\n      \"categories\": [\"Image preprocessing\"],\n      \"description\": \"Binarize regions or lines with Tesseract's global Otsu\",\n      \"input_file_grp\": [\n        \"OCR-D-IMG\",\n        \"OCR-D-SEG-BLOCK\",\n        \"OCR-D-SEG-LINE\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-BIN-BLOCK\",\n        \"OCR-D-BIN-LINE\"\n      ],\n      \"steps\": [\"preprocessing/optimization/binarization\"],\n      \"parameters\": {\n        \"operation_level\": {\n          \"type\": \"string\",\n          \"enum\": [\"page\", \"region\", \"line\"],\n          \"default\": \"page\",\n          \"description\": \"PAGE XML hierarchy level to operate on\"\n        }\n      }\n    }\n  }\n}\n",
            "setup.py": "# -*- coding: utf-8 -*-\n\"\"\"\nInstalls the following command-line executables:\n\n    - ocrd-tesserocr-binarize\n    - ocrd-tesserocr-crop\n    - ocrd-tesserocr-deskew\n    - ocrd-tesserocr-recognize\n    - ocrd-tesserocr-segment\n    - ocrd-tesserocr-segment-region\n    - ocrd-tesserocr-segment-table\n    - ocrd-tesserocr-segment-line\n    - ocrd-tesserocr-segment-word\n    - ocrd-tesserocr-fontshape\n\"\"\"\nimport codecs\nimport json\nfrom setuptools import setup, find_packages\n\nwith open('./ocrd-tool.json', 'r') as f:\n    version = json.load(f)['version']\n\nsetup(\n    name='ocrd_tesserocr',\n    version=version,\n    description='wrap Tesseract preprocessing, segmentation and recognition',\n    long_description=codecs.open('README.md', encoding='utf-8').read(),\n    long_description_content_type='text/markdown',\n    author='Konstantin Baierer, Kay-Michael W\u00fcrzner, Robert Sachunsky',\n    author_email='unixprog@gmail.com, wuerzner@gmail.com, sachunsky@informatik.uni-leipzig.de',\n    url='https://github.com/OCR-D/ocrd_tesserocr',\n    license='Apache License 2.0',\n    packages=find_packages(exclude=('tests', 'docs')),\n    install_requires=open('requirements.txt').read().split('\\n'),\n    package_data={\n        '': ['*.json', '*.yml', '*.yaml'],\n    },\n    entry_points={\n        'console_scripts': [\n            'ocrd-tesserocr-fontshape=ocrd_tesserocr.cli:ocrd_tesserocr_fontshape',\n            'ocrd-tesserocr-recognize=ocrd_tesserocr.cli:ocrd_tesserocr_recognize',\n            'ocrd-tesserocr-segment=ocrd_tesserocr.cli:ocrd_tesserocr_segment',\n            'ocrd-tesserocr-segment-region=ocrd_tesserocr.cli:ocrd_tesserocr_segment_region',\n            'ocrd-tesserocr-segment-table=ocrd_tesserocr.cli:ocrd_tesserocr_segment_table',\n            'ocrd-tesserocr-segment-line=ocrd_tesserocr.cli:ocrd_tesserocr_segment_line',\n            'ocrd-tesserocr-segment-word=ocrd_tesserocr.cli:ocrd_tesserocr_segment_word',\n            'ocrd-tesserocr-crop=ocrd_tesserocr.cli:ocrd_tesserocr_crop',\n            'ocrd-tesserocr-deskew=ocrd_tesserocr.cli:ocrd_tesserocr_deskew',\n            'ocrd-tesserocr-binarize=ocrd_tesserocr.cli:ocrd_tesserocr_binarize',\n        ]\n    },\n)\n"
        },
        "git": {
            "last_commit": "Wed Mar 23 09:28:32 2022 +0100",
            "latest_tag": "v0.13.6",
            "number_of_commits": "518",
            "url": "https://github.com/OCR-D/ocrd_tesserocr"
        },
        "name": "ocrd_tesserocr",
        "ocrd_tool": {
            "dockerhub": "ocrd/tesserocr",
            "git_url": "https://github.com/OCR-D/ocrd_tesserocr",
            "tools": {
                "ocrd-tesserocr-binarize": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Binarize regions or lines with Tesseract's global Otsu",
                    "executable": "ocrd-tesserocr-binarize",
                    "input_file_grp": [
                        "OCR-D-IMG",
                        "OCR-D-SEG-BLOCK",
                        "OCR-D-SEG-LINE"
                    ],
                    "output_file_grp": [
                        "OCR-D-BIN-BLOCK",
                        "OCR-D-BIN-LINE"
                    ],
                    "parameters": {
                        "operation_level": {
                            "default": "page",
                            "description": "PAGE XML hierarchy level to operate on",
                            "enum": [
                                "page",
                                "region",
                                "line"
                            ],
                            "type": "string"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/binarization"
                    ]
                },
                "ocrd-tesserocr-crop": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Poor man's cropping via region segmentation",
                    "executable": "ocrd-tesserocr-crop",
                    "input_file_grp": [
                        "OCR-D-IMG"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-PAGE"
                    ],
                    "parameters": {
                        "dpi": {
                            "default": 0,
                            "description": "pixel density in dots per inch (overrides any meta-data in the images); disabled when negative",
                            "format": "float",
                            "type": "number"
                        },
                        "padding": {
                            "default": 4,
                            "description": "extend detected border by this many (true) pixels on every side",
                            "format": "integer",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/cropping"
                    ]
                },
                "ocrd-tesserocr-deskew": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Detect script, orientation and skew angle for pages or regions",
                    "executable": "ocrd-tesserocr-deskew",
                    "input_file_grp": [
                        "OCR-D-IMG",
                        "OCR-D-SEG-BLOCK"
                    ],
                    "output_file_grp": [
                        "OCR-D-DESKEW-BLOCK"
                    ],
                    "parameters": {
                        "dpi": {
                            "default": 0,
                            "description": "pixel density in dots per inch (overrides any meta-data in the images); disabled when negative",
                            "format": "float",
                            "type": "number"
                        },
                        "min_orientation_confidence": {
                            "default": 1.5,
                            "description": "Minimum confidence score to apply orientation as detected by OSD",
                            "format": "float",
                            "type": "number"
                        },
                        "operation_level": {
                            "default": "region",
                            "description": "PAGE XML hierarchy level to operate on",
                            "enum": [
                                "page",
                                "region",
                                "line"
                            ],
                            "type": "string"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/deskewing"
                    ]
                },
                "ocrd-tesserocr-fontshape": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "Recognize font shapes (family/monospace/bold/italic) and size in segmented words with Tesseract (using annotated derived images, or masking and cropping images from coordinate polygons), annotating TextStyle",
                    "executable": "ocrd-tesserocr-fontshape",
                    "input_file_grp": [
                        "OCR-D-SEG-WORD",
                        "OCR-D-OCR"
                    ],
                    "output_file_grp": [
                        "OCR-D-OCR-FONTSTYLE"
                    ],
                    "parameters": {
                        "dpi": {
                            "default": 0,
                            "description": "pixel density in dots per inch (overrides any meta-data in the images); disabled when negative",
                            "format": "float",
                            "type": "number"
                        },
                        "model": {
                            "default": "osd",
                            "description": "tessdata model to apply (an ISO 639-3 language specification or some other basename, e.g. deu-frak or osd); must be an old (pre-LSTM) model",
                            "type": "string"
                        },
                        "padding": {
                            "default": 0,
                            "description": "Number of background-filled pixels to add around the word image (i.e. the annotated AlternativeImage if it exists or the higher-level image cropped to the bounding box and masked by the polygon otherwise) on each side before recognition.",
                            "format": "integer",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "recognition/font-identification"
                    ]
                },
                "ocrd-tesserocr-recognize": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "Segment and/or recognize text with Tesseract (using annotated derived images, or masking and cropping images from coordinate polygons) on any level of the PAGE hierarchy.",
                    "executable": "ocrd-tesserocr-recognize",
                    "input_file_grp": [
                        "OCR-D-SEG-PAGE",
                        "OCR-D-SEG-REGION",
                        "OCR-D-SEG-TABLE",
                        "OCR-D-SEG-LINE",
                        "OCR-D-SEG-WORD"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-REGION",
                        "OCR-D-SEG-TABLE",
                        "OCR-D-SEG-LINE",
                        "OCR-D-SEG-WORD",
                        "OCR-D-SEG-GLYPH",
                        "OCR-D-OCR-TESS"
                    ],
                    "parameters": {
                        "auto_model": {
                            "default": false,
                            "description": "Prefer models performing best (by confidence) per segment (if multiple given in `model`). Repeats the OCR of the best model once (i.e. slower). (Use as a fallback to xpath_model if you do not trust script/language detection.)",
                            "type": "boolean"
                        },
                        "block_polygons": {
                            "default": false,
                            "description": "When detecting regions, annotate polygon coordinates instead of bounding box rectangles by querying Tesseract accordingly.",
                            "type": "boolean"
                        },
                        "char_blacklist": {
                            "default": "",
                            "description": "When recognizing text, enumeration of character hypotheses (from the model) to suppress; overruled by unblacklist if set.",
                            "type": "string"
                        },
                        "char_unblacklist": {
                            "default": "",
                            "description": "When recognizing text, enumeration of character hypotheses (from the model) to allow inclusively.",
                            "type": "string"
                        },
                        "char_whitelist": {
                            "default": "",
                            "description": "When recognizing text, enumeration of character hypotheses (from the model) to allow exclusively; overruled by blacklist if set.",
                            "type": "string"
                        },
                        "dpi": {
                            "default": 0,
                            "description": "pixel density in dots per inch (overrides any meta-data in the images); disabled when negative",
                            "format": "float",
                            "type": "number"
                        },
                        "find_staves": {
                            "default": false,
                            "description": "When detecting regions, recognize music staves as non-text, suppressing it in the binary image (Tesseract's ``pageseg_apply_music_mask``). Note that this might wrongly detect tables as staves.",
                            "type": "boolean"
                        },
                        "find_tables": {
                            "default": true,
                            "description": "When detecting regions, recognise tables as table regions (Tesseract's ``textord_tabfind_find_tables=1``).",
                            "type": "boolean"
                        },
                        "model": {
                            "description": "The tessdata text recognition model to apply (an ISO 639-3 language specification or some other basename, e.g. deu-frak or Fraktur).",
                            "type": "string"
                        },
                        "oem": {
                            "default": "DEFAULT",
                            "description": "Tesseract OCR engine mode to use:\n* Run Tesseract only - fastest,\n* Run just the LSTM line recognizer. (>=v4.00),\n*Run the LSTM recognizer, but allow fallback to Tesseract when things get difficult. (>=v4.00),\n*Run both and combine results - best accuracy.",
                            "enum": [
                                "TESSERACT_ONLY",
                                "LSTM_ONLY",
                                "TESSERACT_LSTM_COMBINED",
                                "DEFAULT"
                            ],
                            "type": "string"
                        },
                        "overwrite_segments": {
                            "default": false,
                            "description": "If ``segmentation_level`` is not none, but an element already contains segments, remove them and segment again. Otherwise use the existing segments of that element.",
                            "type": "boolean"
                        },
                        "overwrite_text": {
                            "default": true,
                            "description": "If ``textequiv_level`` is not none, but a segment already contains TextEquivs, remove them and replace with recognised text. Otherwise add new text as alternative. (Only the first entry is projected upwards.)",
                            "type": "boolean"
                        },
                        "padding": {
                            "default": 0,
                            "description": "Extend detected region/cell/line/word rectangles by this many (true) pixels, or extend existing region/line/word images (i.e. the annotated AlternativeImage if it exists or the higher-level image cropped to the bounding box and masked by the polygon otherwise) by this many (background/white) pixels on each side before recognition.",
                            "format": "integer",
                            "type": "number"
                        },
                        "raw_lines": {
                            "default": false,
                            "description": "When detecting lines, do not attempt additional segmentation (baseline+xheight+ascenders/descenders prediction) on line images. Can increase accuracy for certain workflows. Disable when line segments/images may contain components of more than 1 line, or larger gaps/white-spaces.",
                            "type": "boolean"
                        },
                        "segmentation_level": {
                            "default": "word",
                            "description": "Highest PAGE XML hierarchy level to remove existing annotation from and detect segments for (before iterating downwards); if ``none``, does not attempt any new segmentation; if ``cell``, starts at table regions, detecting text regions (cells). Ineffective when lower than ``textequiv_level``.",
                            "enum": [
                                "region",
                                "cell",
                                "line",
                                "word",
                                "glyph",
                                "none"
                            ],
                            "type": "string"
                        },
                        "shrink_polygons": {
                            "default": false,
                            "description": "When detecting any segments, annotate polygon coordinates instead of bounding box rectangles by projecting the convex hull of all symbols.",
                            "type": "boolean"
                        },
                        "sparse_text": {
                            "default": false,
                            "description": "When detecting regions, use 'sparse text' page segmentation mode (finding as much text as possible in no particular order): only text regions, single lines without vertical or horizontal space.",
                            "type": "boolean"
                        },
                        "tesseract_parameters": {
                            "default": {},
                            "description": "Dictionary of additional Tesseract runtime variables (cf. tesseract --print-parameters), string values.",
                            "type": "object"
                        },
                        "textequiv_level": {
                            "default": "word",
                            "description": "Lowest PAGE XML hierarchy level to re-use or detect segments for and add the TextEquiv results to (before projecting upwards); if ``none``, adds segmentation down to the glyph level, but does not attempt recognition at all; if ``cell``, stops short before text lines, adding text of text regions inside tables (cells) or on page level only.",
                            "enum": [
                                "region",
                                "cell",
                                "line",
                                "word",
                                "glyph",
                                "none"
                            ],
                            "type": "string"
                        },
                        "xpath_model": {
                            "default": {},
                            "description": "Prefer models mapped according to results of XPath queries into the segment. (As a convenience, `@language` and `@script` also match their upwards `@primary*` and `@secondary*` variants where applicable.) If no queries / mappings match (or under the default empty parameter), then fall back to `model`. If there are multiple matches, combine their results. (Example: {'starts-with(@script,\"Latn\")': 'Latin', 'starts-with(@script,\"Grek\")': 'Greek', '@language=\"Latin\"': 'lat', '@language=\"Greek\"': 'grc+ell', 'ancestor::TextRegion/@type=\"page-number\"': 'eng'})",
                            "type": "object"
                        },
                        "xpath_parameters": {
                            "default": {},
                            "description": "Set additional Tesseract runtime variables according to results of XPath queries into the segment. (As a convenience, `@language` and `@script` also match their upwards `@primary*` and `@secondary*` variants where applicable.) (Example: {'ancestor::TextRegion/@type=\"page-number\"': {'char_whitelist': '0123456789-'}, 'contains(@custom,\"ISBN\")': {'char_whitelist': '0123456789-'}})",
                            "type": "object"
                        }
                    },
                    "steps": [
                        "layout/segmentation/region",
                        "layout/segmentation/line",
                        "recognition/text-recognition"
                    ]
                },
                "ocrd-tesserocr-segment": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Segment page into regions and lines with Tesseract",
                    "executable": "ocrd-tesserocr-segment",
                    "input_file_grp": [
                        "OCR-D-IMG",
                        "OCR-D-SEG-PAGE",
                        "OCR-D-GT-SEG-PAGE"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-LINE"
                    ],
                    "parameters": {
                        "block_polygons": {
                            "default": false,
                            "description": "annotate polygon coordinates instead of bounding box rectangles",
                            "type": "boolean"
                        },
                        "dpi": {
                            "default": 0,
                            "description": "pixel density in dots per inch (overrides any meta-data in the images); disabled when negative",
                            "format": "float",
                            "type": "number"
                        },
                        "find_staves": {
                            "default": false,
                            "description": "When detecting regions, recognize music staves as non-text, suppressing it in the binary image (Tesseract's ``pageseg_apply_music_mask``). Note that this might wrongly detect tables as staves.",
                            "type": "boolean"
                        },
                        "find_tables": {
                            "default": true,
                            "description": "recognise tables as table regions (textord_tabfind_find_tables)",
                            "type": "boolean"
                        },
                        "padding": {
                            "default": 4,
                            "description": "extend detected region rectangles by this many (true) pixels",
                            "format": "integer",
                            "type": "number"
                        },
                        "shrink_polygons": {
                            "default": false,
                            "description": "annotate polygon coordinates instead of bounding box rectangles by projecting the convex hull of all symbols",
                            "type": "boolean"
                        },
                        "sparse_text": {
                            "default": false,
                            "description": "use 'sparse text' page segmentation mode (find as much text as possible in no particular order): only text regions, single lines without vertical or horizontal space",
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/segmentation/region",
                        "layout/segmentation/line"
                    ]
                },
                "ocrd-tesserocr-segment-line": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Segment regions into lines with Tesseract",
                    "executable": "ocrd-tesserocr-segment-line",
                    "input_file_grp": [
                        "OCR-D-SEG-BLOCK",
                        "OCR-D-GT-SEG-BLOCK"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-LINE"
                    ],
                    "parameters": {
                        "dpi": {
                            "default": 0,
                            "description": "pixel density in dots per inch (overrides any meta-data in the images); disabled when negative",
                            "format": "float",
                            "type": "number"
                        },
                        "overwrite_lines": {
                            "default": true,
                            "description": "Remove existing layout and text annotation below the TextRegion level (otherwise skip region; no incremental annotation yet).",
                            "type": "boolean"
                        },
                        "padding": {
                            "default": 0,
                            "description": "extend detected line rectangles by this many (true) pixels",
                            "format": "integer",
                            "type": "number"
                        },
                        "shrink_polygons": {
                            "default": false,
                            "description": "annotate polygon coordinates instead of bounding box rectangles by projecting the convex hull of all symbols",
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/segmentation/line"
                    ]
                },
                "ocrd-tesserocr-segment-region": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Segment page into regions with Tesseract",
                    "executable": "ocrd-tesserocr-segment-region",
                    "input_file_grp": [
                        "OCR-D-IMG",
                        "OCR-D-SEG-PAGE",
                        "OCR-D-GT-SEG-PAGE"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-BLOCK"
                    ],
                    "parameters": {
                        "crop_polygons": {
                            "default": false,
                            "description": "annotate polygon coordinates instead of bounding box rectangles",
                            "type": "boolean"
                        },
                        "dpi": {
                            "default": 0,
                            "description": "pixel density in dots per inch (overrides any meta-data in the images); disabled when negative",
                            "format": "float",
                            "type": "number"
                        },
                        "find_staves": {
                            "default": false,
                            "description": "When detecting regions, recognize music staves as non-text, suppressing it in the binary image (Tesseract's ``pageseg_apply_music_mask``). Note that this might wrongly detect tables as staves.",
                            "type": "boolean"
                        },
                        "find_tables": {
                            "default": true,
                            "description": "recognise tables as table regions (textord_tabfind_find_tables)",
                            "type": "boolean"
                        },
                        "overwrite_regions": {
                            "default": true,
                            "description": "Remove existing layout and text annotation below the Page level (otherwise skip page; no incremental annotation yet).",
                            "type": "boolean"
                        },
                        "padding": {
                            "default": 0,
                            "description": "extend detected region rectangles by this many (true) pixels",
                            "format": "integer",
                            "type": "number"
                        },
                        "shrink_polygons": {
                            "default": false,
                            "description": "annotate polygon coordinates instead of bounding box rectangles by projecting the convex hull of all symbols",
                            "type": "boolean"
                        },
                        "sparse_text": {
                            "default": false,
                            "description": "use 'sparse text' page segmentation mode (find as much text as possible in no particular order): only text regions, single lines without vertical or horizontal space",
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/segmentation/region"
                    ]
                },
                "ocrd-tesserocr-segment-table": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Segment table regions into cell text regions with Tesseract",
                    "executable": "ocrd-tesserocr-segment-table",
                    "input_file_grp": [
                        "OCR-D-SEG-BLOCK",
                        "OCR-D-GT-SEG-BLOCK"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-BLOCK"
                    ],
                    "parameters": {
                        "dpi": {
                            "default": 0,
                            "description": "pixel density in dots per inch (overrides any meta-data in the images); disabled when negative",
                            "format": "float",
                            "type": "number"
                        },
                        "overwrite_cells": {
                            "default": true,
                            "description": "Remove existing layout and text annotation below the TableRegion level (otherwise skip table; no incremental annotation yet).",
                            "type": "boolean"
                        },
                        "padding": {
                            "default": 0,
                            "description": "extend detected cell rectangles by this many (true) pixels",
                            "format": "integer",
                            "type": "number"
                        },
                        "shrink_polygons": {
                            "default": false,
                            "description": "annotate polygon coordinates instead of bounding box rectangles by projecting the convex hull of all symbols",
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/segmentation/region"
                    ]
                },
                "ocrd-tesserocr-segment-word": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Segment lines into words with Tesseract",
                    "executable": "ocrd-tesserocr-segment-word",
                    "input_file_grp": [
                        "OCR-D-SEG-LINE",
                        "OCR-D-GT-SEG-LINE"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-WORD"
                    ],
                    "parameters": {
                        "dpi": {
                            "default": 0,
                            "description": "pixel density in dots per inch (overrides any meta-data in the images); disabled when negative",
                            "format": "float",
                            "type": "number"
                        },
                        "overwrite_words": {
                            "default": true,
                            "description": "Remove existing layout and text annotation below the TextLine level (otherwise skip line; no incremental annotation yet).",
                            "type": "boolean"
                        },
                        "padding": {
                            "default": 0,
                            "description": "extend detected cell rectangles by this many (true) pixels",
                            "format": "integer",
                            "type": "number"
                        },
                        "shrink_polygons": {
                            "default": false,
                            "description": "annotate polygon coordinates instead of bounding box rectangles by projecting the convex hull of all symbols",
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/segmentation/word"
                    ]
                }
            },
            "version": "0.13.6"
        },
        "ocrd_tool_validate": "<report valid=\"true\">\n</report>",
        "official": true,
        "org_plus_name": "OCR-D/ocrd_tesserocr",
        "python": {
            "author": "Konstantin Baierer, Kay-Michael W\u00fcrzner, Robert Sachunsky",
            "author-email": "unixprog@gmail.com, wuerzner@gmail.com, sachunsky@informatik.uni-leipzig.de",
            "name": "ocrd_tesserocr",
            "pypi": {
                "info": {
                    "author": "Konstantin Baierer, Kay-Michael W\u00fcrzner, Robert Sachunsky",
                    "author_email": "unixprog@gmail.com, wuerzner@gmail.com, sachunsky@informatik.uni-leipzig.de",
                    "bugtrack_url": null,
                    "classifiers": [],
                    "description": "# ocrd_tesserocr\n\n> Crop, deskew, segment into regions / tables / lines / words, or recognize with tesserocr\n\n[![image](https://circleci.com/gh/OCR-D/ocrd_tesserocr.svg?style=svg)](https://circleci.com/gh/OCR-D/ocrd_tesserocr)\n[![image](https://img.shields.io/pypi/v/ocrd_tesserocr.svg)](https://pypi.org/project/ocrd_tesserocr/)\n[![image](https://codecov.io/gh/OCR-D/ocrd_tesserocr/branch/master/graph/badge.svg)](https://codecov.io/gh/OCR-D/ocrd_tesserocr)\n[![Docker Automated build](https://img.shields.io/docker/automated/ocrd/tesserocr.svg)](https://hub.docker.com/r/ocrd/tesserocr/tags/)\n\n## Introduction\n\nThis package offers [OCR-D](https://ocr-d.de/en/spec) compliant [workspace processors](https://ocr-d.de/en/spec/cli) for (much of) the functionality of [Tesseract](https://github.com/tesseract-ocr) via its Python API wrapper [tesserocr](https://github.com/sirfz/tesserocr). (Each processor is a parameterizable step in a configurable [workflow](https://ocr-d.de/en/workflows) of the [OCR-D functional model](https://ocr-d.de/en/about). There are usually various alternative processor implementations for each step. Data is represented with [METS](https://ocr-d.de/en/spec/mets) and [PAGE](https://ocr-d.de/en/spec/page).)\n\nIt includes image preprocessing (cropping, binarization, deskewing), layout analysis (region, table, line, word segmentation), script identification, font style recognition and text recognition. \n\nMost processors can operate on different levels of the PAGE hierarchy, depending on the workflow configuration. In PAGE, image results are referenced (read and written) via `AlternativeImage`, text results via `TextEquiv`, font attributes via `TextStyle`, script via `@primaryScript`, deskewing via `@orientation`, cropping via `Border` and segmentation via `Region` / `TextLine` / `Word` elements with `Coords/@points`.\n\n## Installation\n\n### With docker\n\nThis is the best option if you want to run the software in a container.\n\nYou need to have [Docker](https://docs.docker.com/install/linux/docker-ce/ubuntu/)\n\n\n    docker pull ocrd/tesserocr\n\n\nTo run with docker:\n\n\n    docker run -v path/to/workspaces:/data ocrd/tesserocr ocrd-tesserocrd-crop ...\n\n\n### From PyPI and PPA\n\nThis is the best option if you want to use the stable, released version.\n\n---\n\n**NOTE**\n\nocrd_tesserocr requires **Tesseract >= 4.1.0**. The Tesseract packages\nbundled with **Ubuntu < 19.10** are too old. If you are on Ubuntu 18.04 LTS,\nplease use [Alexander Pozdnyakov's PPA](https://launchpad.net/~alex-p/+archive/ubuntu/tesseract-ocr) repository,\nwhich has up-to-date builds of Tesseract and its dependencies:\n\n```sh\nsudo add-apt-repository ppa:alex-p/tesseract-ocr\nsudo apt-get update\n```\n\n---\n\n```sh\nsudo apt-get install python3 python3-pip libtesseract-dev libleptonica-dev tesseract-ocr wget\npip install ocrd_tesserocr\n```\n\n### From git\n\nUse this option if you want to change the source code or install the latest, unpublished changes.\n\nWe strongly recommend to use [venv](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/).\n\n```sh\ngit clone https://github.com/OCR-D/ocrd_tesserocr\ncd ocrd_tesserocr\n# install Tesseract:\nsudo make deps-ubuntu # or manually from git or via ocrd_all\n# install tesserocr and ocrd_tesserocr:\nmake deps        # or pip install -r requirements\nmake install     # or pip install .\n```\n\n## Models\n\nTesseract comes with synthetically trained models for languages (`tesseract-ocr-{eng,deu,frk,...}` or scripts (`tesseract-ocr-script-{latn,frak,...}`). In addition, various models [trained](https://github.com/tesseract-ocr/tesstrain) on scan data are available from the community.\n\nNote that since all OCR-D processors must resolve file/data resources in a [standardized way](https://ocr-d.de/en/spec/cli#processor-resources), `ocrd-tesserocr-recognize` expects the recognition models to be installed in `$XDG_DATA_HOME/ocrd-resources/ocrd-tesserocr-recognize` (where, usually, `$XDG_DATA_HOME=$HOME/.local/share`). This is the default **resource location** used by `ocrd resmgr`, which you can use to download and list models:\n\n    ocrd resmgr --help\n\n(However, for backwards compatibility, this can be overriden by defining `$TESSDATA_PREFIX` in the environment. In this case users must install models manually \u2013 by linking/copying or downloading them into that directory. The same is true for the non-default location used by the system packages `tesseract-ocr-*`, which is usually `/usr/share/tesseract-ocr/4.00/tessdata`.)\n\nCf. [OCR-D model guide](https://ocr-d.de/en/models).\n\nModels always use the filename suffix `.traineddata`, but are just loaded by their basename. You will need **at least** `eng` and `osd` (even for segmentation and deskewing), probably also `Latin` and `Fraktur` etc.\n\nAs of v0.13.1, you can configure `ocrd-tesserocr-recognize` to select models **dynamically** segment by segment, either via custom conditions on the PAGE-XML annotation (presented as XPath rules), or by automatically choosing the model with highest confidence.\n\n## Usage\n\nFor details, see docstrings in the individual processors and [ocrd-tool.json](ocrd_tesserocr/ocrd-tool.json) descriptions,\nor simply `--help`.\n\nAvailable [OCR-D processors](https://ocr-d.de/en/spec/cli) are:\n\n- [ocrd-tesserocr-crop](ocrd_tesserocr/crop.py) (simplistic)\n  - sets `Border` of pages and adds `AlternativeImage` files to the output fileGrp\n- [ocrd-tesserocr-deskew](ocrd_tesserocr/deskew.py) (for skew and orientation; mind `operation_level`)\n  - sets `@orientation` of regions or pages and adds `AlternativeImage` files to the output fileGrp\n- [ocrd-tesserocr-binarize](ocrd_tesserocr/binarize.py) (Otsu \u2013 not recommended)  \n  - adds `AlternativeImage` files to the output fileGrp\n- [ocrd-tesserocr-recognize](ocrd_tesserocr/recognize.py) (optionally including segmentation; mind `segmentation_level` and `textequiv_level`)\n  - adds `TextRegion`s, `TableRegion`s, `ImageRegion`s, `MathsRegion`s, `SeparatorRegion`s, `NoiseRegion`s, `ReadingOrder` and `AlternativeImage` to `Page` and sets their `@orientation` (optionally)\n  - adds `TextRegion`s to `TableRegion`s and sets their `@orientation` (optionally)\n  - adds `TextLine`s to `TextRegion`s (optionally)\n  - adds `Word`s to `TextLine`s (optionally)\n  - adds `Glyph`s to `Word`s (optionally)\n  - adds `TextEquiv`\n- [ocrd-tesserocr-segment](ocrd_tesserocr/segment.py) (all-in-one segmentation \u2013 recommended; delegates to `recognize`)  \n  - adds `TextRegion`s, `TableRegion`s, `ImageRegion`s, `MathsRegion`s, `SeparatorRegion`s, `NoiseRegion`s, `ReadingOrder` and `AlternativeImage` to `Page` and sets their `@orientation`\n  - adds `TextRegion`s to `TableRegion`s and sets their `@orientation`\n  - adds `TextLine`s to `TextRegion`s\n  - adds `Word`s to `TextLine`s\n  - adds `Glyph`s to `Word`s\n- [ocrd-tesserocr-segment-region](ocrd_tesserocr/segment_region.py) (only regions \u2013 with overlapping bboxes; delegates to `recognize`)\n  - adds `TextRegion`s, `TableRegion`s, `ImageRegion`s, `MathsRegion`s, `SeparatorRegion`s, `NoiseRegion`s and `ReadingOrder` to `Page` and sets their `@orientation`\n- [ocrd-tesserocr-segment-table](ocrd_tesserocr/segment_table.py) (only table cells; delegates to `recognize`)\n  - adds `TextRegion`s to `TableRegion`s\n- [ocrd-tesserocr-segment-line](ocrd_tesserocr/segment_line.py) (only lines \u2013 from overlapping regions; delegates to `recognize`)\n  - adds `TextLine`s to `TextRegion`s\n- [ocrd-tesserocr-segment-word](ocrd_tesserocr/segment_word.py) (only words; delegates to `recognize`)\n  - adds `Word`s to `TextLine`s\n- [ocrd-tesserocr-fontshape](ocrd_tesserocr/fontshape.py) (only text style \u2013 via Tesseract 3 models)\n  - adds `TextStyle` to `Word`s\n\nThe text region `@type`s detected are (from Tesseract's [PolyBlockType](https://github.com/tesseract-ocr/tesseract/blob/11297c983ec7f5c9765d7fa4faa48f5150cf2d38/include/tesseract/publictypes.h#L52-L69)):\n- `paragraph`: normal block (aligned with others in the column)\n- `floating`: unaligned block (`is in a cross-column pull-out region`)\n- `heading`: block that `spans more than one column`\n- `caption`: block for `text that belongs to an image`\n\nIf you are unhappy with these choices, consider post-processing with a dedicated custom processor in Python, or by modifying the PAGE files directly (e.g. `xmlstarlet ed --inplace -u '//pc:TextRegion/@type[.=\"floating\"]' -v paragraph filegrp/*.xml`).\n\nAll segmentation is currently done as **bounding boxes** only by default, i.e. without precise polygonal outlines. For dense page layouts this means that neighbouring regions and neighbouring text lines may overlap a lot. If this is a problem for your workflow, try post-processing like so:\n- after line segmentation: use `ocrd-cis-ocropy-resegment` for polygonalization, or `ocrd-cis-ocropy-clip` on the line level\n- after region segmentation: use `ocrd-segment-repair` with `plausibilize` (and `sanitize` after line segmentation)\n\nIt also means that Tesseract should be allowed to segment across multiple hierarchy levels at once, to avoid introducing inconsistent/duplicate text line assignments in text regions, or word assignments in text lines. Hence,\n- prefer `ocrd-tesserocr-recognize` with `segmentation_level=region` over `ocrd-tesserocr-segment` followed by `ocrd-tesserocr-recognize`, if you want to do all in one with Tesseract,\n- prefer `ocrd-tesserocr-recognize` with `segmentation_level=line` over `ocrd-tesserocr-segment-line` followed by `ocrd-tesserocr-recognize`, if you want to do everything but region segmentation with Tesseract,\n- prefer `ocrd-tesserocr-segment` over `ocrd-tesserocr-segment-region` followed by (`ocrd-tesserocr-segment-table` and) `ocrd-tesserocr-segment-line`, if you want to do everything but recognition with Tesseract.\n\nHowever, you can also run `ocrd-tesserocr-segment*` and `ocrd-tesserocr-recognize` with `shrink_polygons=True` to get **polygons** by post-processing each segment, shrinking to the convex hull of all its symbol outlines.\n\n## Testing\n\n```sh\nmake test\n```\n\nThis downloads some test data from https://github.com/OCR-D/assets under `repo/assets`, and runs some basic test of the Python API as well as the CLIs.\n\nSet `PYTEST_ARGS=\"-s --verbose\"` to see log output (`-s`) and individual test results (`--verbose`).\n\n\n",
                    "description_content_type": "text/markdown",
                    "docs_url": null,
                    "download_url": "",
                    "downloads": {
                        "last_day": -1,
                        "last_month": -1,
                        "last_week": -1
                    },
                    "home_page": "https://github.com/OCR-D/ocrd_tesserocr",
                    "keywords": "",
                    "license": "Apache License 2.0",
                    "maintainer": "",
                    "maintainer_email": "",
                    "name": "ocrd-tesserocr",
                    "package_url": "https://pypi.org/project/ocrd-tesserocr/",
                    "platform": "",
                    "project_url": "https://pypi.org/project/ocrd-tesserocr/",
                    "project_urls": {
                        "Homepage": "https://github.com/OCR-D/ocrd_tesserocr"
                    },
                    "release_url": "https://pypi.org/project/ocrd-tesserocr/0.13.6/",
                    "requires_dist": [
                        "ocrd (>=2.25)",
                        "click",
                        "tesserocr (>=2.5.1)",
                        "shapely (>=1.7.1)"
                    ],
                    "requires_python": "",
                    "summary": "wrap Tesseract preprocessing, segmentation and recognition",
                    "version": "0.13.6",
                    "yanked": false,
                    "yanked_reason": null
                },
                "last_serial": 11570358,
                "releases": {
                    "0.1.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "e12ea0e2f580c6e152d334c470029dc2",
                                "sha256": "64ec4e7a43ddaf199af7da8966996e260454dae4d30f79cb112149cddf5b8fd2"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.1.0-py2-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "e12ea0e2f580c6e152d334c470029dc2",
                            "packagetype": "bdist_wheel",
                            "python_version": "py2",
                            "requires_python": null,
                            "size": 17089,
                            "upload_time": "2018-08-31T14:13:24",
                            "upload_time_iso_8601": "2018-08-31T14:13:24.592860Z",
                            "url": "https://files.pythonhosted.org/packages/07/63/e617002f9c2013f8a9ce10baeab48acffc0dff3d21ab160ee67428e08ebd/ocrd_tesserocr-0.1.0-py2-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "ad528712e13eecf578b236a7ab8457cd",
                                "sha256": "b2a7fd61a97bb222f2ac5a6f85b3d2ce43da843509993eef189f09b48f44027f"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.1.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "ad528712e13eecf578b236a7ab8457cd",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 15424,
                            "upload_time": "2018-08-31T14:13:25",
                            "upload_time_iso_8601": "2018-08-31T14:13:25.913866Z",
                            "url": "https://files.pythonhosted.org/packages/4d/48/282d1d793137f1ec30118a9a0bd48534a6a8053bc74a830b6c4eb389653f/ocrd_tesserocr-0.1.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "d45fa7a24f23d22313e4314df42cf984",
                                "sha256": "3fecd0a93d9a711552fbd2cf15af1f150f04f503f7b3f09d9c025267601bb42d"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.1.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "d45fa7a24f23d22313e4314df42cf984",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 9234,
                            "upload_time": "2018-08-31T14:13:27",
                            "upload_time_iso_8601": "2018-08-31T14:13:27.040863Z",
                            "url": "https://files.pythonhosted.org/packages/eb/a7/66775daafba5937821fd643b6d1069570b262af3a48d701712d2a94350a2/ocrd_tesserocr-0.1.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.1": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "fab719d99117d974ca24e63cdf6af83e",
                                "sha256": "d474e372af4266ab4343570c47a448f9f68b3c002f970717663b64acabe1dbe4"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.1.1-py2-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "fab719d99117d974ca24e63cdf6af83e",
                            "packagetype": "bdist_wheel",
                            "python_version": "py2",
                            "requires_python": null,
                            "size": 15461,
                            "upload_time": "2018-08-31T14:18:51",
                            "upload_time_iso_8601": "2018-08-31T14:18:51.905308Z",
                            "url": "https://files.pythonhosted.org/packages/5c/95/7f29b87ff5be4fdd149400855862840de4681b669d3fda60a2ce8bf24127/ocrd_tesserocr-0.1.1-py2-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "cfef79e48dc96f865deff1b89fa28aa6",
                                "sha256": "3c0f56fc2c88ec1ea2461eb0610763443b9af279c5260b08a1be079c92bed5c6"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.1.1-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "cfef79e48dc96f865deff1b89fa28aa6",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 15461,
                            "upload_time": "2018-08-31T14:18:53",
                            "upload_time_iso_8601": "2018-08-31T14:18:53.535866Z",
                            "url": "https://files.pythonhosted.org/packages/da/23/fb5e1e125f1fda3b1069960426c5b40a9c5e12fe8f73ac29244888cf110b/ocrd_tesserocr-0.1.1-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "0dbecd3bc62199f7294a039c4c8557c3",
                                "sha256": "2de460c4d3218ac6e3133b498c01ee7428770edcd60a02f65793ae4006f3db82"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.1.1.tar.gz",
                            "has_sig": false,
                            "md5_digest": "0dbecd3bc62199f7294a039c4c8557c3",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 9251,
                            "upload_time": "2018-08-31T14:18:54",
                            "upload_time_iso_8601": "2018-08-31T14:18:54.917641Z",
                            "url": "https://files.pythonhosted.org/packages/31/73/c2044ae57f402e21947ceb97f574625cf534eccbf432f6916c419cf3d7e7/ocrd_tesserocr-0.1.1.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.2": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "215dd5bba309954a15fc1be4919cd018",
                                "sha256": "b2409adbb5c529b05eba8be5a9d1c7e11660dc2626bcaf61b407b617d5c7c99e"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.1.2-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "215dd5bba309954a15fc1be4919cd018",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 15453,
                            "upload_time": "2018-09-03T13:14:20",
                            "upload_time_iso_8601": "2018-09-03T13:14:20.618650Z",
                            "url": "https://files.pythonhosted.org/packages/c1/ca/38355a461d8e29d7039391f5051be291d6a425b078783adb1ebb6ba10e55/ocrd_tesserocr-0.1.2-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "b59d049bbfc890edd7a17f3bd596b42a",
                                "sha256": "fbde4fc1a5a0340507b6d96bd529a42162e732b7cca31e968b28f6a4fcdccd12"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.1.2.tar.gz",
                            "has_sig": false,
                            "md5_digest": "b59d049bbfc890edd7a17f3bd596b42a",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 9242,
                            "upload_time": "2018-09-03T13:14:21",
                            "upload_time_iso_8601": "2018-09-03T13:14:21.805810Z",
                            "url": "https://files.pythonhosted.org/packages/1b/fe/b365c2ffddea53e616408f0213e45614ce3791ead2058df33a795ddc3d21/ocrd_tesserocr-0.1.2.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.3": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "0f69aed68ca01cf1018b35d91227d74a",
                                "sha256": "1549fbf8d314dc1f5ea20b45842e971a97b3c276f78d4d167a463432d5b77b18"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.1.3-py2-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "0f69aed68ca01cf1018b35d91227d74a",
                            "packagetype": "bdist_wheel",
                            "python_version": "py2",
                            "requires_python": null,
                            "size": 17420,
                            "upload_time": "2019-01-04T13:36:12",
                            "upload_time_iso_8601": "2019-01-04T13:36:12.698851Z",
                            "url": "https://files.pythonhosted.org/packages/18/7f/fd08ca819e6f3980220ac680b5c931080247544c2704963e518db6f7a3d0/ocrd_tesserocr-0.1.3-py2-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "bbc586d5a04c44b640d7782a84e2de83",
                                "sha256": "1648df71d28a9b3388f1e701256037eb9023f149a17a22d0a9c2dec4a0510002"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.1.3-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "bbc586d5a04c44b640d7782a84e2de83",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 15729,
                            "upload_time": "2019-01-04T13:36:14",
                            "upload_time_iso_8601": "2019-01-04T13:36:14.276437Z",
                            "url": "https://files.pythonhosted.org/packages/34/08/ea3ebc9476e1d28672e23b8d1332dbbc95ac9a3246cd7d02be2375995da6/ocrd_tesserocr-0.1.3-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "3f7f434d236449d567213324856c521a",
                                "sha256": "6ec1b6c5cb4395f6f4e7356219e7019612fdcda685b511de7171dcaf4f39a439"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.1.3.tar.gz",
                            "has_sig": false,
                            "md5_digest": "3f7f434d236449d567213324856c521a",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 9442,
                            "upload_time": "2019-01-04T13:36:15",
                            "upload_time_iso_8601": "2019-01-04T13:36:15.802793Z",
                            "url": "https://files.pythonhosted.org/packages/f3/10/d1b3c66b891193ccc07200d93391cbcfe9c4c5ea2bb1cac045e7d1cf1fa6/ocrd_tesserocr-0.1.3.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.10.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "063aafbd56375529a7ef3bd440bb093a",
                                "sha256": "bb7f193e62a582a7ac4c678c477bc40d5c8564cae8fbb6951e125f4d577c5b28"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.10.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "063aafbd56375529a7ef3bd440bb093a",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 47434,
                            "upload_time": "2020-12-01T22:29:11",
                            "upload_time_iso_8601": "2020-12-01T22:29:11.357185Z",
                            "url": "https://files.pythonhosted.org/packages/74/1c/7a6c7bc70de111985e1d67ba6c27a0c035182e3f31abd9560693f97f5713/ocrd_tesserocr-0.10.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "aed04c220a62caed97b1b9b6d95c7053",
                                "sha256": "4cc04565c9f557a4494b89030e25cb254572b7457f076b5708941a5a31082e73"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.10.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "aed04c220a62caed97b1b9b6d95c7053",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 38027,
                            "upload_time": "2020-12-01T22:29:13",
                            "upload_time_iso_8601": "2020-12-01T22:29:13.008550Z",
                            "url": "https://files.pythonhosted.org/packages/69/26/d9b3ba71f342c5f013fd7cbe91c005807853ceb06383cd3be718126e00ac/ocrd_tesserocr-0.10.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.10.1": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "35531915f74ee67d2202913127417a3e",
                                "sha256": "0cc38db802b18bafb445c25879b8e8b8b49b3cc63478958bcdbddd8b8c61c623"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.10.1-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "35531915f74ee67d2202913127417a3e",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 49940,
                            "upload_time": "2020-12-10T14:30:43",
                            "upload_time_iso_8601": "2020-12-10T14:30:43.385062Z",
                            "url": "https://files.pythonhosted.org/packages/2b/5b/fa91f5fcc8454e683eb4aaad02bd6c433bf7c87972ed043ba2c47cddc027/ocrd_tesserocr-0.10.1-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "13f0ec603b2455044719632f49549d51",
                                "sha256": "b71ee7ba53086e52e7c1dec58e4179a592d076173cd0293ee0aec1ba0dc7fe48"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.10.1.tar.gz",
                            "has_sig": false,
                            "md5_digest": "13f0ec603b2455044719632f49549d51",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 40417,
                            "upload_time": "2020-12-10T14:30:45",
                            "upload_time_iso_8601": "2020-12-10T14:30:45.167454Z",
                            "url": "https://files.pythonhosted.org/packages/bf/15/04e87d71cb9ca49e54ae82767d34a0669180ba2ba7050285fa7070e03158/ocrd_tesserocr-0.10.1.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.11.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "8c3f532ee1faf78deb33d7def6e485b4",
                                "sha256": "d133b7209da6d5da3e43dda1d557921ffee57ee7c3971bbad79a7bd4afe7a3eb"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.11.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "8c3f532ee1faf78deb33d7def6e485b4",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 47531,
                            "upload_time": "2021-01-29T09:52:09",
                            "upload_time_iso_8601": "2021-01-29T09:52:09.387683Z",
                            "url": "https://files.pythonhosted.org/packages/f3/8d/c9ab0636e469abb60731584f86b6a717069533c899e9619633b0782f1dc8/ocrd_tesserocr-0.11.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "71dc351c84243a6f8604e30d6b802e26",
                                "sha256": "9c182edff69437581a9b4161258b8bc964d9b8f5cee1dd7090d864456ed6b26c"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.11.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "71dc351c84243a6f8604e30d6b802e26",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 37592,
                            "upload_time": "2021-01-29T09:52:11",
                            "upload_time_iso_8601": "2021-01-29T09:52:11.319012Z",
                            "url": "https://files.pythonhosted.org/packages/af/18/2d52f0f11d1294fd2d027153bd83d1743cfe7565d39ec6c946a886295587/ocrd_tesserocr-0.11.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.12.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "4b7417a82de67d8774809171cf3a3e94",
                                "sha256": "a1e8a83587b572b2ed6ffd9cea8dfba545db5b6a2b5d1285b079141c2992f534"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.12.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "4b7417a82de67d8774809171cf3a3e94",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 47839,
                            "upload_time": "2021-03-05T10:05:40",
                            "upload_time_iso_8601": "2021-03-05T10:05:40.690283Z",
                            "url": "https://files.pythonhosted.org/packages/31/15/b099ee614871b292d035fd9e2b315eee1ee76c6706fb79a0d8049c326cdc/ocrd_tesserocr-0.12.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "03834b3482c98a8c8cdfcb46044ab9f4",
                                "sha256": "102c75d07c8345c329eec3179ee7bc156fb3bd99cf04635bc1dd7bc81f1aff8f"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.12.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "03834b3482c98a8c8cdfcb46044ab9f4",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 37943,
                            "upload_time": "2021-03-05T10:05:42",
                            "upload_time_iso_8601": "2021-03-05T10:05:42.799483Z",
                            "url": "https://files.pythonhosted.org/packages/00/75/a881607929bfd1b43f692c60dabc4da3966d4881f42d5cc8ac8ea5687c51/ocrd_tesserocr-0.12.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.13.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "8ed31df884e3a6b982088e277cc845d4",
                                "sha256": "5d65d07b6dcdd1992fc50e276af38cecf199cbefb0f48cc0a85c55d0c5be3455"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.13.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "8ed31df884e3a6b982088e277cc845d4",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 50673,
                            "upload_time": "2021-06-30T13:43:38",
                            "upload_time_iso_8601": "2021-06-30T13:43:38.228417Z",
                            "url": "https://files.pythonhosted.org/packages/e5/f4/9cdf956807775610b2419dc89b94d349a56df4551184711cde412d903adc/ocrd_tesserocr-0.13.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "e0001b05d5baee22ece452d776c2c44e",
                                "sha256": "2af6bac40d060e5c276ebfcaaee80e459bd9ea0996135bbee2d1143ee9b86663"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.13.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "e0001b05d5baee22ece452d776c2c44e",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 41749,
                            "upload_time": "2021-06-30T13:43:40",
                            "upload_time_iso_8601": "2021-06-30T13:43:40.018812Z",
                            "url": "https://files.pythonhosted.org/packages/3f/39/95479897707c790ed0d1c220b913d88122fa9f0e7ac55c69433f96311997/ocrd_tesserocr-0.13.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.13.1": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "570cf106503f16576a5ffdc5e7a8e67c",
                                "sha256": "afacefc400d5d8e91eb22d64bfc2812a15757e65118708905344783590a544fd"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.13.1-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "570cf106503f16576a5ffdc5e7a8e67c",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 53634,
                            "upload_time": "2021-06-30T19:14:07",
                            "upload_time_iso_8601": "2021-06-30T19:14:07.570160Z",
                            "url": "https://files.pythonhosted.org/packages/95/5a/8308d500b11c68fcac8076bbbadde9d96d2fd7fb2cc28b0955971e37a58c/ocrd_tesserocr-0.13.1-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "fe2e03c28a181fe8c8df2d0b38f84b99",
                                "sha256": "a5e60a523cc9e1acf74ede0340b5975b3976a1bd4895e59deb109b911c0f7bdd"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.13.1.tar.gz",
                            "has_sig": false,
                            "md5_digest": "fe2e03c28a181fe8c8df2d0b38f84b99",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 45929,
                            "upload_time": "2021-06-30T19:14:09",
                            "upload_time_iso_8601": "2021-06-30T19:14:09.669526Z",
                            "url": "https://files.pythonhosted.org/packages/fa/f1/de198ef591c9c42ef554cd1e0f84fdd1eebc16ac04211a39a5cd1717db8d/ocrd_tesserocr-0.13.1.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.13.2": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "0c1832d738db27f7e281ee0d1dfcfae0",
                                "sha256": "982210426a9cb1743dd0f189874e6b37825bfb152ac264322401acc062079970"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.13.2-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "0c1832d738db27f7e281ee0d1dfcfae0",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 53637,
                            "upload_time": "2021-06-30T19:20:48",
                            "upload_time_iso_8601": "2021-06-30T19:20:48.707749Z",
                            "url": "https://files.pythonhosted.org/packages/15/92/7b8485915c963f7069b98dfcec1533a0dcbea814d397f92b7c8020708dbf/ocrd_tesserocr-0.13.2-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "a4efdce153ea6688c3408973e7f8e402",
                                "sha256": "a5dec372704cc40f350e09bbaecf4866c23b144d64c666f4599e9533f93883d2"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.13.2.tar.gz",
                            "has_sig": false,
                            "md5_digest": "a4efdce153ea6688c3408973e7f8e402",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 45925,
                            "upload_time": "2021-06-30T19:20:50",
                            "upload_time_iso_8601": "2021-06-30T19:20:50.286207Z",
                            "url": "https://files.pythonhosted.org/packages/71/8f/3542429cd834907d83a42955bd901b34d2a00e2d5286a4255947edb27130/ocrd_tesserocr-0.13.2.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.13.3": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "d0604f43d7a486d56548e4ac2a176aa1",
                                "sha256": "ee078bec7198c749fb06ce029efd2e71c8ee0f0863c80bd63afc12d85426d7e9"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.13.3-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "d0604f43d7a486d56548e4ac2a176aa1",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 53677,
                            "upload_time": "2021-07-01T07:57:01",
                            "upload_time_iso_8601": "2021-07-01T07:57:01.532523Z",
                            "url": "https://files.pythonhosted.org/packages/cd/d3/1875c2bfa240f5c166d0be3f0047ab628b700ccfde8d2fc1b56cabe9958d/ocrd_tesserocr-0.13.3-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "83663a862d7bdd706099c6da3fc561b4",
                                "sha256": "b23c73992b0dede8a4c2f202291001d9f85c3755df176d81ae459b09240628da"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.13.3.tar.gz",
                            "has_sig": false,
                            "md5_digest": "83663a862d7bdd706099c6da3fc561b4",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 45969,
                            "upload_time": "2021-07-01T07:57:03",
                            "upload_time_iso_8601": "2021-07-01T07:57:03.332544Z",
                            "url": "https://files.pythonhosted.org/packages/e3/b9/762743cf4c051c6d450f796151137c99029a9299018b334d8df36d8b5410/ocrd_tesserocr-0.13.3.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.13.4": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "5392470454f564b27d84d7e0e92d57fd",
                                "sha256": "26c08d549c13b84e0f13c2b97f4c712d1f6d29714ab8f82b276db25ef9844256"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.13.4-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "5392470454f564b27d84d7e0e92d57fd",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 53727,
                            "upload_time": "2021-07-20T06:39:30",
                            "upload_time_iso_8601": "2021-07-20T06:39:30.455654Z",
                            "url": "https://files.pythonhosted.org/packages/85/0f/7cf03a887f1a52114554e25240423d7d884baaf0bdca6596e928537f2df8/ocrd_tesserocr-0.13.4-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "4651a62dabc28257698b72617d395cb5",
                                "sha256": "c013555e0d93c9f832cc56858f289a538ead8bdb3677713b81a2fdab3780583c"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.13.4.tar.gz",
                            "has_sig": false,
                            "md5_digest": "4651a62dabc28257698b72617d395cb5",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 46031,
                            "upload_time": "2021-07-20T06:39:32",
                            "upload_time_iso_8601": "2021-07-20T06:39:32.198466Z",
                            "url": "https://files.pythonhosted.org/packages/a4/e3/818cbf9fe07c630a778f20b0fefe08565cc1aca994982c7867c312933a72/ocrd_tesserocr-0.13.4.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.13.5": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "86a92dfc07ecec4a258ff8b822578845",
                                "sha256": "7d0fc34d701db9322639838b65871714743727fc38b064afff702c5f16768db9"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.13.5-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "86a92dfc07ecec4a258ff8b822578845",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 53729,
                            "upload_time": "2021-07-26T16:30:20",
                            "upload_time_iso_8601": "2021-07-26T16:30:20.643870Z",
                            "url": "https://files.pythonhosted.org/packages/83/f9/2ae4a7129d493e7923e42e85bc69ad130e4e1ed34c9006eb1c5e2109d220/ocrd_tesserocr-0.13.5-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "710d098f40ba3278929bb794f9ea350b",
                                "sha256": "04ddce487474238d073e1b94b569db0910962839f9c4198334e8967dd84ad22d"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.13.5.tar.gz",
                            "has_sig": false,
                            "md5_digest": "710d098f40ba3278929bb794f9ea350b",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 46037,
                            "upload_time": "2021-07-26T16:30:22",
                            "upload_time_iso_8601": "2021-07-26T16:30:22.912346Z",
                            "url": "https://files.pythonhosted.org/packages/a5/31/e7516440c88cb98ac9778359fcd65e04ac7ca13cf64f4f881773d774b5b6/ocrd_tesserocr-0.13.5.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.13.6": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "8ce0273d28bdbe639376029940588e08",
                                "sha256": "f448519c01e7b231bb2dbcb04c5fb3add83352f73841b02c6782ce25a09d8a7c"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.13.6-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "8ce0273d28bdbe639376029940588e08",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 53872,
                            "upload_time": "2021-09-28T11:23:42",
                            "upload_time_iso_8601": "2021-09-28T11:23:42.329541Z",
                            "url": "https://files.pythonhosted.org/packages/5d/29/5a15a00f1642505a61748ebe52c81a6c45a5bac1f173481f873db0a3c40e/ocrd_tesserocr-0.13.6-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "0e66646e87c2696430d11e13531119ab",
                                "sha256": "31805389d0c8f147cbaf298d5c4db7f53b073567c554bb36d723a7ea15517a17"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.13.6.tar.gz",
                            "has_sig": false,
                            "md5_digest": "0e66646e87c2696430d11e13531119ab",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 46177,
                            "upload_time": "2021-09-28T11:23:44",
                            "upload_time_iso_8601": "2021-09-28T11:23:44.332290Z",
                            "url": "https://files.pythonhosted.org/packages/88/3a/b0ebeb80eb436559f314edb8e2ef7ab5e0846dcf3f8b38ca0f26c565fb7e/ocrd_tesserocr-0.13.6.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.2.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "e5e19ec5b8786ef3ae8b456e8180b3da",
                                "sha256": "f61661e4cba7b77336dcabc6117d1e4fa90357ec98f263eacfc2c836e3a477f4"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.2.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "e5e19ec5b8786ef3ae8b456e8180b3da",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 16547,
                            "upload_time": "2019-02-28T10:12:21",
                            "upload_time_iso_8601": "2019-02-28T10:12:21.318896Z",
                            "url": "https://files.pythonhosted.org/packages/d1/94/606de830cdba1f81928dc42a71f7e58cc6510d6a8b0f9e945c01f56ee3e7/ocrd_tesserocr-0.2.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "9a06170c3773b520b13c9516b0497a33",
                                "sha256": "05cc4be3ae1404afd45d8b9278d19fcd6a1ea86d376f52f571fefc4af4d96b86"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.2.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "9a06170c3773b520b13c9516b0497a33",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 10356,
                            "upload_time": "2019-02-28T10:12:22",
                            "upload_time_iso_8601": "2019-02-28T10:12:22.854225Z",
                            "url": "https://files.pythonhosted.org/packages/50/1c/eda34c75846857877176db4f4f0564e8b7c979a872e4c2a521fa8c389fbb/ocrd_tesserocr-0.2.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.2.1": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "43d7c9b609a3d2e27bcb05bd409cebbc",
                                "sha256": "fd8c18ce5d170e766bccd34c2214e5de22ea13f795bc79642e8be2414c550f2a"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.2.1-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "43d7c9b609a3d2e27bcb05bd409cebbc",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 15963,
                            "upload_time": "2019-04-16T14:58:44",
                            "upload_time_iso_8601": "2019-04-16T14:58:44.123075Z",
                            "url": "https://files.pythonhosted.org/packages/39/af/10f4d710bde5515131fc16ea3408670af8e786998a1e0f6d127e800fbc17/ocrd_tesserocr-0.2.1-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "b9d79ed8396cc81728525c6e66bc2883",
                                "sha256": "40f4776bc548be14245de726e744f827742f02e568f6062cc465d6a585624cae"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.2.1.tar.gz",
                            "has_sig": false,
                            "md5_digest": "b9d79ed8396cc81728525c6e66bc2883",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 9534,
                            "upload_time": "2019-04-16T14:58:45",
                            "upload_time_iso_8601": "2019-04-16T14:58:45.820115Z",
                            "url": "https://files.pythonhosted.org/packages/df/cc/fd5b999abcae94ff2116a25e31f593b95f0dda4486d89bd4e83d6671b805/ocrd_tesserocr-0.2.1.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.2.2": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "df13430385faf1faeb9d8bca34e1ca08",
                                "sha256": "7ccdeb2a24f9d93ec6668d02807a4f5fa31d88789a3101ad1fd4ea003128ca65"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.2.2-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "df13430385faf1faeb9d8bca34e1ca08",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 18334,
                            "upload_time": "2019-05-20T10:24:06",
                            "upload_time_iso_8601": "2019-05-20T10:24:06.855632Z",
                            "url": "https://files.pythonhosted.org/packages/4e/5f/37ec32a07681542a1d34fa9764c76ef34d201a82489335d154d34e8b46b2/ocrd_tesserocr-0.2.2-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "d985dfeeedd9946a32e30ec079c3dac3",
                                "sha256": "ad96c009bcf39b8f9e99f3e58b736ab385e5683935b9146ed9e39e8e8883b4c2"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.2.2.tar.gz",
                            "has_sig": false,
                            "md5_digest": "d985dfeeedd9946a32e30ec079c3dac3",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 10990,
                            "upload_time": "2019-05-20T10:24:08",
                            "upload_time_iso_8601": "2019-05-20T10:24:08.563041Z",
                            "url": "https://files.pythonhosted.org/packages/38/53/c0186de6ad8429e6b8e0f5e5ac51a8a3d51a2c71bcb597a5879313bf2a2d/ocrd_tesserocr-0.2.2.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.3.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "06790327b49f97d4ed656fb842b36511",
                                "sha256": "09f23770905034ed00f7cb516a907288512a4d21305914b6e2dd7215b9138c6e"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.3.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "06790327b49f97d4ed656fb842b36511",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 34706,
                            "upload_time": "2019-08-21T14:42:39",
                            "upload_time_iso_8601": "2019-08-21T14:42:39.261053Z",
                            "url": "https://files.pythonhosted.org/packages/b2/b5/8a890997a3f874498a1f596f3ebdb765daa181858a46cc5a66949945adf8/ocrd_tesserocr-0.3.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "40be922772cb0f0ad188aa4345bbad9a",
                                "sha256": "11b6742c4c398ea800d0b17276f0efd8a91ccbd6f0c1df05d7046c3e401a33c8"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.3.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "40be922772cb0f0ad188aa4345bbad9a",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 22743,
                            "upload_time": "2019-08-21T14:42:40",
                            "upload_time_iso_8601": "2019-08-21T14:42:40.918776Z",
                            "url": "https://files.pythonhosted.org/packages/f3/fa/10af8e05b04c55680b20582c18bed55ffa846bfa65948c6b6138252a8434/ocrd_tesserocr-0.3.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.4.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "9d5ea4deb4c75bae31b7d44a4a8fdd0a",
                                "sha256": "4822713547e696dbb327a80f9dd5bad705be4b7dc1f44fdef1d44f9e03c21c1d"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.4.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "9d5ea4deb4c75bae31b7d44a4a8fdd0a",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 37231,
                            "upload_time": "2019-08-21T16:47:05",
                            "upload_time_iso_8601": "2019-08-21T16:47:05.083051Z",
                            "url": "https://files.pythonhosted.org/packages/ee/2b/483b44bf3180e81aa8a5bf7307ae47da4d1656e69dec1a704f9a8d558b88/ocrd_tesserocr-0.4.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "91e09cbc5208905353c22f07029db316",
                                "sha256": "616bf420794ef71bcc372fa4c29775c48d6909d01b6849e2d0be83766cd0ed90"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.4.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "91e09cbc5208905353c22f07029db316",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 19943,
                            "upload_time": "2019-08-21T16:47:06",
                            "upload_time_iso_8601": "2019-08-21T16:47:06.605798Z",
                            "url": "https://files.pythonhosted.org/packages/87/09/b994a5d7310f73b04b7dd840a5fbdd726da42b7980ac0a07595b6c56ef00/ocrd_tesserocr-0.4.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.4.1": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "e634e1792d14a33a6bdde296483f0817",
                                "sha256": "d21818eceac8bcdc1fdb38d4a58bfd1620cef8e7a5d0e6276afbd7695c2cac31"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.4.1-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "e634e1792d14a33a6bdde296483f0817",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 38864,
                            "upload_time": "2019-10-31T14:58:27",
                            "upload_time_iso_8601": "2019-10-31T14:58:27.102775Z",
                            "url": "https://files.pythonhosted.org/packages/1d/78/93c90d9593f62546fea5e2ef9b5edbb5a47121582db724ca41f93830ec87/ocrd_tesserocr-0.4.1-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "3de4e2c8fcb66eb6a3cb32a1a1cd361b",
                                "sha256": "bbf3843361c4807c5790790d8a8fc0a0325b2fb9817cd4fa70210659dde8c8cb"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.4.1.tar.gz",
                            "has_sig": false,
                            "md5_digest": "3de4e2c8fcb66eb6a3cb32a1a1cd361b",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 20535,
                            "upload_time": "2019-10-31T14:58:28",
                            "upload_time_iso_8601": "2019-10-31T14:58:28.641792Z",
                            "url": "https://files.pythonhosted.org/packages/a7/2e/de857738105ed9f1888d3f6724c0c314404b67582652a91b060d25cff808/ocrd_tesserocr-0.4.1.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.5.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "4a807653bdfacd7d22b6c303dc1ac04f",
                                "sha256": "f3bca0adcb9fce640a010d38d7e1d04b4fc423ec0cc958ff3980afbf74a5711f"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.5.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "4a807653bdfacd7d22b6c303dc1ac04f",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 33343,
                            "upload_time": "2019-10-26T18:40:17",
                            "upload_time_iso_8601": "2019-10-26T18:40:17.958444Z",
                            "url": "https://files.pythonhosted.org/packages/36/98/a6c6b46903a3b25b1740cde4aedaf62de6441ac887536e36ad24a3c3bf12/ocrd_tesserocr-0.5.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "b4885925db28012b94b5fa3c86d80e28",
                                "sha256": "aaf012b2c6adcd9a34b6fa9351dcd16fed3ab848d4d8a563b3825f9b7103be42"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.5.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "b4885925db28012b94b5fa3c86d80e28",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 21170,
                            "upload_time": "2019-10-26T18:40:19",
                            "upload_time_iso_8601": "2019-10-26T18:40:19.386827Z",
                            "url": "https://files.pythonhosted.org/packages/85/5b/7c5c21b78ccd00d49f7747ad5b2a381d9860aeed41fe545a24a361544837/ocrd_tesserocr-0.5.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.5.1": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "8835763816200fbfec9b58670bd69d8f",
                                "sha256": "18cef805014268db86fd6c32bca83069cdf536298fe8151f59f9197d255a9d14"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.5.1-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "8835763816200fbfec9b58670bd69d8f",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 38309,
                            "upload_time": "2019-10-31T16:43:42",
                            "upload_time_iso_8601": "2019-10-31T16:43:42.078476Z",
                            "url": "https://files.pythonhosted.org/packages/06/84/b5aca7d06e31dcb91683ab60e154b73a8d0e1cb4d5ae22debf55922573df/ocrd_tesserocr-0.5.1-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "1c203160eddb792cdbd706ccbb5e35bb",
                                "sha256": "7dd6a5fd556395deb58070d5f6196871a241d89434a26d0a0fc7e106404aa90a"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.5.1.tar.gz",
                            "has_sig": false,
                            "md5_digest": "1c203160eddb792cdbd706ccbb5e35bb",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 20350,
                            "upload_time": "2019-10-31T16:43:43",
                            "upload_time_iso_8601": "2019-10-31T16:43:43.864345Z",
                            "url": "https://files.pythonhosted.org/packages/15/1f/ed95415ee91659222301aa77e4f8c27be33df8e258972059bc031a2c0e3b/ocrd_tesserocr-0.5.1.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.6.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "0f1c539e4ffd53d67a3b891586c7be48",
                                "sha256": "41d5309efc4f886569d47dede504cea5e14ffd8e27a33acb69e15c775d34f754"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.6.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "0f1c539e4ffd53d67a3b891586c7be48",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 37693,
                            "upload_time": "2019-11-05T19:14:55",
                            "upload_time_iso_8601": "2019-11-05T19:14:55.328581Z",
                            "url": "https://files.pythonhosted.org/packages/89/a9/431c3ad62ac4612b6be3f5cad58b49910a9c00b5f28dd62f8d535ed0c0cf/ocrd_tesserocr-0.6.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "9c454a4d508b6d43a1551b517c125d5b",
                                "sha256": "3a1aeff23dbf42cc8c003039cc8695cd4e01807245f935c9323e6df2832855a7"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.6.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "9c454a4d508b6d43a1551b517c125d5b",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 20588,
                            "upload_time": "2019-11-05T19:14:57",
                            "upload_time_iso_8601": "2019-11-05T19:14:57.128983Z",
                            "url": "https://files.pythonhosted.org/packages/48/30/6c8253739ee61d4a42b6512be3fcfe0ce7190ff2835ee1210b1c483da025/ocrd_tesserocr-0.6.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.7.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "c70cf04587dbacd64f10e58706852630",
                                "sha256": "19e81e1ff8344c6766bf41e8968e14efceb2902c7bb4fd2b7c811b3697e0f589"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.7.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "c70cf04587dbacd64f10e58706852630",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 44435,
                            "upload_time": "2020-01-23T14:31:55",
                            "upload_time_iso_8601": "2020-01-23T14:31:55.259065Z",
                            "url": "https://files.pythonhosted.org/packages/0d/74/404359c05892e1123e1e6cbbd07d237e11bf42f3aa75cf41db87f4920a42/ocrd_tesserocr-0.7.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "0bc1167c26f1fad3e0a1dfc79ebca1e4",
                                "sha256": "640504e049c3ccfe046c912109ca0354fe414004c5afb1fc9e9bb6e0651509d6"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.7.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "0bc1167c26f1fad3e0a1dfc79ebca1e4",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 24991,
                            "upload_time": "2020-01-23T14:31:56",
                            "upload_time_iso_8601": "2020-01-23T14:31:56.649512Z",
                            "url": "https://files.pythonhosted.org/packages/16/e7/f6f57abfef6c662cd4cde8f02f2f49639e4075211776e069543c2ca3d484/ocrd_tesserocr-0.7.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.8.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "7364855e9c869bc9f4c28e9bc79e89ae",
                                "sha256": "09e17882c18a5ffb00e605786a4a3c6e3345929f4f0758cccb0b77207724b258"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.8.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "7364855e9c869bc9f4c28e9bc79e89ae",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 45383,
                            "upload_time": "2020-02-03T13:50:04",
                            "upload_time_iso_8601": "2020-02-03T13:50:04.358874Z",
                            "url": "https://files.pythonhosted.org/packages/30/d2/c51178560f30655205205dbfd5f28805a02849026228800118e565539326/ocrd_tesserocr-0.8.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "5056783a8779b248438fdb11de142aea",
                                "sha256": "bef895f493ed2d5ad246e5bcd6d10a31402cd538e02cbc6a486b889eb677a91c"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.8.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "5056783a8779b248438fdb11de142aea",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 25387,
                            "upload_time": "2020-02-03T13:50:06",
                            "upload_time_iso_8601": "2020-02-03T13:50:06.193155Z",
                            "url": "https://files.pythonhosted.org/packages/c1/04/915bcee52c54412568b20b74d51e9e215ec2b417597a3722166da6899b3d/ocrd_tesserocr-0.8.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.8.1": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "9e5f4d8bd3683a7a9b32a53ff907b738",
                                "sha256": "b63e51e4a2bb85737d2931fa2a1c2c2734763c40f0b61001f182491ddaa018ed"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.8.1-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "9e5f4d8bd3683a7a9b32a53ff907b738",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 45397,
                            "upload_time": "2020-02-17T16:50:36",
                            "upload_time_iso_8601": "2020-02-17T16:50:36.077066Z",
                            "url": "https://files.pythonhosted.org/packages/26/15/cf389add47026aae2247f0ab96ee8770d6bb40c038120b9428d9522e9ad9/ocrd_tesserocr-0.8.1-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "753bca3cefce5739a419f2132eb7bd1e",
                                "sha256": "6b33d31a28376aee8015b91e1383985656e2c3d4f263b3089582e1180dd70f55"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.8.1.tar.gz",
                            "has_sig": false,
                            "md5_digest": "753bca3cefce5739a419f2132eb7bd1e",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 25427,
                            "upload_time": "2020-02-17T16:50:37",
                            "upload_time_iso_8601": "2020-02-17T16:50:37.461070Z",
                            "url": "https://files.pythonhosted.org/packages/b0/69/0d0564a4bb25e7754673f2619b2274e889d94db69bfd4ad1e6ce0a941564/ocrd_tesserocr-0.8.1.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.8.2": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "d8381d462e3c132e5215a4d50c9a5582",
                                "sha256": "6523dd1b3131a8061f2a5cfae7e7b6a90e5bf7bd917fbd5f38b948e53b7866b9"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.8.2-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "d8381d462e3c132e5215a4d50c9a5582",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 43489,
                            "upload_time": "2020-04-08T10:26:12",
                            "upload_time_iso_8601": "2020-04-08T10:26:12.768482Z",
                            "url": "https://files.pythonhosted.org/packages/d0/6f/7f16c5f39824afe6d0baf5fb7ba63c8771dda149948f3b98d48738b00dfc/ocrd_tesserocr-0.8.2-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "b275c0bbb6b84d36725e92edc7b69523",
                                "sha256": "7651ec9961415233752fd502bdd7d6714f5a7c00f7c865383dc70c82c017c2b7"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.8.2.tar.gz",
                            "has_sig": false,
                            "md5_digest": "b275c0bbb6b84d36725e92edc7b69523",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 28674,
                            "upload_time": "2020-04-08T10:26:14",
                            "upload_time_iso_8601": "2020-04-08T10:26:14.676134Z",
                            "url": "https://files.pythonhosted.org/packages/8b/e3/48f098b15b09b783c1d6aed56eadd757cb0d3d3bb689a3b160c05ef28829/ocrd_tesserocr-0.8.2.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.8.3": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "8cf2a892d4b9a3e2e3a3bdc60d06a2e3",
                                "sha256": "cd7f5693d3bc862f82739cd721bed04dbc1143139acff341df06b870aec8abf3"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.8.3-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "8cf2a892d4b9a3e2e3a3bdc60d06a2e3",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 43846,
                            "upload_time": "2020-05-12T19:03:54",
                            "upload_time_iso_8601": "2020-05-12T19:03:54.262768Z",
                            "url": "https://files.pythonhosted.org/packages/ac/47/8ba4c93a61615fe44430bc7359f8b56986511bf03e3fdaf0feebb44fe46c/ocrd_tesserocr-0.8.3-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "c61c7a9746f552cc9c2086c1af325a1b",
                                "sha256": "5f0f75d6687cae3dc46a205db8ed5fdf45a3a98eb2841ea8040cbdcd21b83132"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.8.3.tar.gz",
                            "has_sig": false,
                            "md5_digest": "c61c7a9746f552cc9c2086c1af325a1b",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 29029,
                            "upload_time": "2020-05-12T19:03:56",
                            "upload_time_iso_8601": "2020-05-12T19:03:56.013664Z",
                            "url": "https://files.pythonhosted.org/packages/36/ae/99bcaff2a49c15f853a9f301efaf92c5a66e7bb8c633334d7486ed2bf8a4/ocrd_tesserocr-0.8.3.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.8.4": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "0ceb269d07b068cf24c6953cc22f6ea8",
                                "sha256": "70cf78a81e25188fc6c7a5a03447510e3800b65b396aee03f3f8a2c027c25e48"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.8.4-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "0ceb269d07b068cf24c6953cc22f6ea8",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 40323,
                            "upload_time": "2020-06-05T11:25:19",
                            "upload_time_iso_8601": "2020-06-05T11:25:19.212270Z",
                            "url": "https://files.pythonhosted.org/packages/eb/08/2fbe6a716f7a4a2fd1e02a85c81013c6e31e042645377614e50b622ab8ce/ocrd_tesserocr-0.8.4-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "6814dcc9c648befefac524dbd76e7cb8",
                                "sha256": "ac2a17f89a3985d2617997b81a13e12e5026d19fb72acac0d386bcde00b8abbc"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.8.4.tar.gz",
                            "has_sig": false,
                            "md5_digest": "6814dcc9c648befefac524dbd76e7cb8",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 27735,
                            "upload_time": "2020-06-05T11:25:20",
                            "upload_time_iso_8601": "2020-06-05T11:25:20.541899Z",
                            "url": "https://files.pythonhosted.org/packages/d1/82/e9ae5559cfe45222094c8cd2b33fdc071133e9c0e39e3e34fba118b0d463/ocrd_tesserocr-0.8.4.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.8.5": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "9c56db449091d00d0a4a66b7d7cb4ef4",
                                "sha256": "22a1b740526f5ad70fd4168269d5ba664aec893e2f0d1696d7409e2931996c55"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.8.5-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "9c56db449091d00d0a4a66b7d7cb4ef4",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 40681,
                            "upload_time": "2020-06-05T12:16:31",
                            "upload_time_iso_8601": "2020-06-05T12:16:31.523640Z",
                            "url": "https://files.pythonhosted.org/packages/3d/3a/23c806764fdf11bb0836215240760a56dc94a50af3e293d30c0835299169/ocrd_tesserocr-0.8.5-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "428e517693b22c3fab7b4b309ff34f14",
                                "sha256": "80dd11b6f1be37ceb674ffc61c9639b381c7c4d12dd0fa1d157484b4af9e69c1"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.8.5.tar.gz",
                            "has_sig": false,
                            "md5_digest": "428e517693b22c3fab7b4b309ff34f14",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 28092,
                            "upload_time": "2020-06-05T12:16:33",
                            "upload_time_iso_8601": "2020-06-05T12:16:33.815187Z",
                            "url": "https://files.pythonhosted.org/packages/2f/f1/f603c1468700cfbcf01332a8b54332ff586239a06e5695c8235c9cb7613d/ocrd_tesserocr-0.8.5.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.9.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "9c015829e26fe9dadeef492eeafd2ec7",
                                "sha256": "6a292a121f2dd79eb344b775b92e4c52ece41fbc9aa5ca796860c61af2a0ced9"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.9.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "9c015829e26fe9dadeef492eeafd2ec7",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 41134,
                            "upload_time": "2020-08-06T13:32:24",
                            "upload_time_iso_8601": "2020-08-06T13:32:24.052599Z",
                            "url": "https://files.pythonhosted.org/packages/ee/25/ed60e96723a7772f4883e57732583e810fe2e473cef162cdea0e525ff8ec/ocrd_tesserocr-0.9.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "1d5962740d519f92b715e6a1ba002fe4",
                                "sha256": "0d60733aed57f28b31f8473bdc65a5ad4646b59654e9ab262530f2f252fe6a2d"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.9.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "1d5962740d519f92b715e6a1ba002fe4",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 28417,
                            "upload_time": "2020-08-06T13:32:26",
                            "upload_time_iso_8601": "2020-08-06T13:32:26.162370Z",
                            "url": "https://files.pythonhosted.org/packages/55/f3/a7e0bde1aa36ec3437fb7987fa528361c527e92c880ec7faabd5a5135e07/ocrd_tesserocr-0.9.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.9.1": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "39590e7a1e22bda5b6201dfe1220f0d4",
                                "sha256": "1213b764bf575f93118040aaea2323fea85ec5b22c0ebb39e45e5dec40da8edf"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.9.1-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "39590e7a1e22bda5b6201dfe1220f0d4",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 41237,
                            "upload_time": "2020-08-16T11:09:09",
                            "upload_time_iso_8601": "2020-08-16T11:09:09.879409Z",
                            "url": "https://files.pythonhosted.org/packages/2f/7b/740767de0c5f09b3370fa4eda7c1e53e1a58ddedb17527333cb62f19a1c2/ocrd_tesserocr-0.9.1-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "a1162471079864aa4cd009b6d94b7cae",
                                "sha256": "493a9420d65aa60eab39c9825dcea04dbb016ef0344b9dff073de71bdcb937fe"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.9.1.tar.gz",
                            "has_sig": false,
                            "md5_digest": "a1162471079864aa4cd009b6d94b7cae",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 28529,
                            "upload_time": "2020-08-16T11:09:11",
                            "upload_time_iso_8601": "2020-08-16T11:09:11.770296Z",
                            "url": "https://files.pythonhosted.org/packages/cb/50/084d6b32faa9329f93141f1ad19845169b755c08f06943987e18999d8c5b/ocrd_tesserocr-0.9.1.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.9.2": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "fb8388c6a6e71b9d114ee9da485ae1db",
                                "sha256": "aff6af69ee9a9eeb6c4d2e97d2a49421cc428996a745e2afdd989f9dcdeae561"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.9.2-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "fb8388c6a6e71b9d114ee9da485ae1db",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 43866,
                            "upload_time": "2020-09-04T19:47:03",
                            "upload_time_iso_8601": "2020-09-04T19:47:03.785750Z",
                            "url": "https://files.pythonhosted.org/packages/fd/52/5c3282fcc79e32a23c4693c764cbba0d5d679515c074eca3c7e23771c155/ocrd_tesserocr-0.9.2-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "e999790057f4b0151e52f1c0182c8e8e",
                                "sha256": "5c50f3fcd11ed17e70c9f0b92baf73ddf03d44334a7df499108934a2eca50084"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.9.2.tar.gz",
                            "has_sig": false,
                            "md5_digest": "e999790057f4b0151e52f1c0182c8e8e",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 29214,
                            "upload_time": "2020-09-04T19:47:05",
                            "upload_time_iso_8601": "2020-09-04T19:47:05.348045Z",
                            "url": "https://files.pythonhosted.org/packages/48/a6/ea5d79b626f789968a6cab45ea3a85aeebbb8ec57061ab86f2d40194e7dd/ocrd_tesserocr-0.9.2.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.9.3": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "01d9aa0ebdd9563c91b99ea01d097388",
                                "sha256": "b63222c44be2c681e246975220c7ca0e2bc7692930a6ad36c6cd00d2a173753b"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.9.3-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "01d9aa0ebdd9563c91b99ea01d097388",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 42749,
                            "upload_time": "2020-09-15T07:38:13",
                            "upload_time_iso_8601": "2020-09-15T07:38:13.334152Z",
                            "url": "https://files.pythonhosted.org/packages/13/d6/a363e2a2b90194d203403964053f7466feb26b88b20485f9b9bb66d9d3c9/ocrd_tesserocr-0.9.3-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "c537be7470a054222cc9004bda4fcd79",
                                "sha256": "bbcf0ca6b925d99625b948e51df466fc9ebf27c6aa3689c68fc61a4abd2c3c01"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.9.3.tar.gz",
                            "has_sig": false,
                            "md5_digest": "c537be7470a054222cc9004bda4fcd79",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 29312,
                            "upload_time": "2020-09-15T07:38:14",
                            "upload_time_iso_8601": "2020-09-15T07:38:14.624829Z",
                            "url": "https://files.pythonhosted.org/packages/56/cc/918650d99e907a74b00fe1f533779544c68b9603b04b5fdce54fcd43ded2/ocrd_tesserocr-0.9.3.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.9.5": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "06a43f7be62a22108d9e778f4046d555",
                                "sha256": "4a38eab772930ce8dc007409a73fefa2720f5486e876547bb584c16c517c8639"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.9.5-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "06a43f7be62a22108d9e778f4046d555",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 39129,
                            "upload_time": "2020-10-01T23:31:07",
                            "upload_time_iso_8601": "2020-10-01T23:31:07.029760Z",
                            "url": "https://files.pythonhosted.org/packages/da/7e/282ec6124daa519cd727ec94f508062de4f1397495c3e3e860195c5a891c/ocrd_tesserocr-0.9.5-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "8a554d4468e28cebc38fb2489104a233",
                                "sha256": "d54765a46f72ced38e714ac946e6dc1846a8b1eb8357d8ade1f197f593f334ca"
                            },
                            "downloads": -1,
                            "filename": "ocrd_tesserocr-0.9.5.tar.gz",
                            "has_sig": false,
                            "md5_digest": "8a554d4468e28cebc38fb2489104a233",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 26929,
                            "upload_time": "2020-10-01T23:31:08",
                            "upload_time_iso_8601": "2020-10-01T23:31:08.668530Z",
                            "url": "https://files.pythonhosted.org/packages/30/3c/603c58a126823e721cbdc5606df12f9a3489535992b4eccdfb06db0dcf1c/ocrd_tesserocr-0.9.5.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ]
                },
                "urls": [
                    {
                        "comment_text": "",
                        "digests": {
                            "md5": "8ce0273d28bdbe639376029940588e08",
                            "sha256": "f448519c01e7b231bb2dbcb04c5fb3add83352f73841b02c6782ce25a09d8a7c"
                        },
                        "downloads": -1,
                        "filename": "ocrd_tesserocr-0.13.6-py3-none-any.whl",
                        "has_sig": false,
                        "md5_digest": "8ce0273d28bdbe639376029940588e08",
                        "packagetype": "bdist_wheel",
                        "python_version": "py3",
                        "requires_python": null,
                        "size": 53872,
                        "upload_time": "2021-09-28T11:23:42",
                        "upload_time_iso_8601": "2021-09-28T11:23:42.329541Z",
                        "url": "https://files.pythonhosted.org/packages/5d/29/5a15a00f1642505a61748ebe52c81a6c45a5bac1f173481f873db0a3c40e/ocrd_tesserocr-0.13.6-py3-none-any.whl",
                        "yanked": false,
                        "yanked_reason": null
                    },
                    {
                        "comment_text": "",
                        "digests": {
                            "md5": "0e66646e87c2696430d11e13531119ab",
                            "sha256": "31805389d0c8f147cbaf298d5c4db7f53b073567c554bb36d723a7ea15517a17"
                        },
                        "downloads": -1,
                        "filename": "ocrd_tesserocr-0.13.6.tar.gz",
                        "has_sig": false,
                        "md5_digest": "0e66646e87c2696430d11e13531119ab",
                        "packagetype": "sdist",
                        "python_version": "source",
                        "requires_python": null,
                        "size": 46177,
                        "upload_time": "2021-09-28T11:23:44",
                        "upload_time_iso_8601": "2021-09-28T11:23:44.332290Z",
                        "url": "https://files.pythonhosted.org/packages/88/3a/b0ebeb80eb436559f314edb8e2ef7ab5e0846dcf3f8b38ca0f26c565fb7e/ocrd_tesserocr-0.13.6.tar.gz",
                        "yanked": false,
                        "yanked_reason": null
                    }
                ],
                "vulnerabilities": []
            },
            "url": "https://github.com/OCR-D/ocrd_tesserocr"
        },
        "url": "https://github.com/OCR-D/ocrd_tesserocr"
    },
    {
        "compliant_cli": false,
        "files": {
            "Dockerfile": "FROM ocrd/core:latest AS base\nENV VERSION=\"Di 12. Mai 13:26:35 CEST 2020\"\nENV GITURL=\"https://github.com/cisocrgroup\"\nENV DOWNLOAD_URL=\"http://cis.lmu.de/~finkf\"\n\n# deps\nRUN apt-get update \\\n\t&& apt-get -y install --no-install-recommends locales\n\n# locales\nRUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \\\n    && dpkg-reconfigure --frontend=noninteractive locales \\\n    && update-locale LANG=en_US.UTF-8\n\n# install the profiler\nFROM base AS profiler\nRUN apt-get update \\\n\t&& apt-get -y install --no-install-recommends cmake g++ libcppunit-dev libxerces-c-dev \\\n\t&& git clone ${GITURL}/Profiler --branch devel --single-branch /build \\\n\t&& cd /build \\\n\t&& cmake -DCMAKE_BUILD_TYPE=release . \\\n\t&& make compileFBDic trainFrequencyList runDictSearch profiler \\\n\t&& mkdir /apps \\\n\t&& cp bin/compileFBDic bin/trainFrequencyList bin/profiler bin/runDictSearch /apps/ \\\n\t&& cd / \\\n    && rm -rf /build\n\nFROM profiler AS languagemodel\n# install the profiler's language backend\nCOPY --from=profiler /apps/compileFBDic /apps/\nCOPY --from=profiler /apps/trainFrequencyList /apps/\nCOPY --from=profiler /apps/runDictSearch /apps/\nRUN apt-get update \\\n\t&& apt-get -y install --no-install-recommends icu-devtools \\\n\t&& git clone ${GITURL}/Resources --branch master --single-branch /build \\\n\t&& cd /build/lexica \\\n\t&& PATH=$PATH:/apps make \\\n\t&& PATH=$PATH:/apps make test \\\n\t&& PATH=$PATH:/apps make install \\\n\t&& cd / \\\n\t&& rm -rf /build\n\nFROM base AS postcorrection\n# install ocrd_cis (python)\nVOLUME [\"/data\"]\nCOPY --from=languagemodel /etc/profiler/languages /etc/profiler/languages\nCOPY --from=profiler /apps/profiler /apps/\nCOPY --from=profiler /usr/lib/x86_64-linux-gnu/libicuuc.so /usr/lib//x86_64-linux-gnu/\nCOPY --from=profiler /usr/lib/x86_64-linux-gnu/libicudata.so /usr/lib//x86_64-linux-gnu/\nCOPY --from=profiler /usr/lib//x86_64-linux-gnu/libxerces-c-3.2.so /usr/lib//x86_64-linux-gnu/\nCOPY . /build\nRUN apt-get update \\\n\t&& apt-get -y install --no-install-recommends gcc wget default-jre-headless \\\n\t&& cd /build \\\n\t&& make install \\\n\t&& make test \\\n\t&& cd / \\\n\t&& rm -rf /build\n",
            "README.md": "[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/cisocrgroup/ocrd_cis.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/cisocrgroup/ocrd_cis/context:python)\n[![Total alerts](https://img.shields.io/lgtm/alerts/g/cisocrgroup/ocrd_cis.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/cisocrgroup/ocrd_cis/alerts/)\n[![image](https://img.shields.io/pypi/v/ocrd_cis.svg)](https://pypi.org/project/ocrd_cis/)\n\nContent:\n   * [ocrd_cis](#ocrd_cis)\n      * [Introduction](#introduction)\n      * [Installation](#installation)\n      * [Profiler](#profiler)\n      * [Usage](#usage)\n         * [ocrd-cis-postcorrect](#ocrd-cis-postcorrect)\n         * [ocrd-cis-align](#ocrd-cis-align)\n         * [ocrd-cis-data](#ocrd-cis-data)\n         * [Training](#training)\n         * [ocrd-cis-ocropy-train](#ocrd-cis-ocropy-train)\n         * [ocrd-cis-ocropy-clip](#ocrd-cis-ocropy-clip)\n         * [ocrd-cis-ocropy-resegment](#ocrd-cis-ocropy-resegment)\n         * [ocrd-cis-ocropy-segment](#ocrd-cis-ocropy-segment)\n         * [ocrd-cis-ocropy-deskew](#ocrd-cis-ocropy-deskew)\n         * [ocrd-cis-ocropy-denoise](#ocrd-cis-ocropy-denoise)\n         * [ocrd-cis-ocropy-binarize](#ocrd-cis-ocropy-binarize)\n         * [ocrd-cis-ocropy-dewarp](#ocrd-cis-ocropy-dewarp)\n         * [ocrd-cis-ocropy-recognize](#ocrd-cis-ocropy-recognize)\n         * [Tesserocr](#tesserocr)\n      * [Workflow configuration](#workflow-configuration)\n      * [Testing](#testing)\n   * [Miscellaneous](#miscellaneous)\n      * [OCR-D workspace](#ocr-d-workspace)\n      * [OCR-D links](#ocr-d-links)\n\n# ocrd_cis\n\n[CIS](http://www.cis.lmu.de) [OCR-D](http://ocr-d.de) command line\ntools for the automatic post-correction of OCR-results.\n\n## Introduction\n`ocrd_cis` contains different tools for the automatic post-correction\nof OCR results.  It contains tools for the training, evaluation and\nexecution of the post-correction.  Most of the tools are following the\n[OCR-D CLI conventions](https://ocr-d.de/en/spec/cli).\n\nAdditionally, there is a helper tool to align multiple OCR results,\nas well as an improved version of [Ocropy](https://github.com/tmbarchive/ocropy)\nthat works with Python 3 and is also wrapped for [OCR-D](https://ocr-d.de/en/spec/).\n\n## Installation\nThere are 2 ways to install the `ocrd_cis` tools:\n * normal packaging:\n  ```sh\n  make install # or equally: pip install -U pip .\n  ```\n  (Installs `ocrd_cis` including its Python dependencies\n   from the current directory to the Python package directory.)\n * editable mode:\n  ```sh\n  make install-devel # or equally: pip install -e -U pip .\n  ```\n  (Installs `ocrd_cis` including its Python dependencies\n   from the current directory.)\n \nIt is possible (and recommended) to install `ocrd_cis` in a custom user directory\n(instead of system-wide) by using `virtualenv` (or `venv`):\n```sh\n # create venv:\n python3 -m venv venv-dir # where \"venv-dir\" could be any path name\n # enter venv in current shell:\n source venv-dir/bin/activate\n # install ocrd_cis:\n make install # or any other way (see above)\n # use ocrd_cis:\n ocrd-cis-ocropy-binarize ...\n # finally, leave venv:\n deactivate\n```\n\n## Profiler\nThe post-correction is dependent on the language\n[profiler](https://github.com/cisocrgroup/Profiler) and its language\nconfigurations to generate corrections for suspicious words. In order\nto use the post-correction, a profiler and according language\nconfigurations have to be present on the system. You can refer to our\n[manuals](https://github.com/cisocrgroup/Resources/tree/master/manuals)\nand our [lexical\nresources](https://github.com/cisocrgroup/Resources/tree/master/lexica)\nfor more information.\n\nIf you use docker you can use the preinstalled profiler from within\nthe docker-container.  The profiler is installed to `/apps/profiler`\nand the language configurations lie in `/etc/profiler/languages` in\nthe container image.\n\n## Usage\nMost tools follow the [OCR-D specifications](https://ocr-d.de/en/spec),\n(which makes them [OCR-D _processors_](https://ocr-d.de/en/spec/cli),)\ni.e. they accept the command-line options `--input-file-grp`, `--output-file-grp`,\n`--page-id`, `--parameter`, `--mets`, `--log-level` (each with an argument).\nInvoke with `--help` to get self-documentation. \n\nSome of the processors (most notably the alignment tool) expect a comma-seperated list\nof multiple input file groups, or multiple output file groups.\n\nThe [ocrd-tool.json](ocrd_cis/ocrd-tool.json) contains a formal\ndescription of all the processors along with the parameter config file\naccepted by their `--parameter` argument.\n\n### ocrd-cis-postcorrect\nThis processor runs the post correction using a pre-trained model.  If\nadditional support OCRs should be used, models for these OCR steps are\nrequired and must be executed and aligned beforehand (see [the test\nscript](tests/run_postcorrection_test.bash) for an example).\n\nThere is a basic model trained on the OCR-D ground truth.  It gets\ninstalled allongside this module.  You can get the model's install\npath using `ocrd-cis-data -model` (see below for a description of\n`ocrd-cis-data`).  To use this model (or any other model) the `model`\nparameter in the configuration file must be set to the path of the\nmodel to use.  Be aware that the models are trained with a specific\nmaximal number of OCR's (usally 2) and that is not possible to use\nmore OCR's than the number used for training (it is possible to use\nless, though).\n\nArguments:\n * `--parameter` path to configuration file\n * `--input-file-grp` name of the master-OCR file group\n * `--output-file-grp` name of the post-correction file group\n * `--log-level` set log level\n * `--mets` path to METS file in workspace\n\nAs mentioned above in order to use the postcorrection with input from\nmultiple OCR's, some preprocessing steps are needed: firstly the\nadditional OCR recognition has to be done and secondly the multiple\nOCR's have to be aligned (you can also take a look to the function\n`ocrd_cis_align` in the [tests](tests/test_lib.bash)).  Assuming an\noriginal recognition as file group `OCR1` on the segmented document of\nfile group `SEG`, the folloing commands can be used:\n\n```sh\nocrd-ocropus-recognize -I SEG -O OCR2 ... # additional OCR\nocrd-cis-align -I OCR1,OCR2 -O ALGN ... # align OCR1 and OCR2\nocrd-cis-postcorrect -I ALGN -O PC ... # post correction\n```\n\n### ocrd-cis-align\nAligns tokens of multiple input file groups to one output file group.\nThis processor is used to align the master OCR with any additional support\nOCRs.  It accepts a comma-separated list of input file groups, which\nit aligns in order.\n\nArguments:\n * `--parameter` path to configuration file\n * `--input-file-grp` comma seperated list of the input file groups;\n   first input file group is the master OCR; if there is a ground\n   truth (for evaluation) it must be the last file group in the list\n * `--output-file-grp` name of the file group for the aligned result\n * `--log-level` set log level\n * `--mets` path to METS file in workspace\n\n### ocrd-cis-data\nHelper tool to get the path of the installed data files. Usage:\n`ocrd-cis-data [-h|-jar|-3gs|-model|-config]` to get the path of the\njar library, the pre-trained post correction model, the path to the\ndefault 3-grams language model file or the default training\nconfiguration file.  This tool does not follow the OCR-D conventions.\n\n### Training\nThere is no dedicated training script provided. Models are trained\nusing the java implementation directly (check out the [training test\nscript](tests/run_training_test.bash) for an example).  Training a\nmodel requires a workspace containing one or more file groups\nconsisting of aligned OCR and ground-truth documents (the last file\ngroup has to be the ground truth).\n\nArguments:\n * `--parameter` path to configuration file\n * `--input-file-grp` name of the input file group to profile\n * `--output-file-grp` name of the output file group where the profile\n   is stored\n * `--log-level` set log level\n * `--mets` path to METS file in the workspace\n\n### ocrd-cis-ocropy-train\nThe [ocropy-train](ocrd_cis/ocropy/train.py) tool can be used to train LSTM models.\nIt takes ground truth from the workspace and saves (image+text) snippets from the corresponding pages.\nThen a model is trained on all snippets for 1 million (or the given number of) randomized iterations from the parameter file.\n\n```sh\njava -jar $(ocrd-cis-data -jar) \\\n\t -c train \\\n\t --input-file-grp OCR1,OCR2,GT \\\n     --log-level DEBUG \\\n\t -m mets.xml \\\n\t --parameter $(ocrd-cis-data -config)\n```\n\n### ocrd-cis-ocropy-clip\nThe [clip](ocrd_cis/ocropy/clip.py) processor can be used to remove intrusions of neighbouring segments in regions / lines of a page.\nIt runs a connected component analysis on every text region / line of every PAGE in the input file group, as well as its overlapping neighbours, and for each binary object of conflict, determines whether it belongs to the neighbour, and can therefore be clipped to the background. It references the resulting segment image files in the output PAGE (via `AlternativeImage`).\n(Use this to suppress separators and neighbouring text.)\n```sh\nocrd-cis-ocropy-clip \\\n  -I OCR-D-SEG-REGION \\\n  -O OCR-D-SEG-REGION-CLIP \\\n  -p '{\"level-of-operation\": \"region\"}'\n```\n\nAvailable parameters are:\n```sh\n   \"level-of-operation\" [string - \"region\"]\n    PAGE XML hierarchy level granularity to annotate images for\n    Possible values: [\"region\", \"line\"]\n   \"dpi\" [number - -1]\n    pixel density in dots per inch (overrides any meta-data in the\n    images); disabled when negative\n   \"min_fraction\" [number - 0.7]\n    share of foreground pixels that must be retained by the largest label\n```\n\n### ocrd-cis-ocropy-resegment\nThe [resegment](ocrd_cis/ocropy/resegment.py) processor can be used to remove overlap between neighbouring lines of a page.\nIt runs a line segmentation on every text region of every PAGE in the input file group, and for each line already annotated, determines the label of largest extent within the original coordinates (polygon outline) in that line, and annotates the resulting coordinates in the output PAGE.\n(Use this to polygonalise text lines that are poorly segmented, e.g. via bounding boxes.)\n```sh\nocrd-cis-ocropy-resegment \\\n  -I OCR-D-SEG-LINE \\\n  -O OCR-D-SEG-LINE-RES \\\n  -p '{\"extend_margins\": 3}'\n```\n\nAvailable parameters are:\n```sh\n   \"level-of-operation\" [string - \"page\"]\n    PAGE XML hierarchy level to segment textlines in ('region' abides by\n    existing text region boundaries, 'page' optimises lines in the whole\n    page once\n    Possible values: [\"page\", \"region\"]\n   \"method\" [string - \"lineest\"]\n    source for new line polygon candidates ('lineest' for line\n    estimation, i.e. how Ocropy would have segmented text lines;\n    'baseline' tries to re-polygonize from the baseline annotation;\n    'ccomps' avoids crossing connected components by majority rule)\n    Possible values: [\"lineest\", \"baseline\", \"ccomps\"]\n   \"dpi\" [number - 0]\n    pixel density in dots per inch (overrides any meta-data in the\n    images); disabled when zero or negative\n   \"min_fraction\" [number - 0.75]\n    share of foreground pixels that must be retained by the output\n    polygons\n   \"extend_margins\" [number - 3]\n    number of pixels to extend the input polygons in all directions\n```\n\n### ocrd-cis-ocropy-segment\nThe [segment](ocrd_cis/ocropy/segment.py) processor can be used to segment (pages or) regions of a page into (regions and) lines.\nIt runs a line segmentation on every (page or) text region of every PAGE in the input file group, and adds (text regions containing) `TextLine` elements with the resulting polygon outlines to the annotation of the output PAGE.\n(Does _not_ detect tables.)\n```sh\nocrd-cis-ocropy-segment \\\n  -I OCR-D-SEG-BLOCK \\\n  -O OCR-D-SEG-LINE \\\n  -p '{\"level-of-operation\": \"page\", \"gap_height\": 0.015}'\n```\n\nAvailable parameters are:\n```sh\n   \"dpi\" [number - -1]\n    pixel density in dots per inch (overrides any meta-data in the\n    images); disabled when negative; when disabled and no meta-data is\n    found, 300 is assumed\n   \"level-of-operation\" [string - \"region\"]\n    PAGE XML hierarchy level to read images from and add elements to\n    Possible values: [\"page\", \"table\", \"region\"]\n   \"maxcolseps\" [number - 20]\n    (when operating on the page/table level) maximum number of\n    white/background column separators to detect, counted piece-wise\n   \"maxseps\" [number - 20]\n    (when operating on the page/table level) number of black/foreground\n    column separators to detect (and suppress), counted piece-wise\n   \"maximages\" [number - 10]\n    (when operating on the page level) maximum number of black/foreground\n    very large components to detect (and suppress), counted piece-wise\n   \"csminheight\" [number - 4]\n    (when operating on the page/table level) minimum height of\n    white/background or black/foreground column separators in multiples\n    of scale/capheight, counted piece-wise\n   \"hlminwidth\" [number - 10]\n    (when operating on the page/table level) minimum width of\n    black/foreground horizontal separators in multiples of\n    scale/capheight, counted piece-wise\n   \"gap_height\" [number - 0.01]\n    (when operating on the page/table level) largest minimum pixel\n    average in the horizontal or vertical profiles (across the binarized\n    image) to still be regarded as a gap during recursive X-Y cut from\n    lines to regions; needs to be larger when more foreground noise is\n    present, reduce to avoid mistaking text for noise\n   \"gap_width\" [number - 1.5]\n    (when operating on the page/table level) smallest width in multiples\n    of scale/capheight of a valley in the horizontal or vertical\n    profiles (across the binarized image) to still be regarded as a gap\n    during recursive X-Y cut from lines to regions; needs to be smaller\n    when more foreground noise is present, increase to avoid mistaking\n    inter-line as paragraph gaps and inter-word as inter-column gaps\n   \"overwrite_order\" [boolean - true]\n    (when operating on the page/table level) remove any references for\n    existing TextRegion elements within the top (page/table) reading\n    order; otherwise append\n   \"overwrite_separators\" [boolean - true]\n    (when operating on the page/table level) remove any existing\n    SeparatorRegion elements; otherwise append\n   \"overwrite_regions\" [boolean - true]\n    (when operating on the page/table level) remove any existing\n    TextRegion elements; otherwise append\n   \"overwrite_lines\" [boolean - true]\n    (when operating on the region level) remove any existing TextLine\n    elements; otherwise append\n   \"spread\" [number - 2.4]\n    distance in points (pt) from the foreground to project text line (or\n    text region) labels into the background for polygonal contours; if\n    zero, project half a scale/capheight\n```\n\n### ocrd-cis-ocropy-deskew\nThe [deskew](ocrd_cis/ocropy/deskew.py) processor can be used to deskew pages / regions of a page.\nIt runs a projection profile-based skew estimation on every segment of every PAGE in the input file group and annotates the orientation angle in the output PAGE.\n(Does _not_ include orientation detection.)\n```sh\nocrd-cis-ocropy-deskew \\\n  -I OCR-D-SEG-LINE \\\n  -O OCR-D-SEG-LINE-DES \\\n  -p '{\"level-of-operation\": \"page\", \"maxskew\": 10}'\n```\n\nAvailable parameters are:\n```sh\n   \"maxskew\" [number - 5.0]\n    modulus of maximum skewing angle to detect (larger will be slower, 0\n    will deactivate deskewing)\n   \"level-of-operation\" [string - \"region\"]\n    PAGE XML hierarchy level granularity to annotate images for\n    Possible values: [\"page\", \"region\"]\n```\n\n### ocrd-cis-ocropy-denoise\nThe [denoise](ocrd_cis/ocropy/denoise.py) processor can be used to despeckle pages / regions / lines of a page.\nIt runs a connected component analysis and removes small components (black or white) on every segment of every PAGE in the input file group and references the resulting segment image files in the output PAGE (as `AlternativeImage`).\n```sh\nocrd-cis-ocropy-denoise \\\n  -I OCR-D-SEG-LINE-DES \\\n  -O OCR-D-SEG-LINE-DEN \\\n  -p '{\"noise_maxsize\": 2}'\n```\n\nAvailable parameters are:\n```sh\n   \"noise_maxsize\" [number - 3.0]\n    maximum size in points (pt) for connected components to regard as\n    noise (0 will deactivate denoising)\n   \"dpi\" [number - -1]\n    pixel density in dots per inch (overrides any meta-data in the\n    images); disabled when negative\n   \"level-of-operation\" [string - \"page\"]\n    PAGE XML hierarchy level granularity to annotate images for\n    Possible values: [\"page\", \"region\", \"line\"]\n```\n\n### ocrd-cis-ocropy-binarize\nThe [binarize](ocrd_cis/ocropy/binarize.py) processor can be used to binarize (and optionally denoise and deskew) pages / regions / lines of a page.\nIt runs the \"nlbin\" adaptive whitelevel thresholding on every segment of every PAGE in the input file group and references the resulting segment image files in the output PAGE (as `AlternativeImage`). (If a deskewing angle has already been annotated in a region, the tool respects that and rotates accordingly.) Images can also be produced grayscale-normalized.\n```sh\nocrd-cis-ocropy-binarize \\\n  -I OCR-D-SEG-LINE-DES \\\n  -O OCR-D-SEG-LINE-BIN \\\n  -p '{\"level-of-operation\": \"page\", \"threshold\": 0.7}'\n```\n\nAvailable parameters are:\n```sh\n   \"method\" [string - \"ocropy\"]\n    binarization method to use (only 'ocropy' will include deskewing and\n    denoising)\n    Possible values: [\"none\", \"global\", \"otsu\", \"gauss-otsu\", \"ocropy\"]\n   \"threshold\" [number - 0.5]\n    for the 'ocropy' and ' global' method, black/white threshold to apply\n    on the whitelevel normalized image (the larger the more/heavier\n    foreground)\n   \"grayscale\" [boolean - false]\n    for the 'ocropy' method, produce grayscale-normalized instead of\n    thresholded image\n   \"maxskew\" [number - 0.0]\n    modulus of maximum skewing angle (in degrees) to detect (larger will\n    be slower, 0 will deactivate deskewing)\n   \"noise_maxsize\" [number - 0]\n    maximum pixel number for connected components to regard as noise (0\n    will deactivate denoising)\n   \"level-of-operation\" [string - \"page\"]\n    PAGE XML hierarchy level granularity to annotate images for\n    Possible values: [\"page\", \"region\", \"line\"]\n```\n\n### ocrd-cis-ocropy-dewarp\nThe [dewarp](ocrd_cis/ocropy/dewarp.py) processor can be used to vertically dewarp text lines of a page.\nIt runs the baseline estimation and center normalizer algorithm on every line in every text region of every PAGE in the input file group and references the resulting line image files in the output PAGE (as `AlternativeImage`).\n```sh\nocrd-cis-ocropy-dewarp \\\n  -I OCR-D-SEG-LINE-BIN \\\n  -O OCR-D-SEG-LINE-DEW \\\n  -p '{\"range\": 5}'\n```\n\nAvailable parameters are:\n```sh\n   \"dpi\" [number - -1]\n    pixel density in dots per inch (overrides any meta-data in the\n    images); disabled when negative\n   \"range\" [number - 4.0]\n    maximum vertical disposition or maximum margin (will be multiplied by\n    mean centerline deltas to yield pixels)\n   \"max_neighbour\" [number - 0.05]\n    maximum rate of foreground pixels intruding from neighbouring lines\n    (line will not be processed above that)\n```\n\n### ocrd-cis-ocropy-recognize\nThe [recognize](ocrd_cis/ocropy/recognize.py) processor can be used to recognize the lines / words / glyphs of a page.\nIt runs LSTM optical character recognition on every line in every text region of every PAGE in the input file group and adds the resulting text annotation in the output PAGE.\n```sh\nocrd-cis-ocropy-recognize \\\n  -I OCR-D-SEG-LINE-DEW \\\n  -O OCR-D-OCR-OCRO \\\n  -p '{\"textequiv_level\": \"word\", \"model\": \"fraktur-jze.pyrnn\"}'\n```\n\nAvailable parameters are:\n```sh\n   \"textequiv_level\" [string - \"line\"]\n    PAGE XML hierarchy level granularity to add the TextEquiv results to\n    Possible values: [\"line\", \"word\", \"glyph\"]\n   \"model\" [string]\n    ocropy model to apply (e.g. fraktur.pyrnn)\n```\n\n### Tesserocr\nInstall essential system packages for Tesserocr\n```sh\nsudo apt-get install python3-tk \\\n  tesseract-ocr libtesseract-dev libleptonica-dev \\\n  libimage-exiftool-perl libxml2-utils\n```\n\nThen install Tesserocr from: https://github.com/OCR-D/ocrd_tesserocr\n```sh\npip install -r requirements.txt\npip install .\n```\n\nDownload and move tesseract models from:\nhttps://github.com/tesseract-ocr/tesseract/wiki/Data-Files or use your\nown models and place them into: /usr/share/tesseract-ocr/4.00/tessdata\n\n## Workflow configuration\n\nA decent pipeline might look like this:\n\n1. image normalization/optimization\n1. page-level binarization\n1. page-level cropping\n1. (page-level binarization)\n1. (page-level despeckling)\n1. page-level deskewing\n1. (page-level dewarping)\n1. region segmentation, possibly subdivided into\n   1. text/non-text separation\n   1. text region segmentation (and classification)\n   1. reading order detection\n   1. non-text region classification\n1. region-level clipping\n1. (region-level deskewing)\n1. line segmentation\n1. (line-level clipping or resegmentation)\n1. line-level dewarping\n1. line-level recognition\n1. (line-level alignment and post-correction)\n\nIf GT is used, then cropping/segmentation steps can be omitted.\n\nIf a segmentation is used which does not produce overlapping segments, then clipping/resegmentation can be omitted.\n\n## Testing\nTo run a few basic tests type `make test` (`ocrd_cis` has to be\ninstalled in order to run any tests).\n\n# Miscellaneous\n## OCR-D workspace\n\n* Create a new (empty) workspace: `ocrd workspace -d workspace-dir init`\n* cd into `workspace-dir`\n* Add new file to workspace: `ocrd workspace add file -G group -i id\n  -m mimetype -g pageId`\n\n## OCR-D links\n\n- [OCR-D](https://ocr-d.github.io)\n- [Github](https://github.com/OCR-D)\n- [Project-page](http://www.ocr-d.de/)\n- [Ground-truth](https://ocr-d-repo.scc.kit.edu/api/v1/metastore/bagit/search)\n",
            "ocrd-tool.json": "{\n\t\"git_url\": \"https://github.com/cisocrgroup/ocrd_cis\",\n\t\"version\": \"0.1.5\",\n\t\"tools\": {\n\t\t\"ocrd-cis-ocropy-binarize\": {\n\t\t\t\"executable\": \"ocrd-cis-ocropy-binarize\",\n\t\t\t\"categories\": [\n\t\t\t\t\"Image preprocessing\"\n\t\t\t],\n\t\t\t\"steps\": [\n\t\t\t\t\"preprocessing/optimization/binarization\",\n\t\t\t\t\"preprocessing/optimization/grayscale_normalization\",\n\t\t\t\t\"preprocessing/optimization/deskewing\"\n\t\t\t],\n\t\t\t\"input_file_grp\": [\n\t\t\t\t\"OCR-D-IMG\",\n\t\t\t\t\"OCR-D-SEG-BLOCK\",\n\t\t\t\t\"OCR-D-SEG-LINE\"\n\t\t\t],\n\t\t\t\"output_file_grp\": [\n\t\t\t\t\"OCR-D-IMG-BIN\",\n\t\t\t\t\"OCR-D-SEG-BLOCK\",\n\t\t\t\t\"OCR-D-SEG-LINE\"\n\t\t\t],\n\t\t\t\"description\": \"Binarize (and optionally deskew/despeckle) pages / regions / lines with ocropy\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"method\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"enum\": [\"none\", \"global\", \"otsu\", \"gauss-otsu\", \"ocropy\"],\n\t\t\t\t\t\"description\": \"binarization method to use (only 'ocropy' will include deskewing and denoising)\",\n\t\t\t\t\t\"default\": \"ocropy\"\n\t\t\t\t},\n\t\t\t\t\"threshold\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"float\",\n\t\t\t\t\t\"description\": \"for the 'ocropy' and ' global' method, black/white threshold to apply on the whitelevel normalized image (the larger the more/heavier foreground)\",\n\t\t\t\t\t\"default\": 0.5\n\t\t\t\t},\n\t\t\t\t\"grayscale\": {\n\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\"description\": \"for the 'ocropy' method, produce grayscale-normalized instead of thresholded image\",\n\t\t\t\t\t\"default\": false\n\t\t\t\t},\n\t\t\t\t\"maxskew\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"float\",\n\t\t\t\t\t\"description\": \"modulus of maximum skewing angle (in degrees) to detect (larger will be slower, 0 will deactivate deskewing)\",\n\t\t\t\t\t\"default\": 0.0\n\t\t\t\t},\n\t\t\t\t\"noise_maxsize\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"int\",\n\t\t\t\t\t\"description\": \"maximum pixel number for connected components to regard as noise (0 will deactivate denoising)\",\n\t\t\t\t\t\"default\": 0\n\t\t\t\t},\n\t\t\t\t\"dpi\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"float\",\n\t\t\t\t\t\"description\": \"pixel density in dots per inch (overrides any meta-data in the images); disabled when zero or negative\",\n\t\t\t\t\t\"default\": 0\n\t\t\t\t},\n\t\t\t\t\"level-of-operation\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"enum\": [\"page\", \"table\", \"region\", \"line\"],\n\t\t\t\t\t\"description\": \"PAGE XML hierarchy level granularity to annotate images for\",\n\t\t\t\t\t\"default\": \"page\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"ocrd-cis-ocropy-deskew\": {\n\t\t\t\"executable\": \"ocrd-cis-ocropy-deskew\",\n\t\t\t\"categories\": [\n\t\t\t\t\"Image preprocessing\"\n\t\t\t],\n\t\t\t\"steps\": [\n\t\t\t\t\"preprocessing/optimization/deskewing\"\n\t\t\t],\n\t\t\t\"input_file_grp\": [\n\t\t\t\t\"OCR-D-SEG-BLOCK\",\n\t\t\t\t\"OCR-D-SEG-LINE\"\n\t\t\t],\n\t\t\t\"output_file_grp\": [\n\t\t\t\t\"OCR-D-SEG-BLOCK\",\n\t\t\t\t\"OCR-D-SEG-LINE\"\n\t\t\t],\n\t\t\t\"description\": \"Deskew regions with ocropy (by annotating orientation angle and adding AlternativeImage)\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"maxskew\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"description\": \"modulus of maximum skewing angle to detect (larger will be slower, 0 will deactivate deskewing)\",\n\t\t\t\t\t\"default\": 5.0\n\t\t\t\t},\n\t\t\t\t\"level-of-operation\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"enum\": [\"page\", \"table\", \"region\"],\n\t\t\t\t\t\"description\": \"PAGE XML hierarchy level granularity to annotate images for\",\n\t\t\t\t\t\"default\": \"region\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"ocrd-cis-ocropy-denoise\": {\n\t\t\t\"executable\": \"ocrd-cis-ocropy-denoise\",\n\t\t\t\"categories\": [\n\t\t\t\t\"Image preprocessing\"\n\t\t\t],\n\t\t\t\"steps\": [\n\t\t\t\t\"preprocessing/optimization/despeckling\"\n\t\t\t],\n\t\t\t\"input_file_grp\": [\n\t\t\t\t\"OCR-D-IMG\",\n\t\t\t\t\"OCR-D-SEG-BLOCK\",\n\t\t\t\t\"OCR-D-SEG-LINE\"\n\t\t\t],\n\t\t\t\"output_file_grp\": [\n\t\t\t\t\"OCR-D-IMG-DESPECK\",\n\t\t\t\t\"OCR-D-SEG-BLOCK\",\n\t\t\t\t\"OCR-D-SEG-LINE\"\n\t\t\t],\n\t\t\t\"description\": \"Despeckle pages / regions / lines with ocropy\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"noise_maxsize\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"float\",\n\t\t\t\t\t\"description\": \"maximum size in points (pt) for connected components to regard as noise (0 will deactivate denoising)\",\n\t\t\t\t\t\"default\": 3.0\n\t\t\t\t},\n\t\t\t\t\"dpi\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"float\",\n\t\t\t\t\t\"description\": \"pixel density in dots per inch (overrides any meta-data in the images); disabled when zero or negative\",\n\t\t\t\t\t\"default\": 0\n\t\t\t\t},\n\t\t\t\t\"level-of-operation\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"enum\": [\"page\", \"region\", \"line\"],\n\t\t\t\t\t\"description\": \"PAGE XML hierarchy level granularity to annotate images for\",\n\t\t\t\t\t\"default\": \"page\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"ocrd-cis-ocropy-clip\": {\n\t\t\t\"executable\": \"ocrd-cis-ocropy-clip\",\n\t\t\t\"categories\": [\n\t\t\t\t\"Layout analysis\"\n\t\t\t],\n\t\t\t\"steps\": [\n\t\t\t\t\"layout/segmentation/region\",\n\t\t\t\t\"layout/segmentation/line\"\n\t\t\t],\n\t\t\t\"input_file_grp\": [\n\t\t\t\t\"OCR-D-SEG-BLOCK\",\n\t\t\t\t\"OCR-D-SEG-LINE\"\n\t\t\t],\n\t\t\t\"output_file_grp\": [\n\t\t\t\t\"OCR-D-SEG-BLOCK\",\n\t\t\t\t\"OCR-D-SEG-LINE\"\n\t\t\t],\n\t\t\t\"description\": \"Clip text regions / lines at intersections with neighbours\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"level-of-operation\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"enum\": [\"region\", \"line\"],\n\t\t\t\t\t\"description\": \"PAGE XML hierarchy level granularity to annotate images for\",\n\t\t\t\t\t\"default\": \"region\"\n\t\t\t\t},\n\t\t\t\t\"dpi\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"float\",\n\t\t\t\t\t\"description\": \"pixel density in dots per inch (overrides any meta-data in the images); disabled when zero or negative\",\n\t\t\t\t\t\"default\": 0\n\t\t\t\t},\n\t\t\t\t\"min_fraction\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"float\",\n\t\t\t\t\t\"description\": \"share of foreground pixels that must be retained by the largest label\",\n\t\t\t\t\t\"default\": 0.7\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"ocrd-cis-ocropy-resegment\": {\n\t\t\t\"executable\": \"ocrd-cis-ocropy-resegment\",\n\t\t\t\"categories\": [\n\t\t\t\t\"Layout analysis\"\n\t\t\t],\n\t\t\t\"steps\": [\n\t\t\t\t\"layout/segmentation/line\"\n\t\t\t],\n\t\t\t\"input_file_grp\": [\n\t\t\t\t\"OCR-D-SEG-LINE\"\n\t\t\t],\n\t\t\t\"output_file_grp\": [\n\t\t\t\t\"OCR-D-SEG-LINE\"\n\t\t\t],\n\t\t\t\"description\": \"Resegment text lines\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"level-of-operation\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"enum\": [\"page\", \"region\"],\n\t\t\t\t\t\"description\": \"PAGE XML hierarchy level to segment textlines in ('region' abides by existing text region boundaries, 'page' optimises lines in the whole page once\",\n\t\t\t\t\t\"default\": \"page\"\n\t\t\t\t},\n\t\t\t\t\"method\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"enum\": [\"lineest\", \"baseline\", \"ccomps\"],\n\t\t\t\t\t\"description\": \"source for new line polygon candidates ('lineest' for line estimation, i.e. how Ocropy would have segmented text lines; 'baseline' tries to re-polygonize from the baseline annotation; 'ccomps' avoids crossing connected components by majority rule)\",\n\t\t\t\t\t\"default\": \"lineest\"\n\t\t\t\t},\n\t\t\t\t\"dpi\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"float\",\n\t\t\t\t\t\"description\": \"pixel density in dots per inch (overrides any meta-data in the images); disabled when zero or negative\",\n\t\t\t\t\t\"default\": 0\n\t\t\t\t},\n\t\t\t\t\"min_fraction\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"float\",\n\t\t\t\t\t\"description\": \"share of foreground pixels that must be retained by the output polygons\",\n\t\t\t\t\t\"default\": 0.75\n\t\t\t\t},\n\t\t\t\t\"extend_margins\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"integer\",\n\t\t\t\t\t\"description\": \"number of pixels to extend the input polygons in all directions\",\n\t\t\t\t\t\"default\": 3\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"ocrd-cis-ocropy-dewarp\": {\n\t\t\t\"executable\": \"ocrd-cis-ocropy-dewarp\",\n\t\t\t\"categories\": [\n\t\t\t\t\"Image preprocessing\"\n\t\t\t],\n\t\t\t\"steps\": [\n\t\t\t\t\"preprocessing/optimization/dewarping\"\n\t\t\t],\n\t\t\t\"description\": \"Dewarp line images with ocropy\",\n\t\t\t\"input_file_grp\": [\n\t\t\t\t\"OCR-D-SEG-LINE\"\n\t\t\t],\n\t\t\t\"output_file_grp\": [\n\t\t\t\t\"OCR-D-SEG-LINE\"\n\t\t\t],\n\t\t\t\"parameters\": {\n\t\t\t\t\"dpi\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"float\",\n\t\t\t\t\t\"description\": \"pixel density in dots per inch (overrides any meta-data in the images); disabled when zero or negative\",\n\t\t\t\t\t\"default\": 0\n\t\t\t\t},\n\t\t\t\t\"range\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"float\",\n\t\t\t\t\t\"description\": \"maximum vertical disposition or maximum margin (will be multiplied by mean centerline deltas to yield pixels); also the mean vertical padding\",\n\t\t\t\t\t\"default\": 4.0\n\t\t\t\t},\n\t\t\t\t\"smoothness\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"float\",\n\t\t\t\t\t\"description\": \"kernel size (relative to image height) of horizontal blur applied to foreground to find the center line; the smaller the more dynamic (0.1 would be a better default)\",\n\t\t\t\t\t\"default\": 1.0\n\t\t\t\t},\n\t\t\t\t\"max_neighbour\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"float\",\n\t\t\t\t\t\"description\": \"maximum rate of foreground pixels intruding from neighbouring lines (line will not be processed above that)\",\n\t\t\t\t\t\"default\": 0.05\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"ocrd-cis-ocropy-recognize\": {\n\t\t\t\"executable\": \"ocrd-cis-ocropy-recognize\",\n\t\t\t\"categories\": [\n\t\t\t\t\"Text recognition and optimization\"\n\t\t\t],\n\t\t\t\"steps\": [\n\t\t\t\t\"recognition/text-recognition\"\n\t\t\t],\n\t\t\t\"description\": \"Recognize text in (binarized+deskewed+dewarped) lines with ocropy\",\n\t\t\t\"input_file_grp\": [\n\t\t\t\t\"OCR-D-SEG-LINE\",\n\t\t\t\t\"OCR-D-SEG-WORD\",\n\t\t\t\t\"OCR-D-SEG-GLYPH\"\n\t\t\t],\n\t\t\t\"output_file_grp\": [\n\t\t\t\t\"OCR-D-OCR-OCRO\"\n\t\t\t],\n\t\t\t\"parameters\": {\n\t\t\t\t\"textequiv_level\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"enum\": [\"line\", \"word\", \"glyph\"],\n\t\t\t\t\t\"description\": \"PAGE XML hierarchy level granularity to add the TextEquiv results to\",\n\t\t\t\t\t\"default\": \"line\"\n\t\t\t\t},\n\t\t\t\t\"model\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"ocropy model to apply (e.g. fraktur.pyrnn)\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"ocrd-cis-ocropy-rec\": {\n\t\t\t\"executable\": \"ocrd-cis-ocropy-rec\",\n\t\t\t\"categories\": [\n\t\t\t\t\"Text recognition and optimization\"\n\t\t\t],\n\t\t\t\"steps\": [\n\t\t\t\t\"recognition/text-recognition\"\n\t\t\t],\n\t\t\t\"input_file_grp\": [\n\t\t\t\t\"OCR-D-GT-SEG-BLOCK\",\n\t\t\t\t\"OCR-D-SEG-BLOCK\"\n\t\t\t],\n\t\t\t\"description\": \"Recognize text snippets\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"model\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"ocropy model to apply (e.g. fraktur.pyrnn)\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"ocrd-cis-ocropy-segment\": {\n\t\t\t\"executable\": \"ocrd-cis-ocropy-segment\",\n\t\t\t\"categories\": [\n\t\t\t\t\"Layout analysis\"\n\t\t\t],\n\t\t\t\"steps\": [\n\t\t\t\t\"layout/segmentation/region\",\n\t\t\t\t\"layout/segmentation/line\"\n\t\t\t],\n\t\t\t\"input_file_grp\": [\n\t\t\t\t\"OCR-D-GT-SEG-BLOCK\",\n\t\t\t\t\"OCR-D-SEG-BLOCK\"\n\t\t\t],\n\t\t\t\"output_file_grp\": [\n\t\t\t\t\"OCR-D-SEG-LINE\"\n\t\t\t],\n\t\t\t\"description\": \"Segment pages into regions and lines, tables into cells and lines, or regions into lines with ocropy\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"dpi\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"float\",\n\t\t\t\t\t\"description\": \"pixel density in dots per inch (overrides any meta-data in the images); disabled when zero or negative; when disabled and no meta-data is found, 300 is assumed\",\n\t\t\t\t\t\"default\": 0\n\t\t\t\t},\n\t\t\t\t\"level-of-operation\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"enum\": [\"page\", \"table\", \"region\"],\n\t\t\t\t\t\"description\": \"PAGE XML hierarchy level to read images from and add elements to\",\n\t\t\t\t\t\"default\": \"region\"\n\t\t\t\t},\n\t\t\t\t\"maxcolseps\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"integer\",\n\t\t\t\t\t\"default\": 20,\n\t\t\t\t\t\"description\": \"(when operating on the page/table level) maximum number of white/background column separators to detect, counted piece-wise\"\n\t\t\t\t},\n\t\t\t\t\"maxseps\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"integer\",\n\t\t\t\t\t\"default\": 20,\n\t\t\t\t\t\"description\": \"(when operating on the page/table level) number of black/foreground column separators to detect (and suppress), counted piece-wise\"\n\t\t\t\t},\n\t\t\t\t\"maximages\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"integer\",\n\t\t\t\t\t\"default\": 10,\n\t\t\t\t\t\"description\": \"(when operating on the page level) maximum number of black/foreground very large components to detect (and suppress), counted piece-wise\"\n\t\t\t\t},\n\t\t\t\t\"csminheight\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"integer\",\n\t\t\t\t\t\"default\": 4,\n\t\t\t\t\t\"description\": \"(when operating on the page/table level) minimum height of white/background or black/foreground column separators in multiples of scale/capheight, counted piece-wise\"\n\t\t\t\t},\n\t\t\t\t\"hlminwidth\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"integer\",\n\t\t\t\t\t\"default\": 10,\n\t\t\t\t\t\"description\": \"(when operating on the page/table level) minimum width of black/foreground horizontal separators in multiples of scale/capheight, counted piece-wise\"\n\t\t\t\t},\n\t\t\t\t\"gap_height\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"float\",\n\t\t\t\t\t\"default\": 0.01,\n\t\t\t\t\t\"description\": \"(when operating on the page/table level) largest minimum pixel average in the horizontal or vertical profiles (across the binarized image) to still be regarded as a gap during recursive X-Y cut from lines to regions; needs to be larger when more foreground noise is present, reduce to avoid mistaking text for noise\"\n\t\t\t\t},\n\t\t\t\t\"gap_width\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"float\",\n\t\t\t\t\t\"default\": 1.5,\n\t\t\t\t\t\"description\": \"(when operating on the page/table level) smallest width in multiples of scale/capheight of a valley in the horizontal or vertical profiles (across the binarized image) to still be regarded as a gap during recursive X-Y cut from lines to regions; needs to be smaller when more foreground noise is present, increase to avoid mistaking inter-line as paragraph gaps and inter-word as inter-column gaps\"\n\t\t\t\t},\n\t\t\t\t\"overwrite_order\": {\n\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\"default\": true,\n\t\t\t\t\t\"description\": \"(when operating on the page/table level) remove any references for existing TextRegion elements within the top (page/table) reading order; otherwise append\"\n\t\t\t\t},\n\t\t\t\t\"overwrite_separators\": {\n\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\"default\": true,\n\t\t\t\t\t\"description\": \"(when operating on the page/table level) remove any existing SeparatorRegion elements; otherwise append\"\n\t\t\t\t},\n\t\t\t\t\"overwrite_regions\": {\n\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\"default\": true,\n\t\t\t\t\t\"description\": \"(when operating on the page/table level) remove any existing TextRegion elements; otherwise append\"\n\t\t\t\t},\n\t\t\t\t\"overwrite_lines\": {\n\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\"default\": true,\n\t\t\t\t\t\"description\": \"(when operating on the region level) remove any existing TextLine elements; otherwise append\"\n\t\t\t\t},\n\t\t\t\t\"spread\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"float\",\n\t\t\t\t\t\"default\": 2.4,\n\t\t\t\t\t\"description\": \"distance in points (pt) from the foreground to project text line (or text region) labels into the background for polygonal contours; if zero, project half a scale/capheight\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"ocrd-cis-ocropy-train\": {\n\t\t\t\"executable\": \"ocrd-cis-ocropy-train\",\n\t\t\t\"categories\": [\n\t\t\t\t\"Text recognition and optimization\"\n\t\t\t],\n\t\t\t\"steps\": [\n\t\t\t\t\"recognition/text-recognition\"\n\t\t\t],\n\t\t\t\"input_file_grp\": [\n\t\t\t\t\"OCR-D-GT-SEG-BLOCK\",\n\t\t\t\t\"OCR-D-SEG-BLOCK\"\n\t\t\t],\n\t\t\t\"description\": \"train model with ground truth from mets data\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"textequiv_level\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"PAGE XML hierarchy level granularity\",\n\t\t\t\t\t\"enum\": [\"line\", \"word\", \"glyph\"],\n\t\t\t\t\t\"default\": \"line\"\n\t\t\t\t},\n\t\t\t\t\"model\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"load model or crate new one (e.g. fraktur.pyrnn)\"\n\t\t\t\t},\n\t\t\t\t\"ntrain\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"integer\",\n\t\t\t\t\t\"description\": \"lines to train before stopping\",\n\t\t\t\t\t\"default\": 1000000\n\t\t\t\t},\n\t\t\t\t\"outputpath\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"(existing) path for the trained model\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"ocrd-cis-align\": {\n\t\t\t\"executable\": \"ocrd-cis-align\",\n\t\t\t\"categories\": [\n\t\t\t\t\"Text recognition and optimization\"\n\t\t\t],\n\t\t\t\"steps\": [\n\t\t\t\t\"recognition/post-correction\"\n\t\t\t],\n\t\t\t\"input_file_grp\": [\n\t\t\t\t\"OCR-D-OCR-1\",\n\t\t\t\t\"OCR-D-OCR-2\",\n\t\t\t\t\"OCR-D-OCR-N\"\n\t\t\t],\n\t\t\t\"output_file_grp\": [\n\t\t\t\t\"OCR-D-ALIGNED\"\n\t\t\t],\n\t\t\t\"description\": \"Align multiple OCRs and/or GTs\"\n\t\t},\n\t\t\"ocrd-cis-postcorrect\": {\n\t\t\t\"executable\": \"ocrd-cis-postcorrect\",\n\t\t\t\"categories\": [\n\t\t\t\t\"Text recognition and optimization\"\n\t\t\t],\n\t\t\t\"steps\": [\n\t\t\t\t\"recognition/post-correction\"\n\t\t\t],\n\t\t\t\"description\": \"Post correct OCR results\",\n\t\t\t\"input_file_grp\": [\n\t\t\t\t\"OCR-D-LINE-ALIGNED\"\n\t\t\t],\n\t\t\t\"output_file_grp\": [\n\t\t\t\t\"OCR-D-POST-CORRECTED\"\n\t\t\t],\n\t\t\t\"parameters\": {\n\t\t\t\t\"maxCandidates\": {\n\t\t\t\t\t\"description\": \"Maximum number of considered correction candidates per suspicious token\",\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"integer\",\n\t\t\t\t\t\"default\": 10\n\t\t\t\t},\n\t\t\t\t\"profilerPath\": {\n\t\t\t\t\t\"description\": \"Path to the profiler executable\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t},\n\t\t\t\t\"profilerConfig\": {\n\t\t\t\t\t\"description\": \"Path to the profiler's language config file\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t},\n\t\t\t\t\"model\": {\n\t\t\t\t\t\"description\": \"Path to the post correction model file\",\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"required\": true\n\t\t\t\t},\n\t\t\t\t\"nOCR\": {\n\t\t\t\t\t\"description\": \"Number of parallel OCR's to use for the post correction\",\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"format\": \"integer\",\n\t\t\t\t\t\"default\": 1\n\t\t\t\t},\n\t\t\t\t\"runLE\": {\n\t\t\t\t\t\"description\": \"Do run the lexicon extension step for the post correction\",\n  \t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\"default\": false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "setup.py": "\"\"\"\nInstalls:\n    - ocrd-cis-align\n    - ocrd-cis-postcorrect\n    - ocrd-cis-data\n    - ocrd-cis-ocropy-clip\n    - ocrd-cis-ocropy-denoise\n    - ocrd-cis-ocropy-deskew\n    - ocrd-cis-ocropy-binarize\n    - ocrd-cis-ocropy-resegment\n    - ocrd-cis-ocropy-segment\n    - ocrd-cis-ocropy-dewarp\n    - ocrd-cis-ocropy-recognize\n    - ocrd-cis-ocropy-train\n\"\"\"\n\nimport codecs\nimport json\nfrom setuptools import setup\nfrom setuptools import find_packages\n\nwith codecs.open('README.md', encoding='utf-8') as f:\n    README = f.read()\n\nwith open('./ocrd-tool.json', 'r') as f:\n    version = json.load(f)['version']\n\nsetup(\n    name='ocrd_cis',\n    version=version,\n    description='CIS OCR-D command line tools',\n    long_description=README,\n    long_description_content_type='text/markdown',\n    author='Florian Fink, Tobias Englmeier, Christoph Weber',\n    author_email='finkf@cis.lmu.de, englmeier@cis.lmu.de, web_chris@msn.com',\n    url='https://github.com/cisocrgroup/ocrd_cis',\n    license='MIT',\n    packages=find_packages(),\n    include_package_data=True,\n    install_requires=[\n        'ocrd>=2.30',\n        'click',\n        'scipy',\n        'numpy>=1.17.0',\n        'pillow>=7.1.2',\n        'shapely>=1.7.1,<1.8',\n        'scikit-image',\n        'alphashape',\n        'opencv-python-headless',\n        'python-Levenshtein',\n        'calamari_ocr == 0.3.5'\n    ],\n    extras_require={\n        'debug': ['matplotlib>3.0.0'],\n    },\n    package_data={\n        '': ['*.json', '*.yml', '*.yaml', '*.csv.gz', '*.jar', '*.zip'],\n    },\n    entry_points={\n        'console_scripts': [\n            'ocrd-cis-align=ocrd_cis.align.cli:ocrd_cis_align',\n            'ocrd-cis-postcorrect=ocrd_cis.postcorrect.cli:ocrd_cis_postcorrect',\n            'ocrd-cis-data=ocrd_cis.data.__main__:main',\n            'ocrd-cis-ocropy-binarize=ocrd_cis.ocropy.cli:ocrd_cis_ocropy_binarize',\n            'ocrd-cis-ocropy-clip=ocrd_cis.ocropy.cli:ocrd_cis_ocropy_clip',\n            'ocrd-cis-ocropy-denoise=ocrd_cis.ocropy.cli:ocrd_cis_ocropy_denoise',\n            'ocrd-cis-ocropy-deskew=ocrd_cis.ocropy.cli:ocrd_cis_ocropy_deskew',\n            'ocrd-cis-ocropy-dewarp=ocrd_cis.ocropy.cli:ocrd_cis_ocropy_dewarp',\n            'ocrd-cis-ocropy-recognize=ocrd_cis.ocropy.cli:ocrd_cis_ocropy_recognize',\n            'ocrd-cis-ocropy-resegment=ocrd_cis.ocropy.cli:ocrd_cis_ocropy_resegment',\n            'ocrd-cis-ocropy-segment=ocrd_cis.ocropy.cli:ocrd_cis_ocropy_segment',\n            'ocrd-cis-ocropy-train=ocrd_cis.ocropy.cli:ocrd_cis_ocropy_train',\n        ]\n    },\n)\n"
        },
        "git": {
            "last_commit": "Fri Mar 4 12:18:56 2022 +0100",
            "latest_tag": "v0.1.5",
            "number_of_commits": "633",
            "url": "https://github.com/cisocrgroup/ocrd_cis"
        },
        "name": "ocrd_cis",
        "ocrd_tool": {
            "git_url": "https://github.com/cisocrgroup/ocrd_cis",
            "tools": {
                "ocrd-cis-align": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "Align multiple OCRs and/or GTs",
                    "executable": "ocrd-cis-align",
                    "input_file_grp": [
                        "OCR-D-OCR-1",
                        "OCR-D-OCR-2",
                        "OCR-D-OCR-N"
                    ],
                    "output_file_grp": [
                        "OCR-D-ALIGNED"
                    ],
                    "steps": [
                        "recognition/post-correction"
                    ]
                },
                "ocrd-cis-ocropy-binarize": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Binarize (and optionally deskew/despeckle) pages / regions / lines with ocropy",
                    "executable": "ocrd-cis-ocropy-binarize",
                    "input_file_grp": [
                        "OCR-D-IMG",
                        "OCR-D-SEG-BLOCK",
                        "OCR-D-SEG-LINE"
                    ],
                    "output_file_grp": [
                        "OCR-D-IMG-BIN",
                        "OCR-D-SEG-BLOCK",
                        "OCR-D-SEG-LINE"
                    ],
                    "parameters": {
                        "dpi": {
                            "default": 0,
                            "description": "pixel density in dots per inch (overrides any meta-data in the images); disabled when zero or negative",
                            "format": "float",
                            "type": "number"
                        },
                        "grayscale": {
                            "default": false,
                            "description": "for the 'ocropy' method, produce grayscale-normalized instead of thresholded image",
                            "type": "boolean"
                        },
                        "level-of-operation": {
                            "default": "page",
                            "description": "PAGE XML hierarchy level granularity to annotate images for",
                            "enum": [
                                "page",
                                "table",
                                "region",
                                "line"
                            ],
                            "type": "string"
                        },
                        "maxskew": {
                            "default": 0.0,
                            "description": "modulus of maximum skewing angle (in degrees) to detect (larger will be slower, 0 will deactivate deskewing)",
                            "format": "float",
                            "type": "number"
                        },
                        "method": {
                            "default": "ocropy",
                            "description": "binarization method to use (only 'ocropy' will include deskewing and denoising)",
                            "enum": [
                                "none",
                                "global",
                                "otsu",
                                "gauss-otsu",
                                "ocropy"
                            ],
                            "type": "string"
                        },
                        "noise_maxsize": {
                            "default": 0,
                            "description": "maximum pixel number for connected components to regard as noise (0 will deactivate denoising)",
                            "format": "int",
                            "type": "number"
                        },
                        "threshold": {
                            "default": 0.5,
                            "description": "for the 'ocropy' and ' global' method, black/white threshold to apply on the whitelevel normalized image (the larger the more/heavier foreground)",
                            "format": "float",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/binarization",
                        "preprocessing/optimization/grayscale_normalization",
                        "preprocessing/optimization/deskewing"
                    ]
                },
                "ocrd-cis-ocropy-clip": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Clip text regions / lines at intersections with neighbours",
                    "executable": "ocrd-cis-ocropy-clip",
                    "input_file_grp": [
                        "OCR-D-SEG-BLOCK",
                        "OCR-D-SEG-LINE"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-BLOCK",
                        "OCR-D-SEG-LINE"
                    ],
                    "parameters": {
                        "dpi": {
                            "default": 0,
                            "description": "pixel density in dots per inch (overrides any meta-data in the images); disabled when zero or negative",
                            "format": "float",
                            "type": "number"
                        },
                        "level-of-operation": {
                            "default": "region",
                            "description": "PAGE XML hierarchy level granularity to annotate images for",
                            "enum": [
                                "region",
                                "line"
                            ],
                            "type": "string"
                        },
                        "min_fraction": {
                            "default": 0.7,
                            "description": "share of foreground pixels that must be retained by the largest label",
                            "format": "float",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "layout/segmentation/region",
                        "layout/segmentation/line"
                    ]
                },
                "ocrd-cis-ocropy-denoise": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Despeckle pages / regions / lines with ocropy",
                    "executable": "ocrd-cis-ocropy-denoise",
                    "input_file_grp": [
                        "OCR-D-IMG",
                        "OCR-D-SEG-BLOCK",
                        "OCR-D-SEG-LINE"
                    ],
                    "output_file_grp": [
                        "OCR-D-IMG-DESPECK",
                        "OCR-D-SEG-BLOCK",
                        "OCR-D-SEG-LINE"
                    ],
                    "parameters": {
                        "dpi": {
                            "default": 0,
                            "description": "pixel density in dots per inch (overrides any meta-data in the images); disabled when zero or negative",
                            "format": "float",
                            "type": "number"
                        },
                        "level-of-operation": {
                            "default": "page",
                            "description": "PAGE XML hierarchy level granularity to annotate images for",
                            "enum": [
                                "page",
                                "region",
                                "line"
                            ],
                            "type": "string"
                        },
                        "noise_maxsize": {
                            "default": 3.0,
                            "description": "maximum size in points (pt) for connected components to regard as noise (0 will deactivate denoising)",
                            "format": "float",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/despeckling"
                    ]
                },
                "ocrd-cis-ocropy-deskew": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Deskew regions with ocropy (by annotating orientation angle and adding AlternativeImage)",
                    "executable": "ocrd-cis-ocropy-deskew",
                    "input_file_grp": [
                        "OCR-D-SEG-BLOCK",
                        "OCR-D-SEG-LINE"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-BLOCK",
                        "OCR-D-SEG-LINE"
                    ],
                    "parameters": {
                        "level-of-operation": {
                            "default": "region",
                            "description": "PAGE XML hierarchy level granularity to annotate images for",
                            "enum": [
                                "page",
                                "table",
                                "region"
                            ],
                            "type": "string"
                        },
                        "maxskew": {
                            "default": 5.0,
                            "description": "modulus of maximum skewing angle to detect (larger will be slower, 0 will deactivate deskewing)",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/deskewing"
                    ]
                },
                "ocrd-cis-ocropy-dewarp": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Dewarp line images with ocropy",
                    "executable": "ocrd-cis-ocropy-dewarp",
                    "input_file_grp": [
                        "OCR-D-SEG-LINE"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-LINE"
                    ],
                    "parameters": {
                        "dpi": {
                            "default": 0,
                            "description": "pixel density in dots per inch (overrides any meta-data in the images); disabled when zero or negative",
                            "format": "float",
                            "type": "number"
                        },
                        "max_neighbour": {
                            "default": 0.05,
                            "description": "maximum rate of foreground pixels intruding from neighbouring lines (line will not be processed above that)",
                            "format": "float",
                            "type": "number"
                        },
                        "range": {
                            "default": 4.0,
                            "description": "maximum vertical disposition or maximum margin (will be multiplied by mean centerline deltas to yield pixels); also the mean vertical padding",
                            "format": "float",
                            "type": "number"
                        },
                        "smoothness": {
                            "default": 1.0,
                            "description": "kernel size (relative to image height) of horizontal blur applied to foreground to find the center line; the smaller the more dynamic (0.1 would be a better default)",
                            "format": "float",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/dewarping"
                    ]
                },
                "ocrd-cis-ocropy-rec": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "Recognize text snippets",
                    "executable": "ocrd-cis-ocropy-rec",
                    "input_file_grp": [
                        "OCR-D-GT-SEG-BLOCK",
                        "OCR-D-SEG-BLOCK"
                    ],
                    "parameters": {
                        "model": {
                            "description": "ocropy model to apply (e.g. fraktur.pyrnn)",
                            "type": "string"
                        }
                    },
                    "steps": [
                        "recognition/text-recognition"
                    ]
                },
                "ocrd-cis-ocropy-recognize": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "Recognize text in (binarized+deskewed+dewarped) lines with ocropy",
                    "executable": "ocrd-cis-ocropy-recognize",
                    "input_file_grp": [
                        "OCR-D-SEG-LINE",
                        "OCR-D-SEG-WORD",
                        "OCR-D-SEG-GLYPH"
                    ],
                    "output_file_grp": [
                        "OCR-D-OCR-OCRO"
                    ],
                    "parameters": {
                        "model": {
                            "description": "ocropy model to apply (e.g. fraktur.pyrnn)",
                            "type": "string"
                        },
                        "textequiv_level": {
                            "default": "line",
                            "description": "PAGE XML hierarchy level granularity to add the TextEquiv results to",
                            "enum": [
                                "line",
                                "word",
                                "glyph"
                            ],
                            "type": "string"
                        }
                    },
                    "steps": [
                        "recognition/text-recognition"
                    ]
                },
                "ocrd-cis-ocropy-resegment": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Resegment text lines",
                    "executable": "ocrd-cis-ocropy-resegment",
                    "input_file_grp": [
                        "OCR-D-SEG-LINE"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-LINE"
                    ],
                    "parameters": {
                        "dpi": {
                            "default": 0,
                            "description": "pixel density in dots per inch (overrides any meta-data in the images); disabled when zero or negative",
                            "format": "float",
                            "type": "number"
                        },
                        "extend_margins": {
                            "default": 3,
                            "description": "number of pixels to extend the input polygons in all directions",
                            "format": "integer",
                            "type": "number"
                        },
                        "level-of-operation": {
                            "default": "page",
                            "description": "PAGE XML hierarchy level to segment textlines in ('region' abides by existing text region boundaries, 'page' optimises lines in the whole page once",
                            "enum": [
                                "page",
                                "region"
                            ],
                            "type": "string"
                        },
                        "method": {
                            "default": "lineest",
                            "description": "source for new line polygon candidates ('lineest' for line estimation, i.e. how Ocropy would have segmented text lines; 'baseline' tries to re-polygonize from the baseline annotation; 'ccomps' avoids crossing connected components by majority rule)",
                            "enum": [
                                "lineest",
                                "baseline",
                                "ccomps"
                            ],
                            "type": "string"
                        },
                        "min_fraction": {
                            "default": 0.75,
                            "description": "share of foreground pixels that must be retained by the output polygons",
                            "format": "float",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "layout/segmentation/line"
                    ]
                },
                "ocrd-cis-ocropy-segment": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Segment pages into regions and lines, tables into cells and lines, or regions into lines with ocropy",
                    "executable": "ocrd-cis-ocropy-segment",
                    "input_file_grp": [
                        "OCR-D-GT-SEG-BLOCK",
                        "OCR-D-SEG-BLOCK"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-LINE"
                    ],
                    "parameters": {
                        "csminheight": {
                            "default": 4,
                            "description": "(when operating on the page/table level) minimum height of white/background or black/foreground column separators in multiples of scale/capheight, counted piece-wise",
                            "format": "integer",
                            "type": "number"
                        },
                        "dpi": {
                            "default": 0,
                            "description": "pixel density in dots per inch (overrides any meta-data in the images); disabled when zero or negative; when disabled and no meta-data is found, 300 is assumed",
                            "format": "float",
                            "type": "number"
                        },
                        "gap_height": {
                            "default": 0.01,
                            "description": "(when operating on the page/table level) largest minimum pixel average in the horizontal or vertical profiles (across the binarized image) to still be regarded as a gap during recursive X-Y cut from lines to regions; needs to be larger when more foreground noise is present, reduce to avoid mistaking text for noise",
                            "format": "float",
                            "type": "number"
                        },
                        "gap_width": {
                            "default": 1.5,
                            "description": "(when operating on the page/table level) smallest width in multiples of scale/capheight of a valley in the horizontal or vertical profiles (across the binarized image) to still be regarded as a gap during recursive X-Y cut from lines to regions; needs to be smaller when more foreground noise is present, increase to avoid mistaking inter-line as paragraph gaps and inter-word as inter-column gaps",
                            "format": "float",
                            "type": "number"
                        },
                        "hlminwidth": {
                            "default": 10,
                            "description": "(when operating on the page/table level) minimum width of black/foreground horizontal separators in multiples of scale/capheight, counted piece-wise",
                            "format": "integer",
                            "type": "number"
                        },
                        "level-of-operation": {
                            "default": "region",
                            "description": "PAGE XML hierarchy level to read images from and add elements to",
                            "enum": [
                                "page",
                                "table",
                                "region"
                            ],
                            "type": "string"
                        },
                        "maxcolseps": {
                            "default": 20,
                            "description": "(when operating on the page/table level) maximum number of white/background column separators to detect, counted piece-wise",
                            "format": "integer",
                            "type": "number"
                        },
                        "maximages": {
                            "default": 10,
                            "description": "(when operating on the page level) maximum number of black/foreground very large components to detect (and suppress), counted piece-wise",
                            "format": "integer",
                            "type": "number"
                        },
                        "maxseps": {
                            "default": 20,
                            "description": "(when operating on the page/table level) number of black/foreground column separators to detect (and suppress), counted piece-wise",
                            "format": "integer",
                            "type": "number"
                        },
                        "overwrite_lines": {
                            "default": true,
                            "description": "(when operating on the region level) remove any existing TextLine elements; otherwise append",
                            "type": "boolean"
                        },
                        "overwrite_order": {
                            "default": true,
                            "description": "(when operating on the page/table level) remove any references for existing TextRegion elements within the top (page/table) reading order; otherwise append",
                            "type": "boolean"
                        },
                        "overwrite_regions": {
                            "default": true,
                            "description": "(when operating on the page/table level) remove any existing TextRegion elements; otherwise append",
                            "type": "boolean"
                        },
                        "overwrite_separators": {
                            "default": true,
                            "description": "(when operating on the page/table level) remove any existing SeparatorRegion elements; otherwise append",
                            "type": "boolean"
                        },
                        "spread": {
                            "default": 2.4,
                            "description": "distance in points (pt) from the foreground to project text line (or text region) labels into the background for polygonal contours; if zero, project half a scale/capheight",
                            "format": "float",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "layout/segmentation/region",
                        "layout/segmentation/line"
                    ]
                },
                "ocrd-cis-ocropy-train": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "train model with ground truth from mets data",
                    "executable": "ocrd-cis-ocropy-train",
                    "input_file_grp": [
                        "OCR-D-GT-SEG-BLOCK",
                        "OCR-D-SEG-BLOCK"
                    ],
                    "parameters": {
                        "model": {
                            "description": "load model or crate new one (e.g. fraktur.pyrnn)",
                            "type": "string"
                        },
                        "ntrain": {
                            "default": 1000000,
                            "description": "lines to train before stopping",
                            "format": "integer",
                            "type": "number"
                        },
                        "outputpath": {
                            "description": "(existing) path for the trained model",
                            "type": "string"
                        },
                        "textequiv_level": {
                            "default": "line",
                            "description": "PAGE XML hierarchy level granularity",
                            "enum": [
                                "line",
                                "word",
                                "glyph"
                            ],
                            "type": "string"
                        }
                    },
                    "steps": [
                        "recognition/text-recognition"
                    ]
                },
                "ocrd-cis-postcorrect": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "Post correct OCR results",
                    "executable": "ocrd-cis-postcorrect",
                    "input_file_grp": [
                        "OCR-D-LINE-ALIGNED"
                    ],
                    "output_file_grp": [
                        "OCR-D-POST-CORRECTED"
                    ],
                    "parameters": {
                        "maxCandidates": {
                            "default": 10,
                            "description": "Maximum number of considered correction candidates per suspicious token",
                            "format": "integer",
                            "type": "number"
                        },
                        "model": {
                            "description": "Path to the post correction model file",
                            "required": true,
                            "type": "string"
                        },
                        "nOCR": {
                            "default": 1,
                            "description": "Number of parallel OCR's to use for the post correction",
                            "format": "integer",
                            "type": "number"
                        },
                        "profilerConfig": {
                            "description": "Path to the profiler's language config file",
                            "required": true,
                            "type": "string"
                        },
                        "profilerPath": {
                            "description": "Path to the profiler executable",
                            "required": true,
                            "type": "string"
                        },
                        "runLE": {
                            "default": false,
                            "description": "Do run the lexicon extension step for the post correction",
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "recognition/post-correction"
                    ]
                }
            },
            "version": "0.1.5"
        },
        "ocrd_tool_validate": "<report valid=\"true\">\n</report>",
        "official": true,
        "org_plus_name": "cisocrgroup/ocrd_cis",
        "python": {
            "author": "Florian Fink, Tobias Englmeier, Christoph Weber",
            "author-email": "finkf@cis.lmu.de, englmeier@cis.lmu.de, web_chris@msn.com",
            "name": "ocrd_cis",
            "pypi": {
                "info": {
                    "author": "Florian Fink, Tobias Englmeier, Christoph Weber",
                    "author_email": "finkf@cis.lmu.de, englmeier@cis.lmu.de, web_chris@msn.com",
                    "bugtrack_url": null,
                    "classifiers": [],
                    "description": "[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/cisocrgroup/ocrd_cis.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/cisocrgroup/ocrd_cis/context:python)\n[![Total alerts](https://img.shields.io/lgtm/alerts/g/cisocrgroup/ocrd_cis.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/cisocrgroup/ocrd_cis/alerts/)\n\nContent:\n   * [ocrd_cis](#ocrd_cis)\n      * [Introduction](#introduction)\n      * [Installation](#installation)\n      * [Profiler](#profiler)\n      * [Usage](#usage)\n         * [ocrd-cis-postcorrect](#ocrd-cis-postcorrect)\n         * [ocrd-cis-align](#ocrd-cis-align)\n         * [ocrd-cis-data](#ocrd-cis-data)\n         * [Trainining](#trainining)\n         * [ocrd-cis-ocropy-train](#ocrd-cis-ocropy-train)\n         * [ocrd-cis-ocropy-clip](#ocrd-cis-ocropy-clip)\n         * [ocrd-cis-ocropy-resegment](#ocrd-cis-ocropy-resegment)\n         * [ocrd-cis-ocropy-segment](#ocrd-cis-ocropy-segment)\n         * [ocrd-cis-ocropy-deskew](#ocrd-cis-ocropy-deskew)\n         * [ocrd-cis-ocropy-denoise](#ocrd-cis-ocropy-denoise)\n         * [ocrd-cis-ocropy-binarize](#ocrd-cis-ocropy-binarize)\n         * [ocrd-cis-ocropy-dewarp](#ocrd-cis-ocropy-dewarp)\n         * [ocrd-cis-ocropy-recognize](#ocrd-cis-ocropy-recognize)\n         * [Tesserocr](#tesserocr)\n      * [Workflow configuration](#workflow-configuration)\n      * [Testing](#testing)\n   * [Miscellaneous](#miscellaneous)\n      * [OCR-D workspace](#ocr-d-workspace)\n      * [OCR-D links](#ocr-d-links)\n\n# ocrd_cis\n\n[CIS](http://www.cis.lmu.de) [OCR-D](http://ocr-d.de) command line\ntools for the automatic post-correction of OCR-results.\n\n## Introduction\n`ocrd_cis` contains different tools for the automatic post-correction\nof OCR results.  It contains tools for the training, evaluation and\nexecution of the post-correction.  Most of the tools are following the\n[OCR-D CLI conventions](https://ocr-d.de/en/spec/cli).\n\nAdditionally, there is a helper tool to align multiple OCR results,\nas well as an improved version of [Ocropy](https://github.com/tmbarchive/ocropy)\nthat works with Python 3 and is also wrapped for [OCR-D](https://ocr-d.de/en/spec/).\n\n## Installation\nThere are 2 ways to install the `ocrd_cis` tools:\n * normal packaging:\n  ```sh\n  make install # or equally: pip install -U pip .\n  ```\n  (Installs `ocrd_cis` including its Python dependencies\n   from the current directory to the Python package directory.)\n * editable mode:\n  ```sh\n  make install-devel # or equally: pip install -e -U pip .\n  ```\n  (Installs `ocrd_cis` including its Python dependencies\n   from the current directory.)\n\nIt is possible (and recommended) to install `ocrd_cis` in a custom user directory\n(instead of system-wide) by using `virtualenv` (or `venv`):\n```sh\n # create venv:\n python3 -m venv venv-dir # where \"venv-dir\" could be any path name\n # enter venv in current shell:\n source venv-dir/bin/activate\n # install ocrd_cis:\n make install # or any other way (see above)\n # use ocrd_cis:\n ocrd-cis-ocropy-binarize ...\n # finally, leave venv:\n deactivate\n```\n\n## Profiler\nThe post correction is dependent on the language\n[profiler](https://github.com/cisocrgroup/Profiler) and its laguage\nconfigurations to generate corrections for suspicious words.  In order\nto use the post correction a profiler with according language\nconfigruations have to be present on the system.  You can refer to our\n[manuals](https://github.com/cisocrgroup/Resources/tree/master/manuals)\nand our [lexical\nresources](https://github.com/cisocrgroup/Resources/tree/master/lexica)\nfor more information.\n\nIf you use docker you can use the preinstalled profiler from within\nthe docker-container.  The profiler is installed to `/apps/profiler`\nand the language configurations lie in `/etc/profiler/languages` in\nthe container image.\n\n## Usage\nMost tools follow the [OCR-D specifications](https://ocr-d.de/en/spec),\n(which makes them [OCR-D _processors_](https://ocr-d.de/en/spec/cli),)\ni.e. they accept the command-line options `--input-file-grp`, `--output-file-grp`,\n`--page-id`, `--parameter`, `--mets`, `--log-level` (each with an argument).\nInvoke with `--help` to get self-documentation. \n\nSome of the processors (most notably the alignment tool) expect a comma-seperated list\nof multiple input file groups, or multiple output file groups.\n\nThe [ocrd-tool.json](ocrd_cis/ocrd-tool.json) contains a formal\ndescription of all the processors along with the parameter config file\naccepted by their `--parameter` argument.\n\n### ocrd-cis-postcorrect\nThis processor runs the post correction using a pre-trained model.  If\nadditional support OCRs should be used, models for these OCR steps are\nrequired and must be executed and aligned beforehand (see [the test\nscript](tests/run_postcorrection_test.bash) for an example).\n\nThere is a basic model trained on the OCR-D ground truth.  It gets\ninstalled allongside this module.  You can get the model's install\npath using `ocrd-cis-data -model` (see below for a description of\n`ocrd-cis-data`).  To use this model (or any other model) the `model`\nparameter in the configuration file must be set to the path of the\nmodel to use.  Be aware that the models are trained with a specific\nmaximal number of OCR's (usally 2) and that is not possible to use\nmore OCR's than the number used for training (it is possible to use\nless, though).\n\nArguments:\n * `--parameter` path to configuration file\n * `--input-file-grp` name of the master-OCR file group\n * `--output-file-grp` name of the post-correction file group\n * `--log-level` set log level\n * `--mets` path to METS file in workspace\n\nAs mentioned above in order to use the postcorrection with input from\nmultiple OCR's, some preprocessing steps are needed: firstly the\nadditional OCR recognition has to be done and secondly the multiple\nOCR's have to be aligned (you can also take a look to the function\n`ocrd_cis_align` in the [tests](tests/test_lib.bash)).  Assuming an\noriginal recognition as file group `OCR1` on the segmented document of\nfile group `SEG`, the folloing commands can be used:\n\n```sh\nocrd-ocropus-recognize -I SEG -O OCR2 ... # additional OCR\nocrd-cis-align -I OCR1,OCR2 -O ALGN ... # align OCR1 and OCR2\nocrd-cis-postcorrect -I ALGN -O PC ... # post correction\n```\n\n### ocrd-cis-align\nAligns tokens of multiple input file groups to one output file group.\nThis processor is used to align the master OCR with any additional support\nOCRs.  It accepts a comma-separated list of input file groups, which\nit aligns in order.\n\nArguments:\n * `--parameter` path to configuration file\n * `--input-file-grp` comma seperated list of the input file groups;\n   first input file group is the master OCR; if there is a ground\n   truth (for evaluation) it must be the last file group in the list\n * `--output-file-grp` name of the file group for the aligned result\n * `--log-level` set log level\n * `--mets` path to METS file in workspace\n\n### ocrd-cis-data\nHelper tool to get the path of the installed data files. Usage:\n`ocrd-cis-data [-h|-jar|-3gs|-model|-config]` to get the path of the\njar library, the pre-trained post correction model, the path to the\ndefault 3-grams language model file or the default training\nconfiguration file.  This tool does not follow the OCR-D conventions.\n\n### Trainining\nThere is no dedicated training script provided. Models are trained\nusing the java implementation directly (check out the [training test\nscript](tests/run_training_test.bash) for an example).  Training a\nmodel requires a workspace containing one or more file groups\nconsisting of aligned OCR and ground-truth documents (the last file\ngroup has to be the ground truth).\n\nArguments:\n * `--parameter` path to configuration file\n * `--input-file-grp` name of the input file group to profile\n * `--output-file-grp` name of the output file group where the profile\n   is stored\n * `--log-level` set log level\n * `--mets` path to METS file in the workspace\n\n### ocrd-cis-ocropy-train\nThe [ocropy-train](ocrd_cis/ocropy/train.py) tool can be used to train LSTM models.\nIt takes ground truth from the workspace and saves (image+text) snippets from the corresponding pages.\nThen a model is trained on all snippets for 1 million (or the given number of) randomized iterations from the parameter file.\n\n```sh\njava -jar $(ocrd-cis-data -jar) \\\n\t -c train \\\n\t --input-file-grp OCR1,OCR2,GT \\\n     --log-level DEBUG \\\n\t -m mets.xml \\\n\t --parameter $(ocrd-cis-data -config)\n```\n\n### ocrd-cis-ocropy-clip\nThe [clip](ocrd_cis/ocropy/clip.py) processor can be used to remove intrusions of neighbouring segments in regions / lines of a page.\nIt runs a connected component analysis on every text region / line of every PAGE in the input file group, as well as its overlapping neighbours, and for each binary object of conflict, determines whether it belongs to the neighbour, and can therefore be clipped to the background. It references the resulting segment image files in the output PAGE (via `AlternativeImage`).\n(Use this to suppress separators and neighbouring text.)\n```sh\nocrd-cis-ocropy-clip \\\n  -I OCR-D-SEG-REGION \\\n  -O OCR-D-SEG-REGION-CLIP \\\n  -p '{\"level-of-operation\": \"region\"}'\n```\n\nAvailable parameters are:\n```sh\n   \"level-of-operation\" [string - \"region\"]\n    PAGE XML hierarchy level granularity to annotate images for\n    Possible values: [\"region\", \"line\"]\n   \"dpi\" [number - -1]\n    pixel density in dots per inch (overrides any meta-data in the\n    images); disabled when negative\n   \"min_fraction\" [number - 0.7]\n    share of foreground pixels that must be retained by the largest label\n```\n\n### ocrd-cis-ocropy-resegment\nThe [resegment](ocrd_cis/ocropy/resegment.py) processor can be used to remove overlap between neighbouring lines of a page.\nIt runs a line segmentation on every text region of every PAGE in the input file group, and for each line already annotated, determines the label of largest extent within the original coordinates (polygon outline) in that line, and annotates the resulting coordinates in the output PAGE.\n(Use this to polygonalise text lines that are poorly segmented, e.g. via bounding boxes.)\n```sh\nocrd-cis-ocropy-resegment \\\n  -I OCR-D-SEG-LINE \\\n  -O OCR-D-SEG-LINE-RES \\\n  -p '{\"extend_margins\": 3}'\n```\n\nAvailable parameters are:\n```sh\n   \"dpi\" [number - -1]\n    pixel density in dots per inch (overrides any meta-data in the\n    images); disabled when negative\n   \"min_fraction\" [number - 0.8]\n    share of foreground pixels that must be retained by the largest label\n   \"extend_margins\" [number - 3]\n    number of pixels to extend the input polygons horizontally and\n    vertically before intersecting\n```\n\n### ocrd-cis-ocropy-segment\nThe [segment](ocrd_cis/ocropy/segment.py) processor can be used to segment (pages or) regions of a page into (regions and) lines.\nIt runs a line segmentation on every (page or) text region of every PAGE in the input file group, and adds (text regions containing) `TextLine` elements with the resulting polygon outlines to the annotation of the output PAGE.\n(Does _not_ detect tables.)\n```sh\nocrd-cis-ocropy-segment \\\n  -I OCR-D-SEG-BLOCK \\\n  -O OCR-D-SEG-LINE \\\n  -p '{\"level-of-operation\": \"page\", \"gap_height\": 0.015}'\n```\n\nAvailable parameters are:\n```sh\n   \"dpi\" [number - -1]\n    pixel density in dots per inch (overrides any meta-data in the\n    images); disabled when negative; when disabled and no meta-data is\n    found, 300 is assumed\n   \"level-of-operation\" [string - \"region\"]\n    PAGE XML hierarchy level to read images from and add elements to\n    Possible values: [\"page\", \"table\", \"region\"]\n   \"maxcolseps\" [number - 20]\n    (when operating on the page/table level) maximum number of\n    white/background column separators to detect, counted piece-wise\n   \"maxseps\" [number - 20]\n    (when operating on the page/table level) number of black/foreground\n    column separators to detect (and suppress), counted piece-wise\n   \"maximages\" [number - 10]\n    (when operating on the page level) maximum number of black/foreground\n    very large components to detect (and suppress), counted piece-wise\n   \"csminheight\" [number - 4]\n    (when operating on the page/table level) minimum height of\n    white/background or black/foreground column separators in multiples\n    of scale/capheight, counted piece-wise\n   \"hlminwidth\" [number - 10]\n    (when operating on the page/table level) minimum width of\n    black/foreground horizontal separators in multiples of\n    scale/capheight, counted piece-wise\n   \"gap_height\" [number - 0.01]\n    (when operating on the page/table level) largest minimum pixel\n    average in the horizontal or vertical profiles (across the binarized\n    image) to still be regarded as a gap during recursive X-Y cut from\n    lines to regions; needs to be larger when more foreground noise is\n    present, reduce to avoid mistaking text for noise\n   \"gap_width\" [number - 1.5]\n    (when operating on the page/table level) smallest width in multiples\n    of scale/capheight of a valley in the horizontal or vertical\n    profiles (across the binarized image) to still be regarded as a gap\n    during recursive X-Y cut from lines to regions; needs to be smaller\n    when more foreground noise is present, increase to avoid mistaking\n    inter-line as paragraph gaps and inter-word as inter-column gaps\n   \"overwrite_order\" [boolean - true]\n    (when operating on the page/table level) remove any references for\n    existing TextRegion elements within the top (page/table) reading\n    order; otherwise append\n   \"overwrite_separators\" [boolean - true]\n    (when operating on the page/table level) remove any existing\n    SeparatorRegion elements; otherwise append\n   \"overwrite_regions\" [boolean - true]\n    (when operating on the page/table level) remove any existing\n    TextRegion elements; otherwise append\n   \"overwrite_lines\" [boolean - true]\n    (when operating on the region level) remove any existing TextLine\n    elements; otherwise append\n   \"spread\" [number - 2.4]\n    distance in points (pt) from the foreground to project text line (or\n    text region) labels into the background for polygonal contours; if\n    zero, project half a scale/capheight\n```\n\n### ocrd-cis-ocropy-deskew\nThe [deskew](ocrd_cis/ocropy/deskew.py) processor can be used to deskew pages / regions of a page.\nIt runs a projection profile-based skew estimation on every segment of every PAGE in the input file group and annotates the orientation angle in the output PAGE.\n(Does _not_ include orientation detection.)\n```sh\nocrd-cis-ocropy-deskew \\\n  -I OCR-D-SEG-LINE \\\n  -O OCR-D-SEG-LINE-DES \\\n  -p '{\"level-of-operation\": \"page\", \"maxskew\": 10}'\n```\n\nAvailable parameters are:\n```sh\n   \"maxskew\" [number - 5.0]\n    modulus of maximum skewing angle to detect (larger will be slower, 0\n    will deactivate deskewing)\n   \"level-of-operation\" [string - \"region\"]\n    PAGE XML hierarchy level granularity to annotate images for\n    Possible values: [\"page\", \"region\"]\n```\n\n### ocrd-cis-ocropy-denoise\nThe [denoise](ocrd_cis/ocropy/denoise.py) processor can be used to despeckle pages / regions / lines of a page.\nIt runs a connected component analysis and removes small components (black or white) on every segment of every PAGE in the input file group and references the resulting segment image files in the output PAGE (as `AlternativeImage`).\n```sh\nocrd-cis-ocropy-denoise \\\n  -I OCR-D-SEG-LINE-DES \\\n  -O OCR-D-SEG-LINE-DEN \\\n  -p '{\"noise_maxsize\": 2}'\n```\n\nAvailable parameters are:\n```sh\n   \"noise_maxsize\" [number - 3.0]\n    maximum size in points (pt) for connected components to regard as\n    noise (0 will deactivate denoising)\n   \"dpi\" [number - -1]\n    pixel density in dots per inch (overrides any meta-data in the\n    images); disabled when negative\n   \"level-of-operation\" [string - \"page\"]\n    PAGE XML hierarchy level granularity to annotate images for\n    Possible values: [\"page\", \"region\", \"line\"]\n```\n\n### ocrd-cis-ocropy-binarize\nThe [binarize](ocrd_cis/ocropy/binarize.py) processor can be used to binarize (and optionally denoise and deskew) pages / regions / lines of a page.\nIt runs the \"nlbin\" adaptive whitelevel thresholding on every segment of every PAGE in the input file group and references the resulting segment image files in the output PAGE (as `AlternativeImage`). (If a deskewing angle has already been annotated in a region, the tool respects that and rotates accordingly.) Images can also be produced grayscale-normalized.\n```sh\nocrd-cis-ocropy-binarize \\\n  -I OCR-D-SEG-LINE-DES \\\n  -O OCR-D-SEG-LINE-BIN \\\n  -p '{\"level-of-operation\": \"page\", \"threshold\": 0.7}'\n```\n\nAvailable parameters are:\n```sh\n   \"method\" [string - \"ocropy\"]\n    binarization method to use (only 'ocropy' will include deskewing and\n    denoising)\n    Possible values: [\"none\", \"global\", \"otsu\", \"gauss-otsu\", \"ocropy\"]\n   \"threshold\" [number - 0.5]\n    for the 'ocropy' and ' global' method, black/white threshold to apply\n    on the whitelevel normalized image (the larger the more/heavier\n    foreground)\n   \"grayscale\" [boolean - false]\n    for the 'ocropy' method, produce grayscale-normalized instead of\n    thresholded image\n   \"maxskew\" [number - 0.0]\n    modulus of maximum skewing angle (in degrees) to detect (larger will\n    be slower, 0 will deactivate deskewing)\n   \"noise_maxsize\" [number - 0]\n    maximum pixel number for connected components to regard as noise (0\n    will deactivate denoising)\n   \"level-of-operation\" [string - \"page\"]\n    PAGE XML hierarchy level granularity to annotate images for\n    Possible values: [\"page\", \"region\", \"line\"]\n```\n\n### ocrd-cis-ocropy-dewarp\nThe [dewarp](ocrd_cis/ocropy/dewarp.py) processor can be used to vertically dewarp text lines of a page.\nIt runs the baseline estimation and center normalizer algorithm on every line in every text region of every PAGE in the input file group and references the resulting line image files in the output PAGE (as `AlternativeImage`).\n```sh\nocrd-cis-ocropy-dewarp \\\n  -I OCR-D-SEG-LINE-BIN \\\n  -O OCR-D-SEG-LINE-DEW \\\n  -p '{\"range\": 5}'\n```\n\nAvailable parameters are:\n```sh\n   \"dpi\" [number - -1]\n    pixel density in dots per inch (overrides any meta-data in the\n    images); disabled when negative\n   \"range\" [number - 4.0]\n    maximum vertical disposition or maximum margin (will be multiplied by\n    mean centerline deltas to yield pixels)\n   \"max_neighbour\" [number - 0.05]\n    maximum rate of foreground pixels intruding from neighbouring lines\n    (line will not be processed above that)\n```\n\n### ocrd-cis-ocropy-recognize\nThe [recognize](ocrd_cis/ocropy/recognize.py) processor can be used to recognize the lines / words / glyphs of a page.\nIt runs LSTM optical character recognition on every line in every text region of every PAGE in the input file group and adds the resulting text annotation in the output PAGE.\n```sh\nocrd-cis-ocropy-recognize \\\n  -I OCR-D-SEG-LINE-DEW \\\n  -O OCR-D-OCR-OCRO \\\n  -p '{\"textequiv_level\": \"word\", \"model\": \"fraktur-jze.pyrnn\"}'\n```\n\nAvailable parameters are:\n```sh\n   \"textequiv_level\" [string - \"line\"]\n    PAGE XML hierarchy level granularity to add the TextEquiv results to\n    Possible values: [\"line\", \"word\", \"glyph\"]\n   \"model\" [string]\n    ocropy model to apply (e.g. fraktur.pyrnn)\n```\n\n### Tesserocr\nInstall essential system packages for Tesserocr\n```sh\nsudo apt-get install python3-tk \\\n  tesseract-ocr libtesseract-dev libleptonica-dev \\\n  libimage-exiftool-perl libxml2-utils\n```\n\nThen install Tesserocr from: https://github.com/OCR-D/ocrd_tesserocr\n```sh\npip install -r requirements.txt\npip install .\n```\n\nDownload and move tesseract models from:\nhttps://github.com/tesseract-ocr/tesseract/wiki/Data-Files or use your\nown models and place them into: /usr/share/tesseract-ocr/4.00/tessdata\n\n## Workflow configuration\n\nA decent pipeline might look like this:\n\n1. image normalization/optimization\n1. page-level binarization\n1. page-level cropping\n1. (page-level binarization)\n1. (page-level despeckling)\n1. page-level deskewing\n1. (page-level dewarping)\n1. region segmentation, possibly subdivided into\n   1. text/non-text separation\n   1. text region segmentation (and classification)\n   1. reading order detection\n   1. non-text region classification\n1. region-level clipping\n1. (region-level deskewing)\n1. line segmentation\n1. (line-level clipping or resegmentation)\n1. line-level dewarping\n1. line-level recognition\n1. (line-level alignment and post-correction)\n\nIf GT is used, then cropping/segmentation steps can be omitted.\n\nIf a segmentation is used which does not produce overlapping segments, then clipping/resegmentation can be omitted.\n\n## Testing\nTo run a few basic tests type `make test` (`ocrd_cis` has to be\ninstalled in order to run any tests).\n\n# Miscellaneous\n## OCR-D workspace\n\n* Create a new (empty) workspace: `ocrd workspace init workspace-dir`\n* cd into `workspace-dir`\n* Add new file to workspace: `ocrd workspace add file -G group -i id\n  -m mimetype -g pageId`\n\n## OCR-D links\n\n- [OCR-D](https://ocr-d.github.io)\n- [Github](https://github.com/OCR-D)\n- [Project-page](http://www.ocr-d.de/)\n- [Ground-truth](https://ocr-d-repo.scc.kit.edu/api/v1/metastore/bagit/search)\n\n\n",
                    "description_content_type": "text/markdown",
                    "docs_url": null,
                    "download_url": "",
                    "downloads": {
                        "last_day": -1,
                        "last_month": -1,
                        "last_week": -1
                    },
                    "home_page": "https://github.com/cisocrgroup/ocrd_cis",
                    "keywords": "",
                    "license": "MIT",
                    "maintainer": "",
                    "maintainer_email": "",
                    "name": "ocrd-cis",
                    "package_url": "https://pypi.org/project/ocrd-cis/",
                    "platform": "",
                    "project_url": "https://pypi.org/project/ocrd-cis/",
                    "project_urls": {
                        "Homepage": "https://github.com/cisocrgroup/ocrd_cis"
                    },
                    "release_url": "https://pypi.org/project/ocrd-cis/0.0.10/",
                    "requires_dist": [
                        "ocrd (>=2.10.4)",
                        "click",
                        "scipy",
                        "numpy (>=1.17.0)",
                        "pillow (>=7.1.2)",
                        "shapely",
                        "scikit-image",
                        "opencv-python-headless",
                        "matplotlib (>3.0.0)",
                        "python-Levenshtein",
                        "calamari-ocr (==0.3.5)"
                    ],
                    "requires_python": "",
                    "summary": "CIS OCR-D command line tools",
                    "version": "0.0.10",
                    "yanked": false,
                    "yanked_reason": null
                },
                "last_serial": 7596607,
                "releases": {
                    "0.0.10": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "c3f76ee88a363f7b4810c774f42b0b24",
                                "sha256": "d6a9fc8d153e0f921b7cba630a34dc75fc63c010f61df30e6004f6d30bed3a90"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cis-0.0.10-py2.py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "c3f76ee88a363f7b4810c774f42b0b24",
                            "packagetype": "bdist_wheel",
                            "python_version": "py2.py3",
                            "requires_python": null,
                            "size": 41383443,
                            "upload_time": "2020-06-30T13:56:50",
                            "upload_time_iso_8601": "2020-06-30T13:56:50.548421Z",
                            "url": "https://files.pythonhosted.org/packages/14/c6/eb72d39cdf3e19295176ed78729cc9d206fd3a3ac8eb2d477ce6b8d99a85/ocrd_cis-0.0.10-py2.py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "9c93d9adb64d66af1d17c09590a2ac99",
                                "sha256": "774597b57e3ddad90806eaa6579325a97e0ee60a414dae0f9a90abab66057c56"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cis-0.0.10.tar.gz",
                            "has_sig": false,
                            "md5_digest": "9c93d9adb64d66af1d17c09590a2ac99",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 124240,
                            "upload_time": "2020-06-30T13:56:53",
                            "upload_time_iso_8601": "2020-06-30T13:56:53.601620Z",
                            "url": "https://files.pythonhosted.org/packages/30/a9/22125125e3ef64ca81b92a065d50c96e59a1461b2dc9f351e3c008111c2e/ocrd_cis-0.0.10.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.0.6": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "a186d34dad8d16c13d12af2d0b6d889b",
                                "sha256": "ac2ada13f48b301831e41cba1e9a86b8e10ac2e8f4036ecdda9eb3524e36461c"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cis-0.0.6-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "a186d34dad8d16c13d12af2d0b6d889b",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 34044792,
                            "upload_time": "2019-11-05T19:37:33",
                            "upload_time_iso_8601": "2019-11-05T19:37:33.819139Z",
                            "url": "https://files.pythonhosted.org/packages/f7/e0/5e3953c9243d05859e679bb83bef9c6f08e10fe0eef736fce90bc42657bc/ocrd_cis-0.0.6-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "5c8c3934a2a4fe764c112d8fd12a5ffc",
                                "sha256": "97aea3f172a5eda7272113eb99d55fddda0a96069a20173ea17563d0532bbd55"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cis-0.0.6.tar.gz",
                            "has_sig": false,
                            "md5_digest": "5c8c3934a2a4fe764c112d8fd12a5ffc",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 96645,
                            "upload_time": "2019-11-05T19:37:38",
                            "upload_time_iso_8601": "2019-11-05T19:37:38.406783Z",
                            "url": "https://files.pythonhosted.org/packages/8a/a9/1fab502623c41529c13b4ecbedfe224f35843160ddcef4c527a18cfe73b8/ocrd_cis-0.0.6.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.0.7": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "539c82850462be8013eb31938e7779cf",
                                "sha256": "c3d5898c869ae8c88db28fd52907bcabf1ac0d5cd474f73a30a1ff06615c3dbe"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cis-0.0.7-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "539c82850462be8013eb31938e7779cf",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 34044484,
                            "upload_time": "2019-12-02T15:30:28",
                            "upload_time_iso_8601": "2019-12-02T15:30:28.430896Z",
                            "url": "https://files.pythonhosted.org/packages/38/c3/10637d7c51e3d6a0e5e5004476dcf2de093e1e3bec8452e241dcf1fa595c/ocrd_cis-0.0.7-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "7df03598c04d60203afb00c61ff836da",
                                "sha256": "3629b49d32e1626830b6890f6d47793474fcb3232e4b12c43d5d3f38bb33f08d"
                            },
                            "downloads": -1,
                            "filename": "ocrd_cis-0.0.7.tar.gz",
                            "has_sig": false,
                            "md5_digest": "7df03598c04d60203afb00c61ff836da",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 96590,
                            "upload_time": "2019-12-02T15:30:33",
                            "upload_time_iso_8601": "2019-12-02T15:30:33.037095Z",
                            "url": "https://files.pythonhosted.org/packages/b8/cb/3fdc4daee6b85b732913c012cf41cafaab708b367c3fd5883d0d8e99c1b1/ocrd_cis-0.0.7.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ]
                },
                "urls": [
                    {
                        "comment_text": "",
                        "digests": {
                            "md5": "c3f76ee88a363f7b4810c774f42b0b24",
                            "sha256": "d6a9fc8d153e0f921b7cba630a34dc75fc63c010f61df30e6004f6d30bed3a90"
                        },
                        "downloads": -1,
                        "filename": "ocrd_cis-0.0.10-py2.py3-none-any.whl",
                        "has_sig": false,
                        "md5_digest": "c3f76ee88a363f7b4810c774f42b0b24",
                        "packagetype": "bdist_wheel",
                        "python_version": "py2.py3",
                        "requires_python": null,
                        "size": 41383443,
                        "upload_time": "2020-06-30T13:56:50",
                        "upload_time_iso_8601": "2020-06-30T13:56:50.548421Z",
                        "url": "https://files.pythonhosted.org/packages/14/c6/eb72d39cdf3e19295176ed78729cc9d206fd3a3ac8eb2d477ce6b8d99a85/ocrd_cis-0.0.10-py2.py3-none-any.whl",
                        "yanked": false,
                        "yanked_reason": null
                    },
                    {
                        "comment_text": "",
                        "digests": {
                            "md5": "9c93d9adb64d66af1d17c09590a2ac99",
                            "sha256": "774597b57e3ddad90806eaa6579325a97e0ee60a414dae0f9a90abab66057c56"
                        },
                        "downloads": -1,
                        "filename": "ocrd_cis-0.0.10.tar.gz",
                        "has_sig": false,
                        "md5_digest": "9c93d9adb64d66af1d17c09590a2ac99",
                        "packagetype": "sdist",
                        "python_version": "source",
                        "requires_python": null,
                        "size": 124240,
                        "upload_time": "2020-06-30T13:56:53",
                        "upload_time_iso_8601": "2020-06-30T13:56:53.601620Z",
                        "url": "https://files.pythonhosted.org/packages/30/a9/22125125e3ef64ca81b92a065d50c96e59a1461b2dc9f351e3c008111c2e/ocrd_cis-0.0.10.tar.gz",
                        "yanked": false,
                        "yanked_reason": null
                    }
                ],
                "vulnerabilities": []
            },
            "url": "https://github.com/cisocrgroup/ocrd_cis"
        },
        "url": "https://github.com/cisocrgroup/ocrd_cis"
    },
    {
        "compliant_cli": false,
        "files": {
            "Dockerfile": "FROM nvcr.io/nvidia/tensorflow:19.10-py3\nMAINTAINER OCR-D\nENV DEBIAN_FRONTEND noninteractive\nENV PYTHONIOENCODING utf8\n\nWORKDIR /build-layouterkennung\nCOPY setup.py .\nCOPY requirements.txt .\nCOPY README.md .\nCOPY ocrd_anybaseocr ./ocrd_anybaseocr\nRUN pip3 install .\n\nENTRYPOINT [\"/bin/sh\", \"-c\"]\n",
            "README.md": "# Document Preprocessing and Segmentation\n\n[![CircleCI](https://circleci.com/gh/OCR-D/ocrd_anybaseocr.svg?style=svg)](https://circleci.com/gh/OCR-D/ocrd_anybaseocr)\n[![PyPI](https://img.shields.io/pypi/v/ocrd_anybaseocr.svg)](https://pypi.org/project/ocrd_anybaseocr/)\n\n\n> Tools to preprocess and segment scanned images for OCR-D\n\n   * [Installing](#installing)\n   * [Tools](#tools)\n      * [Binarizer](#binarizer)\n      * [Deskewer](#deskewer)\n      * [Cropper](#cropper)\n      * [Dewarper](#dewarper)\n      * [Text/Non-Text Segmenter](#textnon-text-segmenter)\n      * [Block Segmenter](#block-segmenter)\n      * [Textline Segmenter](#textline-segmenter)\n      * [Document Analyser](#document-analyser)\n   * [Testing](#testing)\n   * [License](#license)\n\n# Installing\n\nRequires Python >= 3.6.\n\n1. Create a new `venv` unless you already have one\n\n        python3 -m venv venv\n\n2. Activate the `venv`\n\n        source venv/bin/activate\n\n3. To install from source, get GNU make and do:\n\n        make install\n\n   There are also prebuilds available on PyPI:\n\n        pip install ocrd_anybaseocr\n\n(This will install both PyTorch and TensorFlow, along with their dependents.)\n\n# Tools\n\nAll tools, also called _processors_, abide by the [CLI specifications](https://ocr-d.de/en/spec/cli) for [OCR-D](https://ocr-d.de), which roughly looks like:\n\n    ocrd-<processor-name> [-m <path to METs input file>] -I <input group> -O <output group> [-p <path to parameter file>]* [-P <param name> <param value>]*\n\n## Binarizer\n\n### Method Behaviour \nFor each page (or sub-segment), this processor takes a scanned colored / gray scale document image as input and computes a binarized (black and white) image.\n\nImplemented via rule-based methods (percentile based adaptive background estimation in Ocrolib).\n \n### Example\n\n    ocrd-anybaseocr-binarize -I OCR-D-IMG -O OCR-D-BIN -P operation_level line -P threshold 0.3\n\n\n## Deskewer\n\n### Method Behaviour \nFor each page (or sub-segment), this processor takes a document image as input and computes the skew angle of that. It also annotates a deskewed image. \n\nThe input images have to be binarized for this module to work.\n\nImplemented via rule-based methods (binary projection profile entropy maximization in Ocrolib).\n \n### Example\n\n    ocrd-anybaseocr-deskew -I OCR-D-BIN -O OCR-D-DESKEW -P maxskew 5.0 -P skewsteps 20 -P operation_level page\n\n## Cropper\n\n### Method Behaviour \nFor each page, this processor takes a document image as input and computes the border around the page content area (i.e. removes textual noise as well as any other noise around the page frame). It also annotates a cropped image.\n\nThe input image need not be binarized, but should be deskewed for the module to work optimally.\n\nImplemented via rule-based methods (gradient-based line segment detection and morphology based textline detection).\n \n### Example:\n\n    ocrd-anybaseocr-crop -I OCR-D-DESKEW -O OCR-D-CROP -P rulerAreaMax 0 -P marginLeft 0.1\n\n## Dewarper\n\n### Method Behaviour \nFor each page, this processor takes a document image as input and computes a morphed image which will make the text lines straight if they are curved.\n\nThe input image has to be binarized for the module to work, and should be cropped and deskewed for optimal quality.\n\nImplemented via data-driven methods (neural GAN conditional image model trained with pix2pixHD/Pytorch).\n \n### Models\n\n    ocrd resmgr download ocrd-anybaseocr-dewarp '*'\n\n### Example\n\n    ocrd-anybaseocr-dewarp -I OCR-D-CROP -O OCR-D-DEWARP -P resize_mode none -P gpu_id -1\n\n## Text/Non-Text Segmenter\n\n### Method Behaviour \nFor each page, this processor takes a document image as an input and computes two images, separating the text and non-text parts.\n\nThe input image has to be binarized for the module to work, and should be cropped and deskewed for optimal quality.\n\nImplemented via data-driven methods (neural pixel classifier model trained with Tensorflow/Keras).\n \n### Models\n\n    ocrd resmgr download ocrd-anybaseocr-tiseg '*'\n\n### Example\n\n    ocrd-anybaseocr-tiseg -I OCR-D-DEWARP -O OCR-D-TISEG -P use_deeplr true\n\n## Block Segmenter\n\n### Method Behaviour \nFor each page, this processor takes the raw document image as an input and computes a text region segmentation for it (distinguishing various types of text blocks).\n\nThe input image need not be binarized, but should be deskewed for the module to work optimally.\n\nImplemented via data-driven methods (neural Mask-RCNN instance segmentation model trained with Tensorflow/Keras).\n \n### Models\n\n    ocrd resmgr download ocrd-anybaseocr-block-segmentation '*'\n\n### Example\n\n    ocrd-anybaseocr-block-segmentation -I OCR-D-TISEG -O OCR-D-BLOCK -P active_classes '[\"page-number\", \"paragraph\", \"heading\", \"drop-capital\", \"marginalia\", \"caption\"]' -P min_confidence 0.8 -P post_process true\n\n## Textline Segmenter\n\n### Method Behaviour \nFor each page (or region), this processor takes a cropped document image as an input and computes a textline segmentation for it.\n\nThe input image should be binarized and deskewed for the module to work. \n\nImplemented via rule-based methods (gradient and morphology based line estimation in Ocrolib).\n \n### Example\n\n    ocrd-anybaseocr-textline -I OCR-D-BLOCK -O OCR-D-LINE -P operation_level region\n\n## Document Analyser\n\n### Method Behaviour \nFor the whole document, this processor takes all the cropped page images and their corresponding text regions as input and computes the logical structure (page types and sections).\n\nThe input image should be binarized and segmented for this module to work.\n\nImplemented via data-driven methods (neural Inception-V3 image classification model trained with Tensorflow/Keras).\n\n### Models\n\n    ocrd resmgr download ocrd-anybaseocr-layout-analysis '*'\n\n### Example\n\n    ocrd-anybaseocr-layout-analysis -I OCR-D-LINE -O OCR-D-STRUCT\n\n## Testing\n\nTo test the tools under realistic conditions (on OCR-D workspaces),\ndownload [OCR-D/assets](https://github.com/OCR-D/assets). In particular,\nthe code is tested with the [dfki-testdata](https://github.com/OCR-D/assets/tree/master/data/dfki-testdata)\ndataset.\n\nTo download the data:\n\n    make assets\n\nTo run module tests:\n\n    make test\n\nTo run processor/workflow tests:\n\n    make cli-test\n\n## License\n\n\n```\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n```\n",
            "ocrd-tool.json": "{\n  \"git_url\": \"https://github.com/OCR-D/ocrd_anybaseocr\",\n  \"version\": \"1.8.2\",\n  \"tools\": {\n    \"ocrd-anybaseocr-binarize\": {\n      \"executable\": \"ocrd-anybaseocr-binarize\",\n      \"description\": \"Binarizes images with the algorithm from ocropy and outputs it as an AlternativeImage.\",\n      \"categories\": [\"Image preprocessing\"],\n      \"steps\": [\"preprocessing/optimization/binarization\"],\n      \"input_file_grp\": [\"OCR-D-IMG\"],\n      \"output_file_grp\": [\"OCR-D-IMG-BIN\"],\n      \"parameters\": {\n        \"nocheck\":         {\"type\": \"boolean\",                     \"default\": false, \"description\": \"disable error checking on inputs\"},\n        \"show\":            {\"type\": \"boolean\",                     \"default\": false, \"description\": \"display final results\"},\n        \"raw_copy\":        {\"type\": \"boolean\",                     \"default\": false, \"description\": \"also copy the raw image\"},\n        \"gray\":            {\"type\": \"boolean\",                     \"default\": false, \"description\": \"force grayscale processing even if image seems binary\"},\n        \"bignore\":         {\"type\": \"number\", \"format\": \"float\",   \"default\": 0.1,   \"description\": \"ignore this much of the border for threshold estimation\"},\n        \"debug\":           {\"type\": \"number\", \"format\": \"integer\", \"default\": 0,     \"description\": \"display intermediate results\"},\n        \"escale\":          {\"type\": \"number\", \"format\": \"float\",   \"default\": 1.0,   \"description\": \"scale for estimating a mask over the text region\"},\n        \"hi\":              {\"type\": \"number\", \"format\": \"float\",   \"default\": 90,    \"description\": \"percentile for white estimation\"},\n        \"lo\":              {\"type\": \"number\", \"format\": \"float\",   \"default\": 5,     \"description\": \"percentile for black estimation\"},\n        \"perc\":            {\"type\": \"number\", \"format\": \"float\",   \"default\": 80,    \"description\": \"percentage for filters\"},\n        \"range\":           {\"type\": \"number\", \"format\": \"integer\", \"default\": 20,    \"description\": \"range for filters\"},\n        \"threshold\":       {\"type\": \"number\", \"format\": \"float\",   \"default\": 0.5,   \"description\": \"threshold, determines lightness\"},\n        \"zoom\":            {\"type\": \"number\", \"format\": \"float\",   \"default\": 0.5,   \"description\": \"zoom for page background estimation, smaller=faster\"},\n        \"operation_level\": {\"type\": \"string\", \"enum\": [\"page\",\"region\", \"line\"], \"default\": \"page\",\"description\": \"PAGE XML hierarchy level to operate on\"}\n      }\n    },\n    \"ocrd-anybaseocr-deskew\": {\n      \"executable\": \"ocrd-anybaseocr-deskew\",\n      \"description\": \"Deskews images with the algorithm from ocropy and outputs a deskew angle.\",\n      \"categories\": [\"Image preprocessing\"],\n      \"steps\": [\"preprocessing/optimization/deskewing\"],\n      \"input_file_grp\": [\"OCR-D-IMG-BIN\"],\n      \"output_file_grp\": [\"OCR-D-IMG-DESKEW\"],\n      \"parameters\": {\n        \"escale\":    {\"type\": \"number\", \"format\": \"float\",   \"default\": 1.0, \"description\": \"scale for estimating a mask over the text region\"},\n        \"bignore\":   {\"type\": \"number\", \"format\": \"float\",   \"default\": 0.1, \"description\": \"ignore this much of the border for threshold estimation\"},\n        \"threshold\": {\"type\": \"number\", \"format\": \"float\",   \"default\": 0.5, \"description\": \"threshold, determines lightness\"},\n        \"maxskew\":   {\"type\": \"number\", \"format\": \"float\",   \"default\": 1.0, \"description\": \"skew angle estimation parameters (degrees)\"},\n        \"skewsteps\": {\"type\": \"number\", \"format\": \"integer\", \"default\": 8,   \"description\": \"steps for skew angle estimation (per degree)\"},\n        \"debug\":     {\"type\": \"number\", \"format\": \"integer\", \"default\": 0,   \"description\": \"display intermediate results\"},\n        \"parallel\":  {\"type\": \"number\", \"format\": \"integer\", \"default\": 0,   \"description\": \"???\"},\n        \"lo\":        {\"type\": \"number\", \"format\": \"integer\", \"default\": 5,   \"description\": \"percentile for black estimation\"},\n        \"hi\":        {\"type\": \"number\", \"format\": \"integer\", \"default\": 90,   \"description\": \"percentile for white estimation\"},\n        \"operation_level\": {\"type\": \"string\", \"enum\": [\"page\",\"region\", \"line\"], \"default\": \"page\",\"description\": \"PAGE XML hierarchy level to operate on\"}\n      }\n    },\n    \"ocrd-anybaseocr-crop\": {\n      \"executable\": \"ocrd-anybaseocr-crop\",\n      \"description\": \"Detect the input images' page frame, annotate it as border polygon and add a cropped derived image.\",\n      \"categories\": [\"Image preprocessing\"],\n      \"steps\": [\"preprocessing/optimization/cropping\"],\n      \"input_file_grp\": [\"OCR-D-IMG-DESKEW\"],\n      \"output_file_grp\": [\"OCR-D-IMG-CROP\"],\n      \"parameters\": {\n        \"dpi\": {\n          \"type\": \"number\", \"format\": \"float\", \"default\": 0,\n          \"description\": \"pixel density in dots per inch (used to zoom/scale during processing; overrides any meta-data in the images); disabled when zero or negative\"},\n        \"rulerRatioMax\": {\n          \"type\": \"number\", \"format\": \"float\", \"default\": 50.0,\n          \"description\": \"ruler detection and suppression: maximum aspect ratio of bbox\"},\n        \"rulerRatioMin\": {\n          \"type\": \"number\", \"format\": \"float\", \"default\": 3.0,\n          \"description\": \"ruler detection and suppression: minimum aspect ratio of bbox\"},\n        \"rulerAreaMax\":  {\n          \"type\": \"number\", \"format\": \"float\", \"default\": 0.3,\n          \"description\": \"ruler detection and suppression: maximum area of bbox (as ratio of total image pixels)\"},\n        \"rulerAreaMin\":  {\n          \"type\": \"number\", \"format\": \"float\", \"default\": 0.01,\n          \"description\": \"ruler detection and suppression: minimum area of bbox (as ratio of total image pixels)\"},\n        \"rulerWidthMax\": {\n          \"type\": \"number\", \"format\": \"float\", \"default\": 0.95,\n          \"description\": \"ruler detection and suppression: maximum width of bbox (as ratio of total image width)\"},\n        \"columnAreaMin\": {\n          \"type\": \"number\", \"format\": \"float\", \"default\": 0.05,\n          \"description\": \"text block detection: minimum area of individual columns (as ratio of total image pixels)\"},\n        \"columnSepWidthMax\": {\n          \"type\": \"number\", \"format\": \"float\", \"default\": 0.04,\n          \"description\": \"text block detection: maximum width between individual columns (as ratio of total image width)\"},\n        \"marginTop\": {\n          \"type\": \"number\", \"format\": \"float\", \"default\": 0.25,\n          \"description\": \"ruler / edge / text detection: maximum y position to crop from above (as ratio of total image height)\"},\n        \"marginBottom\": {\n          \"type\": \"number\", \"format\": \"float\", \"default\": 0.75,\n          \"description\": \"ruler / edge / text detection: minimum y position to crop from below (as ratio of total image height)\"},\n        \"marginLeft\": {\n          \"type\": \"number\", \"format\": \"float\", \"default\": 0.3,\n          \"description\": \"ruler / edge / text detection: maximum x position to crop from left (as ratio of total image width)\"},\n        \"marginRight\": {\n          \"type\": \"number\", \"format\": \"float\", \"default\": 0.7,\n          \"description\": \"ruler / edge / text detection: minimum x position to crop from right (as ratio of total image width)\"},\n        \"padding\": {\n          \"type\": \"number\", \"format\": \"integer\", \"default\": 10,\n          \"description\": \"extend / shrink border resulting from edge detection / text detection by this many px in each direction\"}\n      }\n    },\n    \"ocrd-anybaseocr-dewarp\": {\n      \"executable\": \"ocrd-anybaseocr-dewarp\",\n      \"description\": \"Dewarps the input image with anyBaseOCR and outputs it as an AlternativeImage\",\n      \"categories\": [\"Image preprocessing\"],\n      \"steps\": [\"preprocessing/optimization/dewarping\"],\n      \"input_file_grp\": [\"OCR-D-IMG-CROP\"],\n      \"output_file_grp\": [\"OCR-D-IMG-DEWARP\"],\n      \"parameters\": {\n        \"resize_mode\": {\n          \"type\": \"string\",\n          \"enum\": [\"resize_and_crop\", \"crop\", \"scale_width\", \"scale_width_and_crop\", \"none\"],\n          \"default\": \"resize_and_crop\",\n          \"description\": \"transformation to apply to the original image before input to the network\"\n        },\n        \"resize_height\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"default\": 1024,\n          \"description\": \"target image height before input to the network\"\n        },\n        \"resize_width\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"default\": 1024,\n          \"description\": \"target image width before input to the network\"\n        },\n        \"model_path\": {\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"default\": \"latest_net_G.pth\",\n          \"description\": \"Path to the trained pix2pixHD model\",\n          \"cacheable\": true,\n          \"content-type\": \"application/vnd.pytorch\"\n        },\n        \"gpu_id\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"default\": -1,\n          \"description\": \"CUDA device ID of GPU to use, or -1 for CPU only\"\n        },\n        \"operation_level\": {\n          \"type\": \"string\",\n          \"enum\": [\"page\", \"region\"],\n          \"default\": \"page\",\n          \"description\": \"PAGE XML hierarchy level to operate on (should match what model was trained on!)\"\n        }\n      }\n    },\n    \"ocrd-anybaseocr-tiseg\": {\n      \"executable\": \"ocrd-anybaseocr-tiseg\",\n      \"input_file_grp\": [\"OCR-D-IMG-CROP\"],\n      \"output_file_grp\": [\"OCR-D-SEG-TISEG\"],\n      \"categories\": [\"Layout analysis\"],\n      \"steps\": [\"layout/segmentation/text-nontext\"],\n      \"description\": \"Separates the text and non-text elements with anyBaseOCR. Outputs clipped versions of the input image as AlternativeImage containing either only text or non-text elements.\",\n      \"parameters\": {\n        \"use_deeplr\": {\n          \"type\":\"boolean\",\n          \"default\":true,\n          \"description\": \"Whether to use deep learning model (UNet pixel classifier) instead of rule-based implementation (multi-resolution morphology).\"\n        },\n        \"seg_weights\": {\n          \"type\":\"string\",\n          \"format\":\"uri\",\n          \"content-type\": \"text/directory\",\n          \"cacheable\": true,\n          \"default\":\"seg_model\",\n          \"description\":\"Directory path to deep learning model when use_deeplr is true.\"\n        }\n      }\n    },\n    \"ocrd-anybaseocr-textline\": {\n      \"executable\": \"ocrd-anybaseocr-textline\",\n      \"input_file_grp\": [\"OCR-D-SEG-TISEG\"],\n      \"output_file_grp\": [\"OCR-D-SEG-LINE-ANY\"],\n      \"categories\": [\"Layout analysis\"],\n      \"steps\": [\"layout/segmentation/line\"],\n      \"description\": \"Finds region polygons for each text line in the input image.\",\n      \"parameters\": {\n        \"minscale\":    {\"type\": \"number\", \"format\": \"float\", \"default\": 12.0, \"description\": \"minimum scale permitted\"},\n        \"maxlines\":    {\"type\": \"number\", \"format\": \"float\", \"default\": 300, \"description\": \"non-standard scaling of horizontal parameters\"},\n        \"scale\":       {\"type\": \"number\", \"format\": \"float\", \"default\": 0.0, \"description\": \"the basic scale of the document (roughly, xheight) 0=automatic\"},\n        \"hscale\":      {\"type\": \"number\", \"format\": \"float\", \"default\": 1.0, \"description\": \"non-standard scaling of horizontal parameters\"},\n        \"vscale\":      {\"type\": \"number\", \"format\": \"float\", \"default\": 1.7, \"description\": \"non-standard scaling of vertical parameters\"},\n        \"threshold\":   {\"type\": \"number\", \"format\": \"float\", \"default\": 0.2, \"description\": \"baseline threshold\"},\n        \"noise\":       {\"type\": \"number\", \"format\": \"integer\", \"default\": 8, \"description\": \"noise threshold for removing small components from lines\"},\n        \"usegauss\":    {\"type\": \"boolean\", \"default\": false, \"description\": \"use gaussian instead of uniform\"},\n        \"maxseps\":     {\"type\": \"number\", \"format\": \"integer\", \"default\": 2, \"description\": \"maximum black column separators\"},\n        \"sepwiden\":    {\"type\": \"number\", \"format\": \"integer\", \"default\": 10, \"description\": \"widen black separators (to account for warping)\"},\n        \"blackseps\":   {\"type\": \"boolean\", \"default\": false, \"description\": \"also check for black column separators\"},\n        \"maxcolseps\":  {\"type\": \"number\", \"format\": \"integer\", \"default\": 2, \"description\": \"maximum # whitespace column separators\"},\n        \"csminaspect\": {\"type\": \"number\", \"format\": \"float\", \"default\": 1.1, \"description\": \"minimum aspect ratio for column separators\"},\n        \"csminheight\": {\"type\": \"number\", \"format\": \"float\", \"default\": 6.5, \"description\": \"minimum column height (units=scale)\"},\n        \"pad\":         {\"type\": \"number\", \"format\": \"integer\", \"default\": 3, \"description\": \"padding for extracted lines\"},\n        \"expand\":      {\"type\": \"number\", \"format\": \"integer\", \"default\": 3, \"description\": \"expand mask for grayscale extraction\"},\n        \"parallel\":    {\"type\": \"number\", \"format\": \"integer\", \"default\": 0, \"description\": \"number of CPUs to use\"},\n        \"libpath\":     {\"type\": \"string\", \"default\": \".\", \"description\": \"Library Path for C Executables\"},\n        \"operation_level\": {\"type\": \"string\", \"enum\": [\"page\",\"region\"], \"default\": \"region\",\"description\": \"PAGE XML hierarchy level to operate on\"},\n        \"overwrite\":   {\"type\": \"boolean\", \"default\": false, \"description\": \"check whether to overwrite existing text lines\"}\n      }\n    },\n    \"ocrd-anybaseocr-layout-analysis\": {\n      \"executable\": \"ocrd-anybaseocr-layout-analysis\",\n      \"input_file_grp\": [\"OCR-D-IMG-CROP\"],\n      \"output_file_grp\": [\"OCR-D-SEG-LAYOUT\"],\n      \"categories\": [\"Layout analysis\"],\n      \"steps\": [\"layout/analysis\"],\n      \"description\": \"Generates a table-of-content like document structure of the whole document.\",\n      \"parameters\": {\n        \"batch_size\":         {\"type\": \"number\", \"format\": \"integer\", \"default\": 4, \"description\": \"Batch size for generating test images\"},\n        \"model_path\":         { \"type\": \"string\", \"format\": \"uri\", \"content-type\": \"text/directory\", \"cacheable\": true, \"default\":\"structure_analysis\", \"description\": \"Directory path to layout structure classification model\"},\n        \"class_mapping_path\": { \"type\": \"string\", \"format\": \"uri\", \"content-type\": \"application/python-pickle\", \"cacheable\": true, \"default\":\"mapping_densenet.pickle\", \"description\": \"File path to layout structure classes\"}\n      }\n    },\n    \"ocrd-anybaseocr-block-segmentation\": {\n      \"executable\": \"ocrd-anybaseocr-block-segmentation\",\n      \"input_file_grp\": [\"OCR-D-IMG\"],\n      \"output_file_grp\": [\"OCR-D-SEG-BLOCK\"],\n      \"categories\": [\"Layout analysis\"],\n      \"steps\": [\"layout/segmentation/region\"],\n      \"description\": \"Segments and classifies regions in each single page and annotates the the region polygons and classes.\",\n      \"parameters\": {     \n        \"block_segmentation_weights\": {\n\t  \"type\": \"string\",\n          \"format\":\"uri\",\n          \"content-type\": \"application/x-hdf;subtype=bag\",\n          \"cacheable\": true,\n\t  \"default\":\"block_segmentation_weights.h5\",\n\t  \"description\": \"Path to model weights\"\n\t},\n        \"overwrite\": {\n\t  \"type\": \"boolean\",\n\t  \"default\": false,\n\t  \"description\": \"whether to delete existing text lines prior to segmentation\"\n\t},\n        \"th\": {\n\t  \"type\": \"integer\",\n\t  \"default\": 15,\n\t  \"description\": \"num of pixels to include in the area region (when applying text/non-text mask from tiseg)\"\n\t},\n\t\"active_classes\": {\n\t  \"type\": \"array\",\n\t  \"items\": {\n\t    \"type\": \"string\",\n\t    \"enum\": [\"page-number\", \"paragraph\", \"catch-word\", \"heading\", \"drop-capital\", \"signature-mark\", \"header\", \"marginalia\", \"footnote\", \"footnote-continued\", \"caption\", \"endnote\", \"footer\", \"keynote\", \"image\", \"table\", \"graphics\"]\n\t  },\n\t  \"default\": [\"page-number\", \"paragraph\", \"catch-word\", \"heading\", \"drop-capital\", \"signature-mark\", \"marginalia\", \"caption\"],\n\t  \"description\": \"Restrict types of regions to be detected.\"\n\t},\n        \"post_process\": {\n\t  \"type\": \"boolean\",\n\t  \"default\": true,\n\t  \"description\": \"whether to apply non-maximum suppression (across classes) on the detections\"\n\t},\n        \"use_masks\": {\n\t  \"type\": \"boolean\",\n\t  \"default\": true,\n\t  \"description\": \"whether to segment from the mask as polygon instead of just the bbox\"\n\t},\n        \"min_confidence\": {\n\t  \"type\": \"number\",\n\t  \"format\": \"float\",\n\t  \"default\": 0.9,\n\t  \"description\": \"Confidence threshold for region detections\"\n\t},\n\t\"min_share_drop\": {\n\t  \"type\": \"number\",\n\t  \"format\": \"float\",\n\t  \"default\": 0.9,\n\t  \"description\": \"Minimum required overlap (intersection over single) of mask-derived contour area between neighbours to suppress smaller prediction\"\n\t},\n\t\"min_share_merge\": {\n\t  \"type\": \"number\",\n\t  \"format\": \"float\",\n\t  \"default\": 0.8,\n\t  \"description\": \"Minimum required overlap (intersection over single) of mask-derived contour area between neighbours to merge smaller prediction\"\n\t},\n\t\"min_iou_drop\": {\n\t  \"type\": \"number\",\n\t  \"format\": \"float\",\n\t  \"default\": 0.8,\n\t  \"description\": \"Minimum required overlap (intersection over union) of mask-derived contour area between neighbours to suppress prediction scoring worse\"\n\t},\n\t\"min_iou_merge\": {\n\t  \"type\": \"number\",\n\t  \"format\": \"float\",\n\t  \"default\": 0.2,\n\t  \"description\": \"Minimum required overlap (intersection over union) of mask-derived contour area between neighbours to merge prediction scoring worse\"\n\t}\n      }\n    }\n  }\n}\n",
            "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup, find_packages\nimport json\nwith open('ocrd-tool.json', 'r') as f:\n    version = json.load(f)['version']\n\nsetup(\n    name='ocrd-anybaseocr',\n    version=version,\n    author=\"DFKI\",\n    author_email=\"Saqib.Bukhari@dfki.de, Mohammad_mohsin.reza@dfki.de\",\n    url=\"https://github.com/OCR-D/ocrd_anybaseocr\",\n    license='Apache License 2.0',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    install_requires=open('requirements.txt').read().split('\\n'),\n    packages=find_packages(exclude=[\"work_dir\", \"src\", \"tests\"]),\n    package_data={\n        '': ['*.json']\n    },\n    entry_points={\n        'console_scripts': [\n            'ocrd-anybaseocr-binarize           = ocrd_anybaseocr.cli.ocrd_anybaseocr_binarize:cli',\n            'ocrd-anybaseocr-deskew             = ocrd_anybaseocr.cli.ocrd_anybaseocr_deskew:cli',\n            'ocrd-anybaseocr-crop               = ocrd_anybaseocr.cli.ocrd_anybaseocr_cropping:cli',\n            'ocrd-anybaseocr-dewarp             = ocrd_anybaseocr.cli.ocrd_anybaseocr_dewarp:cli',\n            'ocrd-anybaseocr-tiseg              = ocrd_anybaseocr.cli.ocrd_anybaseocr_tiseg:cli',\n            'ocrd-anybaseocr-textline           = ocrd_anybaseocr.cli.ocrd_anybaseocr_textline:cli',\n            'ocrd-anybaseocr-layout-analysis    = ocrd_anybaseocr.cli.ocrd_anybaseocr_layout_analysis:cli',\n            'ocrd-anybaseocr-block-segmentation = ocrd_anybaseocr.cli.ocrd_anybaseocr_block_segmentation:cli'\n        ]\n    },\n)\n"
        },
        "git": {
            "last_commit": "Wed Mar 30 17:16:10 2022 +0200",
            "latest_tag": "v1.8.2",
            "number_of_commits": "394",
            "url": "https://github.com/OCR-D/ocrd_anybaseocr"
        },
        "name": "ocrd_anybaseocr",
        "ocrd_tool": {
            "git_url": "https://github.com/OCR-D/ocrd_anybaseocr",
            "tools": {
                "ocrd-anybaseocr-binarize": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Binarizes images with the algorithm from ocropy and outputs it as an AlternativeImage.",
                    "executable": "ocrd-anybaseocr-binarize",
                    "input_file_grp": [
                        "OCR-D-IMG"
                    ],
                    "output_file_grp": [
                        "OCR-D-IMG-BIN"
                    ],
                    "parameters": {
                        "bignore": {
                            "default": 0.1,
                            "description": "ignore this much of the border for threshold estimation",
                            "format": "float",
                            "type": "number"
                        },
                        "debug": {
                            "default": 0,
                            "description": "display intermediate results",
                            "format": "integer",
                            "type": "number"
                        },
                        "escale": {
                            "default": 1.0,
                            "description": "scale for estimating a mask over the text region",
                            "format": "float",
                            "type": "number"
                        },
                        "gray": {
                            "default": false,
                            "description": "force grayscale processing even if image seems binary",
                            "type": "boolean"
                        },
                        "hi": {
                            "default": 90,
                            "description": "percentile for white estimation",
                            "format": "float",
                            "type": "number"
                        },
                        "lo": {
                            "default": 5,
                            "description": "percentile for black estimation",
                            "format": "float",
                            "type": "number"
                        },
                        "nocheck": {
                            "default": false,
                            "description": "disable error checking on inputs",
                            "type": "boolean"
                        },
                        "operation_level": {
                            "default": "page",
                            "description": "PAGE XML hierarchy level to operate on",
                            "enum": [
                                "page",
                                "region",
                                "line"
                            ],
                            "type": "string"
                        },
                        "perc": {
                            "default": 80,
                            "description": "percentage for filters",
                            "format": "float",
                            "type": "number"
                        },
                        "range": {
                            "default": 20,
                            "description": "range for filters",
                            "format": "integer",
                            "type": "number"
                        },
                        "raw_copy": {
                            "default": false,
                            "description": "also copy the raw image",
                            "type": "boolean"
                        },
                        "show": {
                            "default": false,
                            "description": "display final results",
                            "type": "boolean"
                        },
                        "threshold": {
                            "default": 0.5,
                            "description": "threshold, determines lightness",
                            "format": "float",
                            "type": "number"
                        },
                        "zoom": {
                            "default": 0.5,
                            "description": "zoom for page background estimation, smaller=faster",
                            "format": "float",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/binarization"
                    ]
                },
                "ocrd-anybaseocr-block-segmentation": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Segments and classifies regions in each single page and annotates the the region polygons and classes.",
                    "executable": "ocrd-anybaseocr-block-segmentation",
                    "input_file_grp": [
                        "OCR-D-IMG"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-BLOCK"
                    ],
                    "parameters": {
                        "active_classes": {
                            "default": [
                                "page-number",
                                "paragraph",
                                "catch-word",
                                "heading",
                                "drop-capital",
                                "signature-mark",
                                "marginalia",
                                "caption"
                            ],
                            "description": "Restrict types of regions to be detected.",
                            "items": {
                                "enum": [
                                    "page-number",
                                    "paragraph",
                                    "catch-word",
                                    "heading",
                                    "drop-capital",
                                    "signature-mark",
                                    "header",
                                    "marginalia",
                                    "footnote",
                                    "footnote-continued",
                                    "caption",
                                    "endnote",
                                    "footer",
                                    "keynote",
                                    "image",
                                    "table",
                                    "graphics"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "block_segmentation_weights": {
                            "cacheable": true,
                            "content-type": "application/x-hdf;subtype=bag",
                            "default": "block_segmentation_weights.h5",
                            "description": "Path to model weights",
                            "format": "uri",
                            "type": "string"
                        },
                        "min_confidence": {
                            "default": 0.9,
                            "description": "Confidence threshold for region detections",
                            "format": "float",
                            "type": "number"
                        },
                        "min_iou_drop": {
                            "default": 0.8,
                            "description": "Minimum required overlap (intersection over union) of mask-derived contour area between neighbours to suppress prediction scoring worse",
                            "format": "float",
                            "type": "number"
                        },
                        "min_iou_merge": {
                            "default": 0.2,
                            "description": "Minimum required overlap (intersection over union) of mask-derived contour area between neighbours to merge prediction scoring worse",
                            "format": "float",
                            "type": "number"
                        },
                        "min_share_drop": {
                            "default": 0.9,
                            "description": "Minimum required overlap (intersection over single) of mask-derived contour area between neighbours to suppress smaller prediction",
                            "format": "float",
                            "type": "number"
                        },
                        "min_share_merge": {
                            "default": 0.8,
                            "description": "Minimum required overlap (intersection over single) of mask-derived contour area between neighbours to merge smaller prediction",
                            "format": "float",
                            "type": "number"
                        },
                        "overwrite": {
                            "default": false,
                            "description": "whether to delete existing text lines prior to segmentation",
                            "type": "boolean"
                        },
                        "post_process": {
                            "default": true,
                            "description": "whether to apply non-maximum suppression (across classes) on the detections",
                            "type": "boolean"
                        },
                        "th": {
                            "default": 15,
                            "description": "num of pixels to include in the area region (when applying text/non-text mask from tiseg)",
                            "type": "integer"
                        },
                        "use_masks": {
                            "default": true,
                            "description": "whether to segment from the mask as polygon instead of just the bbox",
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/segmentation/region"
                    ]
                },
                "ocrd-anybaseocr-crop": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Detect the input images' page frame, annotate it as border polygon and add a cropped derived image.",
                    "executable": "ocrd-anybaseocr-crop",
                    "input_file_grp": [
                        "OCR-D-IMG-DESKEW"
                    ],
                    "output_file_grp": [
                        "OCR-D-IMG-CROP"
                    ],
                    "parameters": {
                        "columnAreaMin": {
                            "default": 0.05,
                            "description": "text block detection: minimum area of individual columns (as ratio of total image pixels)",
                            "format": "float",
                            "type": "number"
                        },
                        "columnSepWidthMax": {
                            "default": 0.04,
                            "description": "text block detection: maximum width between individual columns (as ratio of total image width)",
                            "format": "float",
                            "type": "number"
                        },
                        "dpi": {
                            "default": 0,
                            "description": "pixel density in dots per inch (used to zoom/scale during processing; overrides any meta-data in the images); disabled when zero or negative",
                            "format": "float",
                            "type": "number"
                        },
                        "marginBottom": {
                            "default": 0.75,
                            "description": "ruler / edge / text detection: minimum y position to crop from below (as ratio of total image height)",
                            "format": "float",
                            "type": "number"
                        },
                        "marginLeft": {
                            "default": 0.3,
                            "description": "ruler / edge / text detection: maximum x position to crop from left (as ratio of total image width)",
                            "format": "float",
                            "type": "number"
                        },
                        "marginRight": {
                            "default": 0.7,
                            "description": "ruler / edge / text detection: minimum x position to crop from right (as ratio of total image width)",
                            "format": "float",
                            "type": "number"
                        },
                        "marginTop": {
                            "default": 0.25,
                            "description": "ruler / edge / text detection: maximum y position to crop from above (as ratio of total image height)",
                            "format": "float",
                            "type": "number"
                        },
                        "padding": {
                            "default": 10,
                            "description": "extend / shrink border resulting from edge detection / text detection by this many px in each direction",
                            "format": "integer",
                            "type": "number"
                        },
                        "rulerAreaMax": {
                            "default": 0.3,
                            "description": "ruler detection and suppression: maximum area of bbox (as ratio of total image pixels)",
                            "format": "float",
                            "type": "number"
                        },
                        "rulerAreaMin": {
                            "default": 0.01,
                            "description": "ruler detection and suppression: minimum area of bbox (as ratio of total image pixels)",
                            "format": "float",
                            "type": "number"
                        },
                        "rulerRatioMax": {
                            "default": 50.0,
                            "description": "ruler detection and suppression: maximum aspect ratio of bbox",
                            "format": "float",
                            "type": "number"
                        },
                        "rulerRatioMin": {
                            "default": 3.0,
                            "description": "ruler detection and suppression: minimum aspect ratio of bbox",
                            "format": "float",
                            "type": "number"
                        },
                        "rulerWidthMax": {
                            "default": 0.95,
                            "description": "ruler detection and suppression: maximum width of bbox (as ratio of total image width)",
                            "format": "float",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/cropping"
                    ]
                },
                "ocrd-anybaseocr-deskew": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Deskews images with the algorithm from ocropy and outputs a deskew angle.",
                    "executable": "ocrd-anybaseocr-deskew",
                    "input_file_grp": [
                        "OCR-D-IMG-BIN"
                    ],
                    "output_file_grp": [
                        "OCR-D-IMG-DESKEW"
                    ],
                    "parameters": {
                        "bignore": {
                            "default": 0.1,
                            "description": "ignore this much of the border for threshold estimation",
                            "format": "float",
                            "type": "number"
                        },
                        "debug": {
                            "default": 0,
                            "description": "display intermediate results",
                            "format": "integer",
                            "type": "number"
                        },
                        "escale": {
                            "default": 1.0,
                            "description": "scale for estimating a mask over the text region",
                            "format": "float",
                            "type": "number"
                        },
                        "hi": {
                            "default": 90,
                            "description": "percentile for white estimation",
                            "format": "integer",
                            "type": "number"
                        },
                        "lo": {
                            "default": 5,
                            "description": "percentile for black estimation",
                            "format": "integer",
                            "type": "number"
                        },
                        "maxskew": {
                            "default": 1.0,
                            "description": "skew angle estimation parameters (degrees)",
                            "format": "float",
                            "type": "number"
                        },
                        "operation_level": {
                            "default": "page",
                            "description": "PAGE XML hierarchy level to operate on",
                            "enum": [
                                "page",
                                "region",
                                "line"
                            ],
                            "type": "string"
                        },
                        "parallel": {
                            "default": 0,
                            "description": "???",
                            "format": "integer",
                            "type": "number"
                        },
                        "skewsteps": {
                            "default": 8,
                            "description": "steps for skew angle estimation (per degree)",
                            "format": "integer",
                            "type": "number"
                        },
                        "threshold": {
                            "default": 0.5,
                            "description": "threshold, determines lightness",
                            "format": "float",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/deskewing"
                    ]
                },
                "ocrd-anybaseocr-dewarp": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Dewarps the input image with anyBaseOCR and outputs it as an AlternativeImage",
                    "executable": "ocrd-anybaseocr-dewarp",
                    "input_file_grp": [
                        "OCR-D-IMG-CROP"
                    ],
                    "output_file_grp": [
                        "OCR-D-IMG-DEWARP"
                    ],
                    "parameters": {
                        "gpu_id": {
                            "default": -1,
                            "description": "CUDA device ID of GPU to use, or -1 for CPU only",
                            "format": "integer",
                            "type": "number"
                        },
                        "model_path": {
                            "cacheable": true,
                            "content-type": "application/vnd.pytorch",
                            "default": "latest_net_G.pth",
                            "description": "Path to the trained pix2pixHD model",
                            "format": "uri",
                            "type": "string"
                        },
                        "operation_level": {
                            "default": "page",
                            "description": "PAGE XML hierarchy level to operate on (should match what model was trained on!)",
                            "enum": [
                                "page",
                                "region"
                            ],
                            "type": "string"
                        },
                        "resize_height": {
                            "default": 1024,
                            "description": "target image height before input to the network",
                            "format": "integer",
                            "type": "number"
                        },
                        "resize_mode": {
                            "default": "resize_and_crop",
                            "description": "transformation to apply to the original image before input to the network",
                            "enum": [
                                "resize_and_crop",
                                "crop",
                                "scale_width",
                                "scale_width_and_crop",
                                "none"
                            ],
                            "type": "string"
                        },
                        "resize_width": {
                            "default": 1024,
                            "description": "target image width before input to the network",
                            "format": "integer",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/dewarping"
                    ]
                },
                "ocrd-anybaseocr-layout-analysis": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Generates a table-of-content like document structure of the whole document.",
                    "executable": "ocrd-anybaseocr-layout-analysis",
                    "input_file_grp": [
                        "OCR-D-IMG-CROP"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-LAYOUT"
                    ],
                    "parameters": {
                        "batch_size": {
                            "default": 4,
                            "description": "Batch size for generating test images",
                            "format": "integer",
                            "type": "number"
                        },
                        "class_mapping_path": {
                            "cacheable": true,
                            "content-type": "application/python-pickle",
                            "default": "mapping_densenet.pickle",
                            "description": "File path to layout structure classes",
                            "format": "uri",
                            "type": "string"
                        },
                        "model_path": {
                            "cacheable": true,
                            "content-type": "text/directory",
                            "default": "structure_analysis",
                            "description": "Directory path to layout structure classification model",
                            "format": "uri",
                            "type": "string"
                        }
                    },
                    "steps": [
                        "layout/analysis"
                    ]
                },
                "ocrd-anybaseocr-textline": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Finds region polygons for each text line in the input image.",
                    "executable": "ocrd-anybaseocr-textline",
                    "input_file_grp": [
                        "OCR-D-SEG-TISEG"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-LINE-ANY"
                    ],
                    "parameters": {
                        "blackseps": {
                            "default": false,
                            "description": "also check for black column separators",
                            "type": "boolean"
                        },
                        "csminaspect": {
                            "default": 1.1,
                            "description": "minimum aspect ratio for column separators",
                            "format": "float",
                            "type": "number"
                        },
                        "csminheight": {
                            "default": 6.5,
                            "description": "minimum column height (units=scale)",
                            "format": "float",
                            "type": "number"
                        },
                        "expand": {
                            "default": 3,
                            "description": "expand mask for grayscale extraction",
                            "format": "integer",
                            "type": "number"
                        },
                        "hscale": {
                            "default": 1.0,
                            "description": "non-standard scaling of horizontal parameters",
                            "format": "float",
                            "type": "number"
                        },
                        "libpath": {
                            "default": ".",
                            "description": "Library Path for C Executables",
                            "type": "string"
                        },
                        "maxcolseps": {
                            "default": 2,
                            "description": "maximum # whitespace column separators",
                            "format": "integer",
                            "type": "number"
                        },
                        "maxlines": {
                            "default": 300,
                            "description": "non-standard scaling of horizontal parameters",
                            "format": "float",
                            "type": "number"
                        },
                        "maxseps": {
                            "default": 2,
                            "description": "maximum black column separators",
                            "format": "integer",
                            "type": "number"
                        },
                        "minscale": {
                            "default": 12.0,
                            "description": "minimum scale permitted",
                            "format": "float",
                            "type": "number"
                        },
                        "noise": {
                            "default": 8,
                            "description": "noise threshold for removing small components from lines",
                            "format": "integer",
                            "type": "number"
                        },
                        "operation_level": {
                            "default": "region",
                            "description": "PAGE XML hierarchy level to operate on",
                            "enum": [
                                "page",
                                "region"
                            ],
                            "type": "string"
                        },
                        "overwrite": {
                            "default": false,
                            "description": "check whether to overwrite existing text lines",
                            "type": "boolean"
                        },
                        "pad": {
                            "default": 3,
                            "description": "padding for extracted lines",
                            "format": "integer",
                            "type": "number"
                        },
                        "parallel": {
                            "default": 0,
                            "description": "number of CPUs to use",
                            "format": "integer",
                            "type": "number"
                        },
                        "scale": {
                            "default": 0.0,
                            "description": "the basic scale of the document (roughly, xheight) 0=automatic",
                            "format": "float",
                            "type": "number"
                        },
                        "sepwiden": {
                            "default": 10,
                            "description": "widen black separators (to account for warping)",
                            "format": "integer",
                            "type": "number"
                        },
                        "threshold": {
                            "default": 0.2,
                            "description": "baseline threshold",
                            "format": "float",
                            "type": "number"
                        },
                        "usegauss": {
                            "default": false,
                            "description": "use gaussian instead of uniform",
                            "type": "boolean"
                        },
                        "vscale": {
                            "default": 1.7,
                            "description": "non-standard scaling of vertical parameters",
                            "format": "float",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "layout/segmentation/line"
                    ]
                },
                "ocrd-anybaseocr-tiseg": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Separates the text and non-text elements with anyBaseOCR. Outputs clipped versions of the input image as AlternativeImage containing either only text or non-text elements.",
                    "executable": "ocrd-anybaseocr-tiseg",
                    "input_file_grp": [
                        "OCR-D-IMG-CROP"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-TISEG"
                    ],
                    "parameters": {
                        "seg_weights": {
                            "cacheable": true,
                            "content-type": "text/directory",
                            "default": "seg_model",
                            "description": "Directory path to deep learning model when use_deeplr is true.",
                            "format": "uri",
                            "type": "string"
                        },
                        "use_deeplr": {
                            "default": true,
                            "description": "Whether to use deep learning model (UNet pixel classifier) instead of rule-based implementation (multi-resolution morphology).",
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/segmentation/text-nontext"
                    ]
                }
            },
            "version": "1.8.2"
        },
        "ocrd_tool_validate": "<report valid=\"false\">\n  <error>[tools.ocrd-anybaseocr-block-segmentation.parameters.th.type] 'integer' is not one of ['string', 'number', 'boolean', 'object', 'array']</error>\n  <error>[tools.ocrd-anybaseocr-block-segmentation.parameters.active_classes] Additional properties are not allowed ('items' was unexpected)</error>\n</report>",
        "official": true,
        "org_plus_name": "OCR-D/ocrd_anybaseocr",
        "python": {
            "author": "DFKI",
            "author-email": "Saqib.Bukhari@dfki.de, Mohammad_mohsin.reza@dfki.de",
            "name": "ocrd-anybaseocr",
            "pypi": {
                "info": {
                    "author": "DFKI",
                    "author_email": "Saqib.Bukhari@dfki.de, Mohammad_mohsin.reza@dfki.de",
                    "bugtrack_url": null,
                    "classifiers": [],
                    "description": "# Document Preprocessing and Segmentation\n\n[![CircleCI](https://circleci.com/gh/OCR-D/ocrd_anybaseocr.svg?style=svg)](https://circleci.com/gh/OCR-D/ocrd_anybaseocr)\n[![PyPI](https://img.shields.io/pypi/v/ocrd_anybaseocr.svg)](https://pypi.org/project/ocrd_anybaseocr/)\n\n\n> Tools to preprocess and segment scanned images for OCR-D\n\n   * [Installing](#installing)\n   * [Tools](#tools)\n      * [Binarizer](#binarizer)\n      * [Deskewer](#deskewer)\n      * [Cropper](#cropper)\n      * [Dewarper](#dewarper)\n      * [Text/Non-Text Segmenter](#textnon-text-segmenter)\n      * [Block Segmenter](#block-segmenter)\n      * [Textline Segmenter](#textline-segmenter)\n      * [Document Analyser](#document-analyser)\n   * [Testing](#testing)\n   * [License](#license)\n\n# Installing\n\nRequires Python >= 3.6.\n\n1. Create a new `venv` unless you already have one\n\n        python3 -m venv venv\n\n2. Activate the `venv`\n\n        source venv/bin/activate\n\n3. To install from source, get GNU make and do:\n\n        make install\n\n   There are also prebuilds available on PyPI:\n\n        pip install ocrd_anybaseocr\n\n(This will install both PyTorch and TensorFlow, along with their dependents.)\n\n# Tools\n\nAll tools, also called _processors_, abide by the [CLI specifications](https://ocr-d.de/en/spec/cli) for [OCR-D](https://ocr-d.de), which roughly looks like:\n\n    ocrd-<processor-name> [-m <path to METs input file>] -I <input group> -O <output group> [-p <path to parameter file>]* [-P <param name> <param value>]*\n\n## Binarizer\n\n### Method Behaviour \nFor each page (or sub-segment), this processor takes a scanned colored / gray scale document image as input and computes a binarized (black and white) image.\n\nImplemented via rule-based methods (percentile based adaptive background estimation in Ocrolib).\n \n### Example\n\n    ocrd-anybaseocr-binarize -I OCR-D-IMG -O OCR-D-BIN -P operation_level line -P threshold 0.3\n\n\n## Deskewer\n\n### Method Behaviour \nFor each page (or sub-segment), this processor takes a document image as input and computes the skew angle of that. It also annotates a deskewed image. \n\nThe input images have to be binarized for this module to work.\n\nImplemented via rule-based methods (binary projection profile entropy maximization in Ocrolib).\n \n### Example\n\n    ocrd-anybaseocr-deskew -I OCR-D-BIN -O OCR-D-DESKEW -P maxskew 5.0 -P skewsteps 20 -P operation_level page\n\n## Cropper\n\n### Method Behaviour \nFor each page, this processor takes a document image as input and computes the border around the page content area (i.e. removes textual noise as well as any other noise around the page frame). It also annotates a cropped image.\n\nThe input image need not be binarized, but should be deskewed for the module to work optimally.\n\nImplemented via rule-based methods (gradient-based line segment detection and morphology based textline detection).\n \n### Example:\n\n    ocrd-anybaseocr-crop -I OCR-D-DESKEW -O OCR-D-CROP -P rulerAreaMax 0 -P marginLeft 0.1\n\n## Dewarper\n\n### Method Behaviour \nFor each page, this processor takes a document image as input and computes a morphed image which will make the text lines straight if they are curved.\n\nThe input image has to be binarized for the module to work, and should be cropped and deskewed for optimal quality.\n\nImplemented via data-driven methods (neural GAN conditional image model trained with pix2pixHD/Pytorch).\n \n### Models\n\n    ocrd resmgr download ocrd-anybaseocr-dewarp '*'\n\n### Example\n\n    ocrd-anybaseocr-dewarp -I OCR-D-CROP -O OCR-D-DEWARP -P resize_mode none -P gpu_id -1\n\n## Text/Non-Text Segmenter\n\n### Method Behaviour \nFor each page, this processor takes a document image as an input and computes two images, separating the text and non-text parts.\n\nThe input image has to be binarized for the module to work, and should be cropped and deskewed for optimal quality.\n\nImplemented via data-driven methods (neural pixel classifier model trained with Tensorflow/Keras).\n \n### Models\n\n    ocrd resmgr download ocrd-anybaseocr-tiseg '*'\n\n### Example\n\n    ocrd-anybaseocr-tiseg -I OCR-D-DEWARP -O OCR-D-TISEG -P use_deeplr true\n\n## Block Segmenter\n\n### Method Behaviour \nFor each page, this processor takes the raw document image as an input and computes a text region segmentation for it (distinguishing various types of text blocks).\n\nThe input image need not be binarized, but should be deskewed for the module to work optimally.\n\nImplemented via data-driven methods (neural Mask-RCNN instance segmentation model trained with Tensorflow/Keras).\n \n### Models\n\n    ocrd resmgr download ocrd-anybaseocr-block-segmentation '*'\n\n### Example\n\n    ocrd-anybaseocr-block-segmentation -I OCR-D-TISEG -O OCR-D-BLOCK -P active_classes '[\"page-number\", \"paragraph\", \"heading\", \"drop-capital\", \"marginalia\", \"caption\"]' -P min_confidence 0.8 -P post_process true\n\n## Textline Segmenter\n\n### Method Behaviour \nFor each page (or region), this processor takes a cropped document image as an input and computes a textline segmentation for it.\n\nThe input image should be binarized and deskewed for the module to work. \n\nImplemented via rule-based methods (gradient and morphology based line estimation in Ocrolib).\n \n### Example\n\n    ocrd-anybaseocr-textline -I OCR-D-BLOCK -O OCR-D-LINE -P operation_level region\n\n## Document Analyser\n\n### Method Behaviour \nFor the whole document, this processor takes all the cropped page images and their corresponding text regions as input and computes the logical structure (page types and sections).\n\nThe input image should be binarized and segmented for this module to work.\n\nImplemented via data-driven methods (neural Inception-V3 image classification model trained with Tensorflow/Keras).\n\n### Models\n\n    ocrd resmgr download ocrd-anybaseocr-layout-analysis '*'\n\n### Example\n\n    ocrd-anybaseocr-layout-analysis -I OCR-D-LINE -O OCR-D-STRUCT\n\n## Testing\n\nTo test the tools under realistic conditions (on OCR-D workspaces),\ndownload [OCR-D/assets](https://github.com/OCR-D/assets). In particular,\nthe code is tested with the [dfki-testdata](https://github.com/OCR-D/assets/tree/master/data/dfki-testdata)\ndataset.\n\nTo download the data:\n\n    make assets\n\nTo run module tests:\n\n    make test\n\nTo run processor/workflow tests:\n\n    make cli-test\n\n## License\n\n\n```\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n```\n\n\n",
                    "description_content_type": "text/markdown",
                    "docs_url": null,
                    "download_url": "",
                    "downloads": {
                        "last_day": -1,
                        "last_month": -1,
                        "last_week": -1
                    },
                    "home_page": "https://github.com/OCR-D/ocrd_anybaseocr",
                    "keywords": "",
                    "license": "Apache License 2.0",
                    "maintainer": "",
                    "maintainer_email": "",
                    "name": "ocrd-anybaseocr",
                    "package_url": "https://pypi.org/project/ocrd-anybaseocr/",
                    "platform": null,
                    "project_url": "https://pypi.org/project/ocrd-anybaseocr/",
                    "project_urls": {
                        "Homepage": "https://github.com/OCR-D/ocrd_anybaseocr"
                    },
                    "release_url": "https://pypi.org/project/ocrd-anybaseocr/1.8.2/",
                    "requires_dist": [
                        "keras",
                        "keras-preprocessing",
                        "numpy (>=1.15.4)",
                        "ocrd (>=2.31)",
                        "ocrd-fork-pylsd (>=0.0.4)",
                        "ocrd-fork-ocropy (>=1.4.0a4)",
                        "opencv-python-headless (>=3.4)",
                        "pandas",
                        "scikit-image (>=0.17.2)",
                        "scipy (>=1.4.1)",
                        "setuptools (>=41.0.0)",
                        "shapely",
                        "tensorflow",
                        "torch (>=1.1.0)",
                        "torchvision (>=0.6.1)",
                        "pix2pixhd"
                    ],
                    "requires_python": "",
                    "summary": "",
                    "version": "1.8.2",
                    "yanked": false,
                    "yanked_reason": null
                },
                "last_serial": 13347873,
                "releases": {
                    "0.0.1": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "e70acb5331cd2daece04bc114622ec39",
                                "sha256": "021a114defc9702fa99988308277cab92bad1a95a8472395b8e38fde23569dc6"
                            },
                            "downloads": -1,
                            "filename": "ocrd_anybaseocr-0.0.1-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "e70acb5331cd2daece04bc114622ec39",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 95755,
                            "upload_time": "2019-12-17T13:15:51",
                            "upload_time_iso_8601": "2019-12-17T13:15:51.079869Z",
                            "url": "https://files.pythonhosted.org/packages/d6/2c/9417ad5fb850c2eb52a86e822f64741d4df65831580104a68196e0c5cbcf/ocrd_anybaseocr-0.0.1-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "84203839fe06916bc281097251eba50f",
                                "sha256": "077b3f59f09f1e315aee5fafbeef8184706d45c0a5863224f5ebef941b682281"
                            },
                            "downloads": -1,
                            "filename": "ocrd_anybaseocr-0.0.1.tar.gz",
                            "has_sig": false,
                            "md5_digest": "84203839fe06916bc281097251eba50f",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 77823,
                            "upload_time": "2019-12-17T13:15:54",
                            "upload_time_iso_8601": "2019-12-17T13:15:54.116419Z",
                            "url": "https://files.pythonhosted.org/packages/15/cf/fc744aa2323538a7a980a44af16d86ab68feba42f78ba6069763e9ed125d/ocrd_anybaseocr-0.0.1.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.0.2": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "c5901d549953a76c94947d9d90975700",
                                "sha256": "d2c40ee7773a633885e5eb5a0cc717092defac2a43ece65e4c2cb86c0cb078e2"
                            },
                            "downloads": -1,
                            "filename": "ocrd_anybaseocr-0.0.2-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "c5901d549953a76c94947d9d90975700",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 95904,
                            "upload_time": "2020-05-06T16:20:02",
                            "upload_time_iso_8601": "2020-05-06T16:20:02.892242Z",
                            "url": "https://files.pythonhosted.org/packages/08/e5/46f852f29ea150c9ec6c8d155b811d04d794ac00cae3d5e68c3efeb33a1a/ocrd_anybaseocr-0.0.2-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "6bde3c9492c60529deeed48766f2e0d3",
                                "sha256": "5b2ac01221ff4e42543d2ab25d7e0e9f4d4a2553122c862ccc65f00fef12b576"
                            },
                            "downloads": -1,
                            "filename": "ocrd-anybaseocr-0.0.2.tar.gz",
                            "has_sig": false,
                            "md5_digest": "6bde3c9492c60529deeed48766f2e0d3",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 78766,
                            "upload_time": "2020-05-06T16:20:04",
                            "upload_time_iso_8601": "2020-05-06T16:20:04.909721Z",
                            "url": "https://files.pythonhosted.org/packages/12/c0/ccf95e83a21d6f26745f36fbf6faa91cc006fddd88d367d89e99a0d2a622/ocrd-anybaseocr-0.0.2.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.0.3": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "9f9c82b3cce95a17865057b22d5233f1",
                                "sha256": "d682be552ecfa31ea8e115050c3583c4d1e68d1965e9bc055f12f01a340d4d12"
                            },
                            "downloads": -1,
                            "filename": "ocrd_anybaseocr-0.0.3-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "9f9c82b3cce95a17865057b22d5233f1",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 95912,
                            "upload_time": "2020-05-14T16:51:28",
                            "upload_time_iso_8601": "2020-05-14T16:51:28.173752Z",
                            "url": "https://files.pythonhosted.org/packages/30/5b/1eed92998dd6eaf8e392c2c571095f8c18d2b828142298c95c910e51d7b3/ocrd_anybaseocr-0.0.3-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "53e1fe4f90d2d366ac9f208f60cb6c8e",
                                "sha256": "27ccef0d482516cb5642ecee67751c3021dafe7253f0017bda1b0a162d045dc6"
                            },
                            "downloads": -1,
                            "filename": "ocrd-anybaseocr-0.0.3.tar.gz",
                            "has_sig": false,
                            "md5_digest": "53e1fe4f90d2d366ac9f208f60cb6c8e",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 78780,
                            "upload_time": "2020-05-14T16:51:29",
                            "upload_time_iso_8601": "2020-05-14T16:51:29.820929Z",
                            "url": "https://files.pythonhosted.org/packages/77/78/d8c3fcac808eab3ba1b8b851281ec3af1fb7607797205793ed5f4de7f3b8/ocrd-anybaseocr-0.0.3.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.0.4": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "47826d45a121e2f5917fe8c417bea4aa",
                                "sha256": "ece2d9928bc0854c77f5f4700871654ecd4a531407bf0e6a0aabf121ee2ba18f"
                            },
                            "downloads": -1,
                            "filename": "ocrd_anybaseocr-0.0.4-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "47826d45a121e2f5917fe8c417bea4aa",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 101694,
                            "upload_time": "2020-07-08T14:34:35",
                            "upload_time_iso_8601": "2020-07-08T14:34:35.498785Z",
                            "url": "https://files.pythonhosted.org/packages/29/98/4323070f46659c07de1de3ab8458280c7c5479d90c71a2dad2f39d65a044/ocrd_anybaseocr-0.0.4-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "e93fee1ffe23ab00243cacc6869e7bbe",
                                "sha256": "5bc974d07cbf16281e3859c095f8a0a0e9f1d5edb7458396aebf609f65cfc1e5"
                            },
                            "downloads": -1,
                            "filename": "ocrd-anybaseocr-0.0.4.tar.gz",
                            "has_sig": false,
                            "md5_digest": "e93fee1ffe23ab00243cacc6869e7bbe",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 78235,
                            "upload_time": "2020-07-08T14:34:37",
                            "upload_time_iso_8601": "2020-07-08T14:34:37.274454Z",
                            "url": "https://files.pythonhosted.org/packages/f0/7f/bb753af9d38b6835c30ed644c7fe34b7ea2fc23982943da07cf8429cd7a8/ocrd-anybaseocr-0.0.4.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.0.5": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "45bf681501e6a5b4884b0686939b8fd3",
                                "sha256": "91b2d318514304b329f786f482216d768f9f2176579f0bb1ec3b3b1969dc9a4a"
                            },
                            "downloads": -1,
                            "filename": "ocrd_anybaseocr-0.0.5-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "45bf681501e6a5b4884b0686939b8fd3",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 96408,
                            "upload_time": "2020-08-04T11:11:19",
                            "upload_time_iso_8601": "2020-08-04T11:11:19.578776Z",
                            "url": "https://files.pythonhosted.org/packages/37/79/6b1d91ecbf69f9413ebfb22663c73691e9a8c51eb9d0b5d26309e440eb7e/ocrd_anybaseocr-0.0.5-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "5686dc0daad5382c7701ed1848810e2c",
                                "sha256": "dda01326bafa86d417c66a42e163751a1cbba12b1ea9f6734afc09b8ffd7165c"
                            },
                            "downloads": -1,
                            "filename": "ocrd-anybaseocr-0.0.5.tar.gz",
                            "has_sig": false,
                            "md5_digest": "5686dc0daad5382c7701ed1848810e2c",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 77566,
                            "upload_time": "2020-08-04T11:11:22",
                            "upload_time_iso_8601": "2020-08-04T11:11:22.740172Z",
                            "url": "https://files.pythonhosted.org/packages/46/d0/1fd09707704a87b8da5c5f4b6af6454c5e2f58a72aed480f09a8ec64eef4/ocrd-anybaseocr-0.0.5.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "1.0.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "c14b57573d61d2ac9fc34046394696d3",
                                "sha256": "608d997f8d7c38da72975b831f250e4a75670efb200f49bec973db777792f067"
                            },
                            "downloads": -1,
                            "filename": "ocrd_anybaseocr-1.0.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "c14b57573d61d2ac9fc34046394696d3",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 130065,
                            "upload_time": "2020-08-21T11:51:47",
                            "upload_time_iso_8601": "2020-08-21T11:51:47.220380Z",
                            "url": "https://files.pythonhosted.org/packages/e5/7e/603573b47796153125c138de314f5820e7160e295dffbe4416d7bb5ed13c/ocrd_anybaseocr-1.0.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "ca8f2cbaa7e66d0e04850b5dc0118b23",
                                "sha256": "f0116670de0ffb6ecfc5397b92ace210c81a020acb37d091ba05274dbb7379e5"
                            },
                            "downloads": -1,
                            "filename": "ocrd-anybaseocr-1.0.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "ca8f2cbaa7e66d0e04850b5dc0118b23",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 102209,
                            "upload_time": "2020-08-21T11:51:50",
                            "upload_time_iso_8601": "2020-08-21T11:51:50.443686Z",
                            "url": "https://files.pythonhosted.org/packages/46/f6/90270f071e2cf5c267c79ffc348a17308ac2391afa9cdc014f08459c0793/ocrd-anybaseocr-1.0.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "1.0.1": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "8dcf053bdf135a97438143187fb5a8c6",
                                "sha256": "50cf391c27899806499e861163b35b32d74fb8f7930e262630cbc4198972b49a"
                            },
                            "downloads": -1,
                            "filename": "ocrd_anybaseocr-1.0.1-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "8dcf053bdf135a97438143187fb5a8c6",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 128895,
                            "upload_time": "2020-08-24T12:45:40",
                            "upload_time_iso_8601": "2020-08-24T12:45:40.148573Z",
                            "url": "https://files.pythonhosted.org/packages/ff/ed/8191606757be7c783994eb1e03d1fdaa8e14199c7c61b94e64f4b8d3a707/ocrd_anybaseocr-1.0.1-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "a6308515d62b320d40a01ec775798e5b",
                                "sha256": "1c3da9139e235a1dc5de71e813185899581ae574918133d8566355527d63b492"
                            },
                            "downloads": -1,
                            "filename": "ocrd-anybaseocr-1.0.1.tar.gz",
                            "has_sig": false,
                            "md5_digest": "a6308515d62b320d40a01ec775798e5b",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 101635,
                            "upload_time": "2020-08-24T12:45:42",
                            "upload_time_iso_8601": "2020-08-24T12:45:42.170245Z",
                            "url": "https://files.pythonhosted.org/packages/18/0c/6e20d7efb0d6317abc6c3e2a0048068ee775c8de0de3c04e9b8d4e3e4db3/ocrd-anybaseocr-1.0.1.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "1.1.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "ea5353eeabe7a770b6733fd56519671e",
                                "sha256": "56a5d9dd7abc364ede7079426764ad2619271bada39dd34ac08a1841223aff8f"
                            },
                            "downloads": -1,
                            "filename": "ocrd_anybaseocr-1.1.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "ea5353eeabe7a770b6733fd56519671e",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 128914,
                            "upload_time": "2020-11-16T16:44:54",
                            "upload_time_iso_8601": "2020-11-16T16:44:54.068533Z",
                            "url": "https://files.pythonhosted.org/packages/cd/37/659f98af024fd7bf3b29c376ec53296031d445acea3f5e2c0e911702ef50/ocrd_anybaseocr-1.1.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "59394657d7639b6ac6ee72858830d71c",
                                "sha256": "c8bc01b841a548c2cf0603f000897d7b27165fa1c066b150bf642bdaeabe891a"
                            },
                            "downloads": -1,
                            "filename": "ocrd-anybaseocr-1.1.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "59394657d7639b6ac6ee72858830d71c",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 101630,
                            "upload_time": "2020-11-16T16:44:55",
                            "upload_time_iso_8601": "2020-11-16T16:44:55.901135Z",
                            "url": "https://files.pythonhosted.org/packages/2c/dd/312b02adf47393e2ca0e14e94025770400666298e3cea67df685dd69a078/ocrd-anybaseocr-1.1.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "1.2.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "9d9416015a52cd5b8ed95c8fe2a73a21",
                                "sha256": "7d69e2aa78f67ba54daffb859cb34eca7a441fad6cc4194a5f41407bf1e69e20"
                            },
                            "downloads": -1,
                            "filename": "ocrd_anybaseocr-1.2.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "9d9416015a52cd5b8ed95c8fe2a73a21",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 128912,
                            "upload_time": "2021-01-27T18:08:02",
                            "upload_time_iso_8601": "2021-01-27T18:08:02.916291Z",
                            "url": "https://files.pythonhosted.org/packages/3c/ef/f331a67f36bb323b5e2cabeb998af37b289cce945818c94acd26ce82b50e/ocrd_anybaseocr-1.2.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "1.3.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "152d57203038f7426cdc719733046683",
                                "sha256": "e1b3a5f5e2722bf8cac82bb1c908a2c6b344877553fbf0951b41b21801ac06e0"
                            },
                            "downloads": -1,
                            "filename": "ocrd_anybaseocr-1.3.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "152d57203038f7426cdc719733046683",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 128902,
                            "upload_time": "2021-01-28T12:27:19",
                            "upload_time_iso_8601": "2021-01-28T12:27:19.257851Z",
                            "url": "https://files.pythonhosted.org/packages/11/c1/f10f24931083c407b7b12559cdd9ece69dbc7945531428f97ca9bdf90543/ocrd_anybaseocr-1.3.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "e847d6c26aab9b7a087fd1b039ac8704",
                                "sha256": "3997075607d0d52f9fdcdaf1856d516635d9781d148e9bc4b01d05f3a576be94"
                            },
                            "downloads": -1,
                            "filename": "ocrd-anybaseocr-1.3.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "e847d6c26aab9b7a087fd1b039ac8704",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 101642,
                            "upload_time": "2021-01-28T12:27:21",
                            "upload_time_iso_8601": "2021-01-28T12:27:21.864576Z",
                            "url": "https://files.pythonhosted.org/packages/90/10/fbbde6b47c0555c8e12064312d5735bfcb2ae62b3df06dfcc73f851d50f5/ocrd-anybaseocr-1.3.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "1.4.1": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "a8a3b190d48443b2d56c62e37d70b849",
                                "sha256": "496b0500ee16927af3996b5b405a331ab4904055f47fddf77a60621305fd2ad1"
                            },
                            "downloads": -1,
                            "filename": "ocrd_anybaseocr-1.4.1-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "a8a3b190d48443b2d56c62e37d70b849",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 138106,
                            "upload_time": "2021-04-23T16:23:51",
                            "upload_time_iso_8601": "2021-04-23T16:23:51.275332Z",
                            "url": "https://files.pythonhosted.org/packages/53/ab/ab197fc42b56ef7e4067735ce095faa7c9edb509cd5dd91879a250ed4340/ocrd_anybaseocr-1.4.1-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "923fb3f6e67bad3dee5dac159b23c547",
                                "sha256": "1fceaff7805e4d41df607727b4140cc1bb77e8b66476e18555bc05c60f7a06bd"
                            },
                            "downloads": -1,
                            "filename": "ocrd-anybaseocr-1.4.1.tar.gz",
                            "has_sig": false,
                            "md5_digest": "923fb3f6e67bad3dee5dac159b23c547",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 113411,
                            "upload_time": "2021-04-23T16:23:52",
                            "upload_time_iso_8601": "2021-04-23T16:23:52.901033Z",
                            "url": "https://files.pythonhosted.org/packages/5a/8d/a622305b0b4be1bcc701f992dde7939e4bfc28bfcbe6fb44eaab4eef41af/ocrd-anybaseocr-1.4.1.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "1.5.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "6754c74f062236030d13e56b6e531eae",
                                "sha256": "09447f6882cbabecc06ea76e643facbe65cc9e82a6c583aeedaee0bad0a7dd46"
                            },
                            "downloads": -1,
                            "filename": "ocrd_anybaseocr-1.5.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "6754c74f062236030d13e56b6e531eae",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 139648,
                            "upload_time": "2021-05-19T11:47:10",
                            "upload_time_iso_8601": "2021-05-19T11:47:10.503096Z",
                            "url": "https://files.pythonhosted.org/packages/c4/bd/7bccda50124e756bef56009ca32bab7ea5ff1d6228419b9dea3658e51970/ocrd_anybaseocr-1.5.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "72da2829348790c955012bc3cd62f643",
                                "sha256": "2583ec7d2b46b4fe290c19febf0da5658adc4fb9b23d5c002863be7a29c1c376"
                            },
                            "downloads": -1,
                            "filename": "ocrd-anybaseocr-1.5.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "72da2829348790c955012bc3cd62f643",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 115043,
                            "upload_time": "2021-05-19T11:47:12",
                            "upload_time_iso_8601": "2021-05-19T11:47:12.674779Z",
                            "url": "https://files.pythonhosted.org/packages/fc/8d/7aef0ef6a19765565dc0d1e39a8b4b968403211b0c526253b6dc310ec746/ocrd-anybaseocr-1.5.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "1.6.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "3356c620928bba22951bc62387f9ca6b",
                                "sha256": "21cdffd161c11ea454201cd56edff4c0d4b5810c3b84c947fd8ac3e5a805043c"
                            },
                            "downloads": -1,
                            "filename": "ocrd_anybaseocr-1.6.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "3356c620928bba22951bc62387f9ca6b",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 139558,
                            "upload_time": "2021-05-20T15:01:14",
                            "upload_time_iso_8601": "2021-05-20T15:01:14.278901Z",
                            "url": "https://files.pythonhosted.org/packages/ba/c1/bcc88acdce787fd88866432e0b3e3db3b98d8f4bd0433acb18524ba373a7/ocrd_anybaseocr-1.6.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "213ae974f2dfb710dc2f938224f37d01",
                                "sha256": "8c6feff7f25661622caa992a5fd042f4a19c061b2bf17b1748c871f5bd1429b3"
                            },
                            "downloads": -1,
                            "filename": "ocrd-anybaseocr-1.6.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "213ae974f2dfb710dc2f938224f37d01",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 114969,
                            "upload_time": "2021-05-20T15:01:16",
                            "upload_time_iso_8601": "2021-05-20T15:01:16.372949Z",
                            "url": "https://files.pythonhosted.org/packages/3f/52/807c894c20dc10bdedd80eee02ad16e675f6f7b4de6dd58ed273752d1ccf/ocrd-anybaseocr-1.6.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "1.7.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "9579dbc29ebfe3dcf0ec049ea2075631",
                                "sha256": "cba5ab395be9ba600656607e5b65e7732b45fe04dd9f8ff8c41a01411b54382c"
                            },
                            "downloads": -1,
                            "filename": "ocrd_anybaseocr-1.7.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "9579dbc29ebfe3dcf0ec049ea2075631",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 140888,
                            "upload_time": "2022-02-22T17:12:45",
                            "upload_time_iso_8601": "2022-02-22T17:12:45.023688Z",
                            "url": "https://files.pythonhosted.org/packages/1c/bb/37c0f55584dcf5aa73dcc97d0612bd6e0a43c605a9d49aab57fb246dd76a/ocrd_anybaseocr-1.7.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "e4480ab2daddcdd5d145cdf55f847580",
                                "sha256": "7e5a1267e7347b61fba4b54677cd674ae74a8e925478a1b4c18c47968893cebe"
                            },
                            "downloads": -1,
                            "filename": "ocrd-anybaseocr-1.7.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "e4480ab2daddcdd5d145cdf55f847580",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 118378,
                            "upload_time": "2022-02-22T17:12:46",
                            "upload_time_iso_8601": "2022-02-22T17:12:46.728661Z",
                            "url": "https://files.pythonhosted.org/packages/23/79/885c14cfa6c08f168e9ffd6c830139099224ac849aaef1a1c8fe5604f827/ocrd-anybaseocr-1.7.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "1.8.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "e64a14d7406a7d9c84a76b61f2aab289",
                                "sha256": "39a60a4bad5400c8349fb1eb7c74eab0fde63c70bda21aa6171a8ac54ed4ecfe"
                            },
                            "downloads": -1,
                            "filename": "ocrd_anybaseocr-1.8.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "e64a14d7406a7d9c84a76b61f2aab289",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 140911,
                            "upload_time": "2022-03-25T15:49:02",
                            "upload_time_iso_8601": "2022-03-25T15:49:02.414338Z",
                            "url": "https://files.pythonhosted.org/packages/fb/29/deb29915edda6d808d7add975557b1ab099c9e7c5c43a25d6056ae810c58/ocrd_anybaseocr-1.8.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "5fa7a7306b505e6102797bf4b7c0ee31",
                                "sha256": "89445f74dfd107bed84a98a8aea4e1debaac88f0e96a47612cf168a5dc54d691"
                            },
                            "downloads": -1,
                            "filename": "ocrd-anybaseocr-1.8.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "5fa7a7306b505e6102797bf4b7c0ee31",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 93746,
                            "upload_time": "2022-03-25T15:49:04",
                            "upload_time_iso_8601": "2022-03-25T15:49:04.123992Z",
                            "url": "https://files.pythonhosted.org/packages/09/ba/368c6901abd9ab8b24173233ececc6b877f83d44149ba769aea64854f96c/ocrd-anybaseocr-1.8.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "1.8.2": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "5dc4db13d62fb047648cc22232dd25da",
                                "sha256": "38951e40c1696f157792b75884cfaf19b50d4bd9cc4f291b1f47b3bb515e8949"
                            },
                            "downloads": -1,
                            "filename": "ocrd_anybaseocr-1.8.2-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "5dc4db13d62fb047648cc22232dd25da",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 140914,
                            "upload_time": "2022-03-30T15:17:40",
                            "upload_time_iso_8601": "2022-03-30T15:17:40.112947Z",
                            "url": "https://files.pythonhosted.org/packages/34/76/4ee327beaa5f092ec018137301bea51ae18e65be588696fbb02b7b3e1625/ocrd_anybaseocr-1.8.2-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "d43b0366d7871c95471dc802f99f8c89",
                                "sha256": "569f0f5f052a64b2105bc2c8de018f4c9e2a49570aa699be541e247fb8762a13"
                            },
                            "downloads": -1,
                            "filename": "ocrd-anybaseocr-1.8.2.tar.gz",
                            "has_sig": false,
                            "md5_digest": "d43b0366d7871c95471dc802f99f8c89",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 93767,
                            "upload_time": "2022-03-30T15:17:42",
                            "upload_time_iso_8601": "2022-03-30T15:17:42.577645Z",
                            "url": "https://files.pythonhosted.org/packages/bc/83/5feb2685645467d72f7e37c9057769389df87ed63989da2cfc505b28cb5b/ocrd-anybaseocr-1.8.2.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ]
                },
                "urls": [
                    {
                        "comment_text": "",
                        "digests": {
                            "md5": "5dc4db13d62fb047648cc22232dd25da",
                            "sha256": "38951e40c1696f157792b75884cfaf19b50d4bd9cc4f291b1f47b3bb515e8949"
                        },
                        "downloads": -1,
                        "filename": "ocrd_anybaseocr-1.8.2-py3-none-any.whl",
                        "has_sig": false,
                        "md5_digest": "5dc4db13d62fb047648cc22232dd25da",
                        "packagetype": "bdist_wheel",
                        "python_version": "py3",
                        "requires_python": null,
                        "size": 140914,
                        "upload_time": "2022-03-30T15:17:40",
                        "upload_time_iso_8601": "2022-03-30T15:17:40.112947Z",
                        "url": "https://files.pythonhosted.org/packages/34/76/4ee327beaa5f092ec018137301bea51ae18e65be588696fbb02b7b3e1625/ocrd_anybaseocr-1.8.2-py3-none-any.whl",
                        "yanked": false,
                        "yanked_reason": null
                    },
                    {
                        "comment_text": "",
                        "digests": {
                            "md5": "d43b0366d7871c95471dc802f99f8c89",
                            "sha256": "569f0f5f052a64b2105bc2c8de018f4c9e2a49570aa699be541e247fb8762a13"
                        },
                        "downloads": -1,
                        "filename": "ocrd-anybaseocr-1.8.2.tar.gz",
                        "has_sig": false,
                        "md5_digest": "d43b0366d7871c95471dc802f99f8c89",
                        "packagetype": "sdist",
                        "python_version": "source",
                        "requires_python": null,
                        "size": 93767,
                        "upload_time": "2022-03-30T15:17:42",
                        "upload_time_iso_8601": "2022-03-30T15:17:42.577645Z",
                        "url": "https://files.pythonhosted.org/packages/bc/83/5feb2685645467d72f7e37c9057769389df87ed63989da2cfc505b28cb5b/ocrd-anybaseocr-1.8.2.tar.gz",
                        "yanked": false,
                        "yanked_reason": null
                    }
                ],
                "vulnerabilities": []
            },
            "url": "https://github.com/OCR-D/ocrd_anybaseocr"
        },
        "url": "https://github.com/OCR-D/ocrd_anybaseocr"
    },
    {
        "compliant_cli": false,
        "files": {
            "Dockerfile": null,
            "README.md": "dinglehopper\n============\n\ndinglehopper is an OCR evaluation tool and reads\n[ALTO](https://github.com/altoxml),\n[PAGE](https://github.com/PRImA-Research-Lab/PAGE-XML) and text files.  It\ncompares a ground truth (GT) document page with a OCR result page to compute\nmetrics and a word/character differences report.\n\n[![Build Status](https://circleci.com/gh/qurator-spk/dinglehopper.svg?style=svg)](https://circleci.com/gh/qurator-spk/dinglehopper)\n\nGoals\n-----\n* Useful\n  * As a UI tool\n  * For an automated evaluation\n  * As a library\n* Unicode support\n\nInstallation\n------------\nIt's best to use pip, e.g.:\n~~~\nsudo pip install .\n~~~\n\nUsage\n-----\n~~~\nUsage: dinglehopper [OPTIONS] GT OCR [REPORT_PREFIX]\n\n  Compare the PAGE/ALTO/text document GT against the document OCR.\n\n  dinglehopper detects if GT/OCR are ALTO or PAGE XML documents to extract\n  their text and falls back to plain text if no ALTO or PAGE is detected.\n\n  The files GT and OCR are usually a ground truth document and the result of\n  an OCR software, but you may use dinglehopper to compare two OCR results.\n  In that case, use --no-metrics to disable the then meaningless metrics and\n  also change the color scheme from green/red to blue.\n\n  The comparison report will be written to $REPORT_PREFIX.{html,json}, where\n  $REPORT_PREFIX defaults to \"report\". The reports include the character\n  error rate (CER) and the word error rate (WER).\n\n  By default, the text of PAGE files is extracted on 'region' level. You may\n  use \"--textequiv-level line\" to extract from the level of TextLine tags.\n\nOptions:\n  --metrics / --no-metrics  Enable/disable metrics and green/red\n  --textequiv-level LEVEL   PAGE TextEquiv level to extract text from\n  --progress                Show progress bar\n  --help                    Show this message and exit.\n~~~\n\nFor example:\n~~~\ndinglehopper some-document.gt.page.xml some-document.ocr.alto.xml\n~~~\nThis generates `report.html` and `report.json`.\n\n![dinglehopper displaying metrics and character differences](.screenshots/dinglehopper.png?raw=true)\n\n### dinglehopper-line-dirs\nYou also may want to compare a directory of GT text files (i.e. `gt/line0001.gt.txt`)\nwith a directory of OCR text files (i.e. `ocr/line0001.some-ocr.txt`) with a separate\nCLI interface:\n\n~~~\ndinglehopper-line-dirs gt/ ocr/\n~~~\n\n### dinglehopper-extract\nThe tool `dinglehopper-extract` extracts the text of the given input file on\nstdout, for example:\n\n~~~\ndinglehopper-extract --textequiv-level line OCR-D-GT-PAGE/00000024.page.xml\n~~~\n\n### OCR-D\nAs a OCR-D processor:\n~~~\nocrd-dinglehopper -I OCR-D-GT-PAGE,OCR-D-OCR-TESS -O OCR-D-OCR-TESS-EVAL\n~~~\nThis generates HTML and JSON reports in the `OCR-D-OCR-TESS-EVAL` filegroup.\n\nThe OCR-D processor has these parameters:\n\n| Parameter                 | Meaning                                                             |\n| ------------------------- | ------------------------------------------------------------------- |\n| `-P metrics false`        | Disable metrics and the green-red color scheme (default: enabled)   |\n| `-P textequiv_level line` | (PAGE) Extract text from TextLine level (default: TextRegion level) |\n\nFor example:\n~~~\nocrd-dinglehopper -I ABBYY-FULLTEXT,OCR-D-OCR-CALAMARI -O OCR-D-OCR-COMPARE-ABBYY-CALAMARI -P metrics false\n~~~\n\nDeveloper information\n---------------------\n*Please refer to [README-DEV.md](README-DEV.md).*\n",
            "ocrd-tool.json": "{\n  \"git_url\": \"https://github.com/qurator-spk/dinglehopper\",\n  \"tools\": {\n    \"ocrd-dinglehopper\": {\n      \"executable\": \"ocrd-dinglehopper\",\n      \"description\": \"Evaluate OCR text against ground truth with dinglehopper\",\n      \"input_file_grp\": [\n        \"OCR-D-GT-PAGE\",\n        \"OCR-D-OCR\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-OCR-EVAL\"\n      ],\n      \"categories\": [\n        \"Quality assurance\"\n      ],\n      \"steps\": [\n        \"recognition/text-recognition\"\n      ],\n      \"parameters\": {\n        \"metrics\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"description\": \"Enable/disable metrics and green/red\"\n        },\n        \"textequiv_level\": {\n          \"type\": \"string\",\n          \"enum\": [\"region\", \"line\"],\n          \"default\": \"region\",\n          \"description\": \"PAGE XML hierarchy level to extract the text from\"\n        }\n      }\n    }\n  }\n}\n",
            "setup.py": "from io import open\nfrom setuptools import find_packages, setup\n\nwith open(\"requirements.txt\") as fp:\n    install_requires = fp.read()\n\nwith open('requirements-dev.txt') as fp:\n    tests_require = fp.read()\n\nsetup(\n    name=\"dinglehopper\",\n    author=\"Mike Gerber, The QURATOR SPK Team\",\n    author_email=\"mike.gerber@sbb.spk-berlin.de, qurator@sbb.spk-berlin.de\",\n    description=\"The OCR evaluation tool\",\n    long_description=open(\"README.md\", \"r\", encoding=\"utf-8\").read(),\n    long_description_content_type=\"text/markdown\",\n    keywords=\"qurator ocr\",\n    license=\"Apache\",\n    namespace_packages=[\"qurator\"],\n    packages=find_packages(exclude=[\"*.tests\", \"*.tests.*\", \"tests.*\", \"tests\"]),\n    install_requires=install_requires,\n    tests_require=tests_require,\n    package_data={\n        \"\": [\"*.json\", \"templates/*\"],\n    },\n    entry_points={\n        \"console_scripts\": [\n            \"dinglehopper=qurator.dinglehopper.cli:main\",\n            \"dinglehopper-line-dirs=qurator.dinglehopper.cli_line_dirs:main\",\n            \"dinglehopper-extract=qurator.dinglehopper.cli_extract:main\",\n            \"ocrd-dinglehopper=qurator.dinglehopper.ocrd_cli:ocrd_dinglehopper\",\n        ]\n    },\n)\n"
        },
        "git": {
            "last_commit": "Wed Mar 30 13:40:36 2022 +0200",
            "latest_tag": "",
            "number_of_commits": "269",
            "url": "https://github.com/qurator-spk/dinglehopper"
        },
        "name": "dinglehopper",
        "ocrd_tool": {
            "git_url": "https://github.com/qurator-spk/dinglehopper",
            "tools": {
                "ocrd-dinglehopper": {
                    "categories": [
                        "Quality assurance"
                    ],
                    "description": "Evaluate OCR text against ground truth with dinglehopper",
                    "executable": "ocrd-dinglehopper",
                    "input_file_grp": [
                        "OCR-D-GT-PAGE",
                        "OCR-D-OCR"
                    ],
                    "output_file_grp": [
                        "OCR-D-OCR-EVAL"
                    ],
                    "parameters": {
                        "metrics": {
                            "default": true,
                            "description": "Enable/disable metrics and green/red",
                            "type": "boolean"
                        },
                        "textequiv_level": {
                            "default": "region",
                            "description": "PAGE XML hierarchy level to extract the text from",
                            "enum": [
                                "region",
                                "line"
                            ],
                            "type": "string"
                        }
                    },
                    "steps": [
                        "recognition/text-recognition"
                    ]
                }
            }
        },
        "ocrd_tool_validate": "<report valid=\"false\">\n  <error>[] 'version' is a required property</error>\n</report>",
        "official": false,
        "org_plus_name": "qurator-spk/dinglehopper",
        "python": {
            "author": "Mike Gerber, The QURATOR SPK Team",
            "author-email": "mike.gerber@sbb.spk-berlin.de, qurator@sbb.spk-berlin.de",
            "name": "dinglehopper",
            "pypi": null,
            "url": "UNKNOWN"
        },
        "url": "https://github.com/qurator-spk/dinglehopper"
    },
    {
        "compliant_cli": true,
        "files": {
            "Dockerfile": null,
            "README.md": "# ocrd_typegroups_classifier\n\n> Typegroups classifier for OCR\n\n## Installation\n\n### From PyPI\n\n```sh\npip3 install ocrd_typegroup_classifier\n```\n\n### From source\n\nIf needed, create a virtual environment for Python 3 (it was tested\nsuccessfully with Python 3.7), activate it, and install ocrd.\n\n```sh\nvirtualenv -p python3 ocrd-venv3\nsource ocrd-venv3/bin/activate\npip3 install ocrd\n```\n\nEnter in the folder containing the tool:\n\n```\ncd ocrd_typegroups_classifier/\n```\n\nInstall the module and its dependencies\n\n```\nmake install\n```\n\nFinally, run the test:\n\n```\nsh test/test.sh\n```\n\n## Models\n\nThe model densenet121.tgc is based on a DenseNet with 121 layers, and\nis trained on the following 12 classes:\n\n- Antiqua\n\n- Bastarda\n\n- Fraktur\n\n- Gotico-Antiqua\n\n- Greek\n\n- Hebrew\n\n- Italic\n\n- Rotunda\n\n- Schwabacher\n\n- Textura\n\n- other_font\n\n- not_a_font\n\nThe confusion matrix obtained with a DenseNet-121 on the pages with a single font from the dataset (see \"Training a classifier\" below) is:\n\n|                | Antiqua | Bastarda | Fraktur | Got.-Ant. | Greek | Hebrew | Italic | Rotunda | Schwabacher | Textura | Other font | Not a font | Recall |\n|----------------|---------|----------|---------|-----------|-------|--------|--------|---------|-------------|---------|------------|------------|--------|\n| Antiqua        | 1531    |          | 10      |           |       |        | 5      | 2       |             |         |            | 5          | 98.6%  |\n| Bastarda       |         | 286      |         |           |       |        |        | 6       | 10          | 1       |            |            | 94.4   |\n| Fraktur        |         |          | 1933    |           |       |        |        | 1       | 5           | 1       |            | 2          | 99.5%  |\n| Gotico-Antiqua |         |          |         | 269       |       |        |        |         |             | 1       |            |            | 99.6   |\n| Greek          |         |          |         |           | 58    | 1      |        |         |             |         | 1          |            | 96.7%  |\n| Hebrew         |         |          |         |           | 1     | 326    |        |         |             |         |            |            | 99.7%  |\n| Italic         |         |          | 1       |           |       |        | 187    |         |             |         |            |            | 99.5%  |\n| Rotunda        |         |          |         | 9         |       |        |        | 1495    | 5           | 11      |            | 1          | 98.3%  |\n| Schwabacher    |         | 16       | 4       |           |       |        |        | 2       | 452         |         |            |            | 95.4%  |\n| Textura        |         |          |         | 2         |       |        |        |         |             | 371     |            | 1          | 99.2%  |\n| Other font     |         |          |         |           |       |        |        |         |             |         | 288        | 15         | 94.1%  |\n| Not a font     | 4       |          | 2       | 2         | 1     |        | 5      | 1       | 7           |         | 4          | 2331       | 98.9%  |\n| Precision      | 99.7%   | 94.7%    | 99.1%   | 95.4%     | 96.7% | 99.4%  | 94.9%  | 99.1%   | 94.2%       | 96.4%   | 98.3%      | 99.0%      |        |\n\n## Updating PyTorch\nIf you update PyTorch, it is possible that the model cannot be loaded\nanymore. To solve this issue, proceed as follows.\n\n1) Downgrade to a version of PyTorch which can load the model,\n\n2) Run the following code:\n\n```python\nimport torch\nfrom ocrd_typegroups_classifier.typegroups_classifier import TypegroupsClassifier\ntgc = TypegroupsClassifier.load('ocrd_typegroups_classifier/models/densenet121.tgc')\ntorch.save(tgc.model.state_dict(), 'model.pt')\n```\n\n3) Upgrade to the desired version of PyTorch\n\n4) Run the following code:\n\n```python\nimport torch\nfrom ocrd_typegroups_classifier.network.densenet import densenet121\nfrom ocrd_typegroups_classifier.typegroups_classifier import TypegroupsClassifier\nprint('Creating the network')\nnet = densenet121(num_classes=12)\nnet.load_state_dict(torch.load('model.pt'))\nprint('Creating the classifier')\ntgc = TypegroupsClassifier(\n    {\n        'antiqua':0,\n        'bastarda':1,\n        'fraktur':2,\n        'gotico_antiqua':3,\n        'greek':4,\n        'hebrew':5,\n        'italic':6,\n        'rotunda':7,\n        'schwabacher':8,\n        'textura':9,\n        'other_font':10,\n        'not_a_font':11\n    },\n    net\n)\ntgc.save('ocrd_typegroups_classifier/models/densenet121.tgc')\n```\n\n5) delete model.mdl\n\nIf PyTorch cannot load model.mdl, then you will have to train a new\nmodel from scratch.\n\n\n## Training a classifier\n\nThe data used for training the classifier provided in this repository\nis freely available at the following address:\n\nhttps://doi.org/10.1145/3352631.3352640\n\nThe script in tool/create_training_patches.py can be used to extract\na suitable amount of crops to train the network, with data balancing.\n\nThe script in tools/train_densenet121.py continues the training of\nany existing densenet121.tgc in the models/ folder. If there is none\npresent, then a new one is created and trained from scratch.\n\nNote that you might have to adapt the paths in these scripts so that\nthey correspond to where data is in your system.\n\n\n## Generating activation heatmaps\n\nFor investigation purpose, it is possible to produce heatmaps showing\nwhere and how much the network gets activated for specific classes.\n\nYou need first to install an additional dependency which is not required\nby the OCR-D tool with:\n\n```\npip install tqdm\n```\n\nThen, you can run heatmap.py:\n\n```\npython3 heatmap.py --layer 9 --image_path sample2.jpg\n```\n\nYou can specify which layer of the network you are interested in,\nbetween 0 and 11. Best results are to be expected with larger values.\nIf no layer is specified, then the 11th is used by default.\n",
            "ocrd-tool.json": "{\n  \"version\": \"0.3.0\",\n  \"git_url\": \"https://github.com/seuretm/ocrd_typegroups_classifier\",\n  \"tools\": {\n    \"ocrd-typegroups-classifier\": {\n      \"executable\": \"ocrd-typegroups-classifier\",\n      \"description\": \"Classification of 15th century type groups\",\n      \"categories\": [\n        \"Text recognition and optimization\"\n      ],\n      \"steps\": [\n        \"recognition/font-identification\"\n      ],\n      \"input_file_grp\": [\"OCR-D-IMG\"],\n      \"output_file_grp\": [\"OCR-D-IMG-FONTS\"],\n      \"parameters\": {\n        \"network\": {\n          \"description\": \"The file name of the neural network to use, including sufficient path information\",\n          \"type\": \"string\",\n          \"required\": false\n        },\n        \"stride\": {\n          \"description\": \"Stride applied to the CNN on the image. Should be between 1 and 224. Smaller values increase the computation time.\",\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"default\": 112\n        }\n      }\n    }\n  }\n}\n",
            "setup.py": "# -*- coding: utf-8 -*-\nimport codecs\nimport json\n\nfrom setuptools import setup, find_packages\n\nwith codecs.open('README.md', encoding='utf-8') as f:\n    README = f.read()\nwith open('./ocrd-tool.json', 'r') as f:\n    version = json.load(f)['version']\n\nsetup(\n    name='ocrd_typegroups_classifier',\n    version=version,\n    description='Typegroups classifier for OCR',\n    long_description=README,\n    long_description_content_type='text/markdown',\n    author='Matthias Seuret, Konstantin Baierer',\n    author_email='seuretm@users.noreply.github.com',\n    url='https://github.com/OCR-D/ocrd_typegroups_classifier',\n    license='Apache License 2.0',\n    packages=find_packages(exclude=('tests', 'docs')),\n    include_package_data=True,\n    install_requires=open('requirements.txt').read().split('\\n'),\n    package_data={\n        '': ['*.json', '*.tgc'],\n    },\n    entry_points={\n        'console_scripts': [\n            'typegroups-classifier=ocrd_typegroups_classifier.cli.simple:cli',\n            'ocrd-typegroups-classifier=ocrd_typegroups_classifier.cli.ocrd_cli:cli',\n        ]\n    },\n)\n"
        },
        "git": {
            "last_commit": "Thu Jan 28 14:45:51 2021 +0100",
            "latest_tag": "v0.3.0",
            "number_of_commits": "112",
            "url": "https://github.com/OCR-D/ocrd_typegroups_classifier"
        },
        "name": "ocrd_typegroups_classifier",
        "ocrd_tool": {
            "git_url": "https://github.com/seuretm/ocrd_typegroups_classifier",
            "tools": {
                "ocrd-typegroups-classifier": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "Classification of 15th century type groups",
                    "executable": "ocrd-typegroups-classifier",
                    "input_file_grp": [
                        "OCR-D-IMG"
                    ],
                    "output_file_grp": [
                        "OCR-D-IMG-FONTS"
                    ],
                    "parameters": {
                        "network": {
                            "description": "The file name of the neural network to use, including sufficient path information",
                            "required": false,
                            "type": "string"
                        },
                        "stride": {
                            "default": 112,
                            "description": "Stride applied to the CNN on the image. Should be between 1 and 224. Smaller values increase the computation time.",
                            "format": "integer",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "recognition/font-identification"
                    ]
                }
            },
            "version": "0.3.0"
        },
        "ocrd_tool_validate": "<report valid=\"true\">\n</report>",
        "official": true,
        "org_plus_name": "OCR-D/ocrd_typegroups_classifier",
        "python": {
            "author": "Matthias Seuret, Konstantin Baierer",
            "author-email": "seuretm@users.noreply.github.com",
            "name": "ocrd_typegroups_classifier",
            "pypi": {
                "info": {
                    "author": "Matthias Seuret, Konstantin Baierer",
                    "author_email": "seuretm@users.noreply.github.com",
                    "bugtrack_url": null,
                    "classifiers": [],
                    "description": "# ocrd_typegroups_classifier\n\n> Typegroups classifier for OCR\n\n## Installation\n\n### From PyPI\n\n```sh\npip3 install ocrd_typegroup_classifier\n```\n\n### From source\n\nIf needed, create a virtual environment for Python 3 (it was tested\nsuccessfully with Python 3.7), activate it, and install ocrd.\n\n```sh\nvirtualenv -p python3 ocrd-venv3\nsource ocrd-venv3/bin/activate\npip3 install ocrd\n```\n\nEnter in the folder containing the tool:\n\n```\ncd ocrd_typegroups_classifier/\n```\n\nInstall the module and its dependencies\n\n```\nmake install\n```\n\nFinally, run the test:\n\n```\nsh test/test.sh\n```\n\n## Models\n\nThe model densenet121.tgc is based on a DenseNet with 121 layers, and\nis trained on the following 12 classes:\n\n- Antiqua\n\n- Bastarda\n\n- Fraktur\n\n- Gotico-Antiqua\n\n- Greek\n\n- Hebrew\n\n- Italic\n\n- Rotunda\n\n- Schwabacher\n\n- Textura\n\n- other_font\n\n- not_a_font\n\nThe confusion matrix obtained with a DenseNet-121 on the pages with a single font from the dataset (see \"Training a classifier\" below) is:\n\n|                | Antiqua | Bastarda | Fraktur | Got.-Ant. | Greek | Hebrew | Italic | Rotunda | Schwabacher | Textura | Other font | Not a font | Recall |\n|----------------|---------|----------|---------|-----------|-------|--------|--------|---------|-------------|---------|------------|------------|--------|\n| Antiqua        | 1531    |          | 10      |           |       |        | 5      | 2       |             |         |            | 5          | 98.6%  |\n| Bastarda       |         | 286      |         |           |       |        |        | 6       | 10          | 1       |            |            | 94.4   |\n| Fraktur        |         |          | 1933    |           |       |        |        | 1       | 5           | 1       |            | 2          | 99.5%  |\n| Gotico-Antiqua |         |          |         | 269       |       |        |        |         |             | 1       |            |            | 99.6   |\n| Greek          |         |          |         |           | 58    | 1      |        |         |             |         | 1          |            | 96.7%  |\n| Hebrew         |         |          |         |           | 1     | 326    |        |         |             |         |            |            | 99.7%  |\n| Italic         |         |          | 1       |           |       |        | 187    |         |             |         |            |            | 99.5%  |\n| Rotunda        |         |          |         | 9         |       |        |        | 1495    | 5           | 11      |            | 1          | 98.3%  |\n| Schwabacher    |         | 16       | 4       |           |       |        |        | 2       | 452         |         |            |            | 95.4%  |\n| Textura        |         |          |         | 2         |       |        |        |         |             | 371     |            | 1          | 99.2%  |\n| Other font     |         |          |         |           |       |        |        |         |             |         | 288        | 15         | 94.1%  |\n| Not a font     | 4       |          | 2       | 2         | 1     |        | 5      | 1       | 7           |         | 4          | 2331       | 98.9%  |\n| Precision      | 99.7%   | 94.7%    | 99.1%   | 95.4%     | 96.7% | 99.4%  | 94.9%  | 99.1%   | 94.2%       | 96.4%   | 98.3%      | 99.0%      |        |\n\n## Updating PyTorch\nIf you update PyTorch, it is possible that the model cannot be loaded\nanymore. To solve this issue, proceed as follows.\n\n1) Downgrade to a version of PyTorch which can load the model,\n\n2) Run the following code:\n\n```python\nimport torch\nfrom ocrd_typegroups_classifier.typegroups_classifier import TypegroupsClassifier\ntgc = TypegroupsClassifier.load('ocrd_typegroups_classifier/models/densenet121.tgc')\ntorch.save(tgc.model.state_dict(), 'model.pt')\n```\n\n3) Upgrade to the desired version of PyTorch\n\n4) Run the following code:\n\n```python\nimport torch\nfrom ocrd_typegroups_classifier.network.densenet import densenet121\nfrom ocrd_typegroups_classifier.typegroups_classifier import TypegroupsClassifier\nprint('Creating the network')\nnet = densenet121(num_classes=12)\nnet.load_state_dict(torch.load('model.pt'))\nprint('Creating the classifier')\ntgc = TypegroupsClassifier(\n    {\n        'antiqua':0,\n        'bastarda':1,\n        'fraktur':2,\n        'gotico_antiqua':3,\n        'greek':4,\n        'hebrew':5,\n        'italic':6,\n        'rotunda':7,\n        'schwabacher':8,\n        'textura':9,\n        'other_font':10,\n        'not_a_font':11\n    },\n    net\n)\ntgc.save('ocrd_typegroups_classifier/models/densenet121.tgc')\n```\n\n5) delete model.mdl\n\nIf PyTorch cannot load model.mdl, then you will have to train a new\nmodel from scratch.\n\n\n## Training a classifier\n\nThe data used for training the classifier provided in this repository\nis freely available at the following address:\n\nhttps://doi.org/10.1145/3352631.3352640\n\nThe script in tool/create_training_patches.py can be used to extract\na suitable amount of crops to train the network, with data balancing.\n\nThe script in tools/train_densenet121.py continues the training of\nany existing densenet121.tgc in the models/ folder. If there is none\npresent, then a new one is created and trained from scratch.\n\nNote that you might have to adapt the paths in these scripts so that\nthey correspond to where data is in your system.\n\n\n## Generating activation heatmaps\n\nFor investigation purpose, it is possible to produce heatmaps showing\nwhere and how much the network gets activated for specific classes.\n\nYou need first to install an additional dependency which is not required\nby the OCR-D tool with:\n\n```\npip install tqdm\n```\n\nThen, you can run heatmap.py:\n\n```\npython3 heatmap.py --layer 9 --image_path sample2.jpg\n```\n\nYou can specify which layer of the network you are interested in,\nbetween 0 and 11. Best results are to be expected with larger values.\nIf no layer is specified, then the 11th is used by default.\n\n\n",
                    "description_content_type": "text/markdown",
                    "docs_url": null,
                    "download_url": "",
                    "downloads": {
                        "last_day": -1,
                        "last_month": -1,
                        "last_week": -1
                    },
                    "home_page": "https://github.com/OCR-D/ocrd_typegroups_classifier",
                    "keywords": "",
                    "license": "Apache License 2.0",
                    "maintainer": "",
                    "maintainer_email": "",
                    "name": "ocrd-typegroups-classifier",
                    "package_url": "https://pypi.org/project/ocrd-typegroups-classifier/",
                    "platform": "",
                    "project_url": "https://pypi.org/project/ocrd-typegroups-classifier/",
                    "project_urls": {
                        "Homepage": "https://github.com/OCR-D/ocrd_typegroups_classifier"
                    },
                    "release_url": "https://pypi.org/project/ocrd-typegroups-classifier/0.3.0/",
                    "requires_dist": [
                        "ocrd (>=2.22.3)",
                        "pandas",
                        "scikit-image",
                        "torch (>=1.4.0)",
                        "torchvision (>=0.5.0)"
                    ],
                    "requires_python": "",
                    "summary": "Typegroups classifier for OCR",
                    "version": "0.3.0",
                    "yanked": false,
                    "yanked_reason": null
                },
                "last_serial": 9254955,
                "releases": {
                    "0.0.1": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "19437f8f76a7e346479a2bea163b164f",
                                "sha256": "d469964e37069a2dab403bbf7400eec4ddabcf4ee83c86d6e88bda1bd96e9c1d"
                            },
                            "downloads": -1,
                            "filename": "ocrd_typegroups_classifier-0.0.1-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "19437f8f76a7e346479a2bea163b164f",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 26290742,
                            "upload_time": "2019-11-29T15:27:55",
                            "upload_time_iso_8601": "2019-11-29T15:27:55.449239Z",
                            "url": "https://files.pythonhosted.org/packages/e6/1b/5d0e6967985a7e23d01f558677bd7de4385dacc0186e4896ad23cb4e2f0d/ocrd_typegroups_classifier-0.0.1-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "48c202c02d301243c8e9f365e9dcad1d",
                                "sha256": "6b339f6b52cb62acc93f64d11637aa895a2cfbe7958df3391e4d6480d8c87d28"
                            },
                            "downloads": -1,
                            "filename": "ocrd_typegroups_classifier-0.0.1.tar.gz",
                            "has_sig": false,
                            "md5_digest": "48c202c02d301243c8e9f365e9dcad1d",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 15969,
                            "upload_time": "2019-11-29T15:27:59",
                            "upload_time_iso_8601": "2019-11-29T15:27:59.723574Z",
                            "url": "https://files.pythonhosted.org/packages/6a/d0/620fd50f319ef68ec959b67d0c048bb0f1d602ca5cc0baa0ff46fd235382/ocrd_typegroups_classifier-0.0.1.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.0.2": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "733fcd5009cf54a7349aa314bf9a6e47",
                                "sha256": "75057c3c0c8be6f664f04c903ce3fd4337a5f87dea8c825a423e006a2c406a03"
                            },
                            "downloads": -1,
                            "filename": "ocrd_typegroups_classifier-0.0.2-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "733fcd5009cf54a7349aa314bf9a6e47",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 26294951,
                            "upload_time": "2020-01-16T10:39:25",
                            "upload_time_iso_8601": "2020-01-16T10:39:25.132553Z",
                            "url": "https://files.pythonhosted.org/packages/bc/82/1b0976ef56d24962249dd9c4ff1c8dff259413cb52cc99bb08bbea15e1f8/ocrd_typegroups_classifier-0.0.2-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "4e597d6a3f75c4991392b11e88f89f40",
                                "sha256": "8c9b0f8253a2b34985128201ff155329ce23a5094e21f5f162d9ffa12ce8230b"
                            },
                            "downloads": -1,
                            "filename": "ocrd_typegroups_classifier-0.0.2.tar.gz",
                            "has_sig": false,
                            "md5_digest": "4e597d6a3f75c4991392b11e88f89f40",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 15988,
                            "upload_time": "2020-01-16T10:39:28",
                            "upload_time_iso_8601": "2020-01-16T10:39:28.744590Z",
                            "url": "https://files.pythonhosted.org/packages/13/6c/ad140f1e282941da373f19236cfffdc7b4dfe8190cef547175d33c3de8d9/ocrd_typegroups_classifier-0.0.2.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.2": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "d3e03a9dacd45f70358f89a5f3b80c8c",
                                "sha256": "1c75309aff20a9664382655be25dd64725dea6152ad9e4c3d813d24d808e1442"
                            },
                            "downloads": -1,
                            "filename": "ocrd_typegroups_classifier-0.1.2-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "d3e03a9dacd45f70358f89a5f3b80c8c",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 26324468,
                            "upload_time": "2020-10-14T09:45:44",
                            "upload_time_iso_8601": "2020-10-14T09:45:44.398779Z",
                            "url": "https://files.pythonhosted.org/packages/2a/ab/6d863cee7a83c7d84a59d0c38a2ecc4455a2668ab1c6cdf22eb6e3d5a247/ocrd_typegroups_classifier-0.1.2-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "ce98bcbbedb04b708751c914af81879f",
                                "sha256": "892c1a2dda58a0f0a9d8ead078197e1b6160a9a8d004f0cb6298ceaed557b76e"
                            },
                            "downloads": -1,
                            "filename": "ocrd_typegroups_classifier-0.1.2.tar.gz",
                            "has_sig": false,
                            "md5_digest": "ce98bcbbedb04b708751c914af81879f",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 18753,
                            "upload_time": "2020-10-14T09:45:46",
                            "upload_time_iso_8601": "2020-10-14T09:45:46.754554Z",
                            "url": "https://files.pythonhosted.org/packages/0c/45/0e30b3c7e75f55d7b60996419fc3b207e962c36e7a53c3c4322a491b3d8d/ocrd_typegroups_classifier-0.1.2.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.3": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "6e7b7c684aa77cad4240521418242963",
                                "sha256": "89be3199737da80fd4593f526b3a6bd205e01dadfd237336f20e6730fbaf3a9f"
                            },
                            "downloads": -1,
                            "filename": "ocrd_typegroups_classifier-0.1.3-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "6e7b7c684aa77cad4240521418242963",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 26324937,
                            "upload_time": "2020-12-10T11:01:56",
                            "upload_time_iso_8601": "2020-12-10T11:01:56.065678Z",
                            "url": "https://files.pythonhosted.org/packages/c8/17/f390a6516e77967ee858be97bfe8d7599ec4e63734912942fe8b4bad7a97/ocrd_typegroups_classifier-0.1.3-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "4d16ef6957184f3b4d77eddd56f0d22a",
                                "sha256": "3c8fa0e7b330c9df41a1b8d0eeaf56e52a3725d152f5359eef359a886e6dcd10"
                            },
                            "downloads": -1,
                            "filename": "ocrd_typegroups_classifier-0.1.3.tar.gz",
                            "has_sig": false,
                            "md5_digest": "4d16ef6957184f3b4d77eddd56f0d22a",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 19402,
                            "upload_time": "2020-12-10T11:01:57",
                            "upload_time_iso_8601": "2020-12-10T11:01:57.906067Z",
                            "url": "https://files.pythonhosted.org/packages/f4/3e/72c1a328834aba0b021874acf23ac5d466f4d6d48ef4ff4fbb8f971e84c7/ocrd_typegroups_classifier-0.1.3.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.1.4": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "b5b37fe585b6c314deba6a3e893068fc",
                                "sha256": "c8493e7459a6886011ca546a6f6a6327d037508f9670fc205fea33f37ad53715"
                            },
                            "downloads": -1,
                            "filename": "ocrd_typegroups_classifier-0.1.4-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "b5b37fe585b6c314deba6a3e893068fc",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 26324988,
                            "upload_time": "2020-12-21T11:56:27",
                            "upload_time_iso_8601": "2020-12-21T11:56:27.153162Z",
                            "url": "https://files.pythonhosted.org/packages/66/9d/b171fdadc20a40fd35b5cb65efe32d989a082d0692acf79c248f1b28657b/ocrd_typegroups_classifier-0.1.4-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "591edf2a56646ec163db8a76c1bf3071",
                                "sha256": "012c822579b02b00895ce006312eae33c772d29f7b10a6d57111eec2f8979a7c"
                            },
                            "downloads": -1,
                            "filename": "ocrd_typegroups_classifier-0.1.4.tar.gz",
                            "has_sig": false,
                            "md5_digest": "591edf2a56646ec163db8a76c1bf3071",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 19466,
                            "upload_time": "2020-12-21T11:56:29",
                            "upload_time_iso_8601": "2020-12-21T11:56:29.090661Z",
                            "url": "https://files.pythonhosted.org/packages/d5/41/9c78f942aa9d550a4f8dda8481757cbd83cdc08cc57e881473be08d73679/ocrd_typegroups_classifier-0.1.4.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.2.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "c7913358b3a9c0bdda6d62a70fc277a4",
                                "sha256": "cfe1cad0ebd89f5c208283f2110a57c5358ca0c885a35bedc49fe7f3faa7a164"
                            },
                            "downloads": -1,
                            "filename": "ocrd_typegroups_classifier-0.2.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "c7913358b3a9c0bdda6d62a70fc277a4",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 26325054,
                            "upload_time": "2020-12-22T17:29:58",
                            "upload_time_iso_8601": "2020-12-22T17:29:58.005063Z",
                            "url": "https://files.pythonhosted.org/packages/3a/fd/f998022e180a1146503341ae0be8d924202e1753111602c2b1d2cf00b382/ocrd_typegroups_classifier-0.2.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "24ff0b9b5cabf96b856413c5c59f11e7",
                                "sha256": "162da3e68ea0d603abf0d98365d345445a603f96b8ad15487da0660fedebae3e"
                            },
                            "downloads": -1,
                            "filename": "ocrd_typegroups_classifier-0.2.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "24ff0b9b5cabf96b856413c5c59f11e7",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 19516,
                            "upload_time": "2020-12-22T17:30:00",
                            "upload_time_iso_8601": "2020-12-22T17:30:00.478719Z",
                            "url": "https://files.pythonhosted.org/packages/5b/e5/2146b3a17993becddda59d9bc1c4080ec0df0566559022a236a843b3ade3/ocrd_typegroups_classifier-0.2.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ],
                    "0.3.0": [
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "f6a0457e9e0629569db94cceecefdbc6",
                                "sha256": "6270a40bee59ff9cb6b84061dfa87aff12b47dac7b9ba6005ce4a0d5cc7f50e7"
                            },
                            "downloads": -1,
                            "filename": "ocrd_typegroups_classifier-0.3.0-py3-none-any.whl",
                            "has_sig": false,
                            "md5_digest": "f6a0457e9e0629569db94cceecefdbc6",
                            "packagetype": "bdist_wheel",
                            "python_version": "py3",
                            "requires_python": null,
                            "size": 26325067,
                            "upload_time": "2021-01-28T13:46:41",
                            "upload_time_iso_8601": "2021-01-28T13:46:41.271382Z",
                            "url": "https://files.pythonhosted.org/packages/84/99/c7c08cbffd70794d3a55181dbd77eed6c548aa3fb5ff9f19a06ab32ce3e6/ocrd_typegroups_classifier-0.3.0-py3-none-any.whl",
                            "yanked": false,
                            "yanked_reason": null
                        },
                        {
                            "comment_text": "",
                            "digests": {
                                "md5": "400f874854f8bf268dc17fbd5ea1e8c6",
                                "sha256": "0d7f254f9460ed8479cdbe295734dc4429e8503c8d5d7a8edbe447a459a3d04b"
                            },
                            "downloads": -1,
                            "filename": "ocrd_typegroups_classifier-0.3.0.tar.gz",
                            "has_sig": false,
                            "md5_digest": "400f874854f8bf268dc17fbd5ea1e8c6",
                            "packagetype": "sdist",
                            "python_version": "source",
                            "requires_python": null,
                            "size": 19537,
                            "upload_time": "2021-01-28T13:46:43",
                            "upload_time_iso_8601": "2021-01-28T13:46:43.250262Z",
                            "url": "https://files.pythonhosted.org/packages/11/68/d0d5d173468701ba5f951a084a4f9e54d6716ac1f5f12cc218041e0b727f/ocrd_typegroups_classifier-0.3.0.tar.gz",
                            "yanked": false,
                            "yanked_reason": null
                        }
                    ]
                },
                "urls": [
                    {
                        "comment_text": "",
                        "digests": {
                            "md5": "f6a0457e9e0629569db94cceecefdbc6",
                            "sha256": "6270a40bee59ff9cb6b84061dfa87aff12b47dac7b9ba6005ce4a0d5cc7f50e7"
                        },
                        "downloads": -1,
                        "filename": "ocrd_typegroups_classifier-0.3.0-py3-none-any.whl",
                        "has_sig": false,
                        "md5_digest": "f6a0457e9e0629569db94cceecefdbc6",
                        "packagetype": "bdist_wheel",
                        "python_version": "py3",
                        "requires_python": null,
                        "size": 26325067,
                        "upload_time": "2021-01-28T13:46:41",
                        "upload_time_iso_8601": "2021-01-28T13:46:41.271382Z",
                        "url": "https://files.pythonhosted.org/packages/84/99/c7c08cbffd70794d3a55181dbd77eed6c548aa3fb5ff9f19a06ab32ce3e6/ocrd_typegroups_classifier-0.3.0-py3-none-any.whl",
                        "yanked": false,
                        "yanked_reason": null
                    },
                    {
                        "comment_text": "",
                        "digests": {
                            "md5": "400f874854f8bf268dc17fbd5ea1e8c6",
                            "sha256": "0d7f254f9460ed8479cdbe295734dc4429e8503c8d5d7a8edbe447a459a3d04b"
                        },
                        "downloads": -1,
                        "filename": "ocrd_typegroups_classifier-0.3.0.tar.gz",
                        "has_sig": false,
                        "md5_digest": "400f874854f8bf268dc17fbd5ea1e8c6",
                        "packagetype": "sdist",
                        "python_version": "source",
                        "requires_python": null,
                        "size": 19537,
                        "upload_time": "2021-01-28T13:46:43",
                        "upload_time_iso_8601": "2021-01-28T13:46:43.250262Z",
                        "url": "https://files.pythonhosted.org/packages/11/68/d0d5d173468701ba5f951a084a4f9e54d6716ac1f5f12cc218041e0b727f/ocrd_typegroups_classifier-0.3.0.tar.gz",
                        "yanked": false,
                        "yanked_reason": null
                    }
                ],
                "vulnerabilities": []
            },
            "url": "https://github.com/OCR-D/ocrd_typegroups_classifier"
        },
        "url": "https://github.com/OCR-D/ocrd_typegroups_classifier"
    }
]
